
MDP project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009410  08009410  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009410  08009410  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009410  08009410  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b90  20000074  0800948c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c04  0800948c  00022c04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac89  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f9  00000000  00000000  0003ad26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  0003fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000390a  00000000  00000000  00041228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e1d  00000000  00000000  00044b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7faa  00000000  00000000  0005c94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001048f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  0010494c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	080087e4 	.word	0x080087e4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	080087e4 	.word	0x080087e4

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f001 fbc8 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f866 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 fb4c 	bl	80008d8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000240:	f000 fa76 	bl	8000730 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000244:	f000 f92e 	bl	80004a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000248:	f000 f9ca 	bl	80005e0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800024c:	f000 fb1a 	bl	8000884 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000250:	f000 fa1a 	bl	8000688 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000254:	f000 f8aa 	bl	80003ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8000258:	f000 f8e6 	bl	8000428 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800025c:	f007 fdca 	bl	8007df4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
 8000260:	2205      	movs	r2, #5
 8000262:	4918      	ldr	r1, [pc, #96]	; (80002c4 <main+0x94>)
 8000264:	4818      	ldr	r0, [pc, #96]	; (80002c8 <main+0x98>)
 8000266:	f004 fae7 	bl	8004838 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800026a:	f004 ff47 	bl	80050fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <main+0x9c>)
 8000270:	2100      	movs	r1, #0
 8000272:	4817      	ldr	r0, [pc, #92]	; (80002d0 <main+0xa0>)
 8000274:	f004 ffa8 	bl	80051c8 <osThreadNew>
 8000278:	4603      	mov	r3, r0
 800027a:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <main+0xa4>)
 800027c:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 800027e:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <main+0xa8>)
 8000280:	2100      	movs	r1, #0
 8000282:	4816      	ldr	r0, [pc, #88]	; (80002dc <main+0xac>)
 8000284:	f004 ffa0 	bl	80051c8 <osThreadNew>
 8000288:	4603      	mov	r3, r0
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <main+0xb0>)
 800028c:	6013      	str	r3, [r2, #0]

  /* creation of showTask */
  showTaskHandle = osThreadNew(show, NULL, &showTask_attributes);
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <main+0xb4>)
 8000290:	2100      	movs	r1, #0
 8000292:	4815      	ldr	r0, [pc, #84]	; (80002e8 <main+0xb8>)
 8000294:	f004 ff98 	bl	80051c8 <osThreadNew>
 8000298:	4603      	mov	r3, r0
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <main+0xbc>)
 800029c:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <main+0xc0>)
 80002a0:	2100      	movs	r1, #0
 80002a2:	4814      	ldr	r0, [pc, #80]	; (80002f4 <main+0xc4>)
 80002a4:	f004 ff90 	bl	80051c8 <osThreadNew>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <main+0xc8>)
 80002ac:	6013      	str	r3, [r2, #0]

  /* creation of IRRead */
  IRReadHandle = osThreadNew(sensorDist, NULL, &IRRead_attributes);
 80002ae:	4a13      	ldr	r2, [pc, #76]	; (80002fc <main+0xcc>)
 80002b0:	2100      	movs	r1, #0
 80002b2:	4813      	ldr	r0, [pc, #76]	; (8000300 <main+0xd0>)
 80002b4:	f004 ff88 	bl	80051c8 <osThreadNew>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <main+0xd4>)
 80002bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002be:	f004 ff4f 	bl	8005160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <main+0x92>
 80002c4:	20002750 	.word	0x20002750
 80002c8:	20002600 	.word	0x20002600
 80002cc:	080088ac 	.word	0x080088ac
 80002d0:	080009b1 	.word	0x080009b1
 80002d4:	200025b0 	.word	0x200025b0
 80002d8:	080088d0 	.word	0x080088d0
 80002dc:	08000dc1 	.word	0x08000dc1
 80002e0:	20002674 	.word	0x20002674
 80002e4:	080088f4 	.word	0x080088f4
 80002e8:	08001139 	.word	0x08001139
 80002ec:	200025b4 	.word	0x200025b4
 80002f0:	08008918 	.word	0x08008918
 80002f4:	080011c9 	.word	0x080011c9
 80002f8:	2000267c 	.word	0x2000267c
 80002fc:	0800893c 	.word	0x0800893c
 8000300:	0800137d 	.word	0x0800137d
 8000304:	200026fc 	.word	0x200026fc

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b096      	sub	sp, #88	; 0x58
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f007 fe30 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033c:	2302      	movs	r3, #2
 800033e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	2301      	movs	r3, #1
 8000342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000344:	2310      	movs	r3, #16
 8000346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000348:	2300      	movs	r3, #0
 800034a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000350:	4618      	mov	r0, r3
 8000352:	f002 fc2b 	bl	8002bac <HAL_RCC_OscConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800035c:	f001 f868 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fe96 	bl	80030ac <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000386:	f001 f853 	bl	8001430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800038a:	2302      	movs	r3, #2
 800038c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f003 f823 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003a0:	f001 f846 	bl	8001430 <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3758      	adds	r7, #88	; 0x58
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0x74>)
 80003be:	4a19      	ldr	r2, [pc, #100]	; (8000424 <MX_ADC1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0x74>)
 80003d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_ADC1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0x74>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_ADC1_Init+0x74>)
 80003ea:	f001 fb73 	bl	8001ad4 <HAL_ADC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003f4:	f001 f81c 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003f8:	230b      	movs	r3, #11
 80003fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0x74>)
 800040a:	f001 fe0d 	bl	8002028 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000414:	f001 f80c 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200026c8 	.word	0x200026c8
 8000424:	40012400 	.word	0x40012400

08000428 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_ADC2_Init+0x74>)
 800043a:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <MX_ADC2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <MX_ADC2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_ADC2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_ADC2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_ADC2_Init+0x74>)
 8000452:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000456:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <MX_ADC2_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_ADC2_Init+0x74>)
 8000460:	2201      	movs	r2, #1
 8000462:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <MX_ADC2_Init+0x74>)
 8000466:	f001 fb35 	bl	8001ad4 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000470:	f000 ffde 	bl	8001430 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000474:	230c      	movs	r3, #12
 8000476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_ADC2_Init+0x74>)
 8000486:	f001 fdcf 	bl	8002028 <HAL_ADC_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000490:	f000 ffce 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20002644 	.word	0x20002644
 80004a0:	40012800 	.word	0x40012800

080004a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b096      	sub	sp, #88	; 0x58
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2220      	movs	r2, #32
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f007 fd4d 	bl	8007f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e2:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <MX_TIM1_Init+0x134>)
 80004e4:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <MX_TIM1_Init+0x138>)
 80004e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80004e8:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <MX_TIM1_Init+0x134>)
 80004ea:	22a0      	movs	r2, #160	; 0xa0
 80004ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <MX_TIM1_Init+0x134>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80004f4:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <MX_TIM1_Init+0x134>)
 80004f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_TIM1_Init+0x134>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <MX_TIM1_Init+0x134>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000508:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <MX_TIM1_Init+0x134>)
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050e:	4832      	ldr	r0, [pc, #200]	; (80005d8 <MX_TIM1_Init+0x134>)
 8000510:	f003 f902 	bl	8003718 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800051a:	f000 ff89 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000524:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000528:	4619      	mov	r1, r3
 800052a:	482b      	ldr	r0, [pc, #172]	; (80005d8 <MX_TIM1_Init+0x134>)
 800052c:	f003 fc44 	bl	8003db8 <HAL_TIM_ConfigClockSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000536:	f000 ff7b 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800053a:	4827      	ldr	r0, [pc, #156]	; (80005d8 <MX_TIM1_Init+0x134>)
 800053c:	f003 f93b 	bl	80037b6 <HAL_TIM_PWM_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000546:	f000 ff73 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000556:	4619      	mov	r1, r3
 8000558:	481f      	ldr	r0, [pc, #124]	; (80005d8 <MX_TIM1_Init+0x134>)
 800055a:	f003 ffd1 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000564:	f000 ff64 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000584:	220c      	movs	r2, #12
 8000586:	4619      	mov	r1, r3
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_TIM1_Init+0x134>)
 800058a:	f003 fb57 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000594:	f000 ff4c 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <MX_TIM1_Init+0x134>)
 80005bc:	f004 f80c 	bl	80045d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80005c6:	f000 ff33 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <MX_TIM1_Init+0x134>)
 80005cc:	f001 f8be 	bl	800174c <HAL_TIM_MspPostInit>

}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20002704 	.word	0x20002704
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	; 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2224      	movs	r2, #36	; 0x24
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fcc4 	bl	8007f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_TIM2_Init+0xa4>)
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_TIM2_Init+0xa4>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_TIM2_Init+0xa4>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_TIM2_Init+0xa4>)
 8000612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_TIM2_Init+0xa4>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_TIM2_Init+0xa4>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000624:	2303      	movs	r3, #3
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000634:	230a      	movs	r3, #10
 8000636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800063c:	2301      	movs	r3, #1
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_TIM2_Init+0xa4>)
 8000650:	f003 f9c4 	bl	80039dc <HAL_TIM_Encoder_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800065a:	f000 fee9 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_TIM2_Init+0xa4>)
 800066c:	f003 ff48 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000676:	f000 fedb 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3730      	adds	r7, #48	; 0x30
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20002764 	.word	0x20002764

08000688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2224      	movs	r2, #36	; 0x24
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f007 fc70 	bl	8007f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006a6:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_TIM3_Init+0xa4>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80006da:	230a      	movs	r3, #10
 80006dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e2:	2301      	movs	r3, #1
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80006ea:	230a      	movs	r3, #10
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM3_Init+0xa0>)
 80006f6:	f003 f971 	bl	80039dc <HAL_TIM_Encoder_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 fe96 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_TIM3_Init+0xa0>)
 8000712:	f003 fef5 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 fe88 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	; 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20002680 	.word	0x20002680
 800072c:	40000400 	.word	0x40000400

08000730 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2220      	movs	r2, #32
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f007 fc07 	bl	8007f7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800076e:	4b43      	ldr	r3, [pc, #268]	; (800087c <MX_TIM8_Init+0x14c>)
 8000770:	4a43      	ldr	r2, [pc, #268]	; (8000880 <MX_TIM8_Init+0x150>)
 8000772:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <MX_TIM8_Init+0x14c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b40      	ldr	r3, [pc, #256]	; (800087c <MX_TIM8_Init+0x14c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000780:	4b3e      	ldr	r3, [pc, #248]	; (800087c <MX_TIM8_Init+0x14c>)
 8000782:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000786:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_TIM8_Init+0x14c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_TIM8_Init+0x14c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_TIM8_Init+0x14c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800079a:	4838      	ldr	r0, [pc, #224]	; (800087c <MX_TIM8_Init+0x14c>)
 800079c:	f002 ffbc 	bl	8003718 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007a6:	f000 fe43 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007b4:	4619      	mov	r1, r3
 80007b6:	4831      	ldr	r0, [pc, #196]	; (800087c <MX_TIM8_Init+0x14c>)
 80007b8:	f003 fafe 	bl	8003db8 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80007c2:	f000 fe35 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007c6:	482d      	ldr	r0, [pc, #180]	; (800087c <MX_TIM8_Init+0x14c>)
 80007c8:	f002 fff5 	bl	80037b6 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80007d2:	f000 fe2d 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e2:	4619      	mov	r1, r3
 80007e4:	4825      	ldr	r0, [pc, #148]	; (800087c <MX_TIM8_Init+0x14c>)
 80007e6:	f003 fe8b 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80007f0:	f000 fe1e 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_TIM8_Init+0x14c>)
 800081a:	f003 fa0f 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000824:	f000 fe04 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	2204      	movs	r2, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_TIM8_Init+0x14c>)
 8000832:	f003 fa03 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800083c:	f000 fdf8 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM8_Init+0x14c>)
 8000864:	f003 feb8 	bl	80045d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800086e:	f000 fddf 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	; 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200025b8 	.word	0x200025b8
 8000880:	40013400 	.word	0x40013400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART3_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008bc:	f003 fedd 	bl	800467a <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 fdb3 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20002600 	.word	0x20002600
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000954:	f002 f8e0 	bl	8002b18 <HAL_GPIO_WritePin>
                          |LED_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	213c      	movs	r1, #60	; 0x3c
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_GPIO_Init+0xd4>)
 800095e:	f002 f8db 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED_3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000962:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000966:	613b      	str	r3, [r7, #16]
                          |LED_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0xd0>)
 800097c:	f001 ff38 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000980:	233c      	movs	r3, #60	; 0x3c
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_GPIO_Init+0xd4>)
 8000998:	f001 ff2a 	bl	80027f0 <HAL_GPIO_Init>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40011800 	.word	0x40011800
 80009ac:	40010800 	.word	0x40010800

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 80009b8:	2341      	movs	r3, #65	; 0x41
 80009ba:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
 80009bc:	f107 010f 	add.w	r1, r7, #15
 80009c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c4:	2201      	movs	r2, #1
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <StartDefaultTask+0x44>)
 80009c8:	f003 fea4 	bl	8004714 <HAL_UART_Transmit>
	  if(ch<'Z')
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b59      	cmp	r3, #89	; 0x59
 80009d0:	d804      	bhi.n	80009dc <StartDefaultTask+0x2c>
		  ch++;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e001      	b.n	80009e0 <StartDefaultTask+0x30>
	  else ch = 'A';
 80009dc:	2341      	movs	r3, #65	; 0x41
 80009de:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <StartDefaultTask+0x48>)
 80009e6:	f002 f8af 	bl	8002b48 <HAL_GPIO_TogglePin>
    osDelay(5000);
 80009ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80009ee:	f004 fc95 	bl	800531c <osDelay>
	  HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
 80009f2:	e7e3      	b.n	80009bc <StartDefaultTask+0xc>
 80009f4:	20002600 	.word	0x20002600
 80009f8:	40011800 	.word	0x40011800

080009fc <stop>:
bool A_faster = false;
uint16_t dummy = 0;

uint16_t errorVal = 0;
void stop()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint16_t speedA = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	80fb      	strh	r3, [r7, #6]
	uint16_t speedB = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	80bb      	strh	r3, [r7, #4]
	//uint16_t speedA = 1000;
	//speedA = speedA - offset;
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	4810      	ldr	r0, [pc, #64]	; (8000a50 <stop+0x54>)
 8000a10:	f002 f882 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2120      	movs	r1, #32
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <stop+0x54>)
 8000a1a:	f002 f87d 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <stop+0x54>)
 8000a24:	f002 f878 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <stop+0x54>)
 8000a2e:	f002 f873 	bl	8002b18 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <stop+0x58>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <stop+0x58>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f004 fc6a 	bl	800531c <osDelay>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010800 	.word	0x40010800
 8000a54:	200025b8 	.word	0x200025b8

08000a58 <turnR>:
void turnR()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	htim1.Instance ->CCR4 = 89; // extreme right
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <turnR+0xa8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2259      	movs	r2, #89	; 0x59
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
	uint16_t speedC = 2500;
 8000a66:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a6a:	80fb      	strh	r3, [r7, #6]
	uint16_t speedD = 200;
 8000a6c:	23c8      	movs	r3, #200	; 0xc8
 8000a6e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2104      	movs	r1, #4
 8000a74:	4823      	ldr	r0, [pc, #140]	; (8000b04 <turnR+0xac>)
 8000a76:	f002 f84f 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <turnR+0xac>)
 8000a80:	f002 f84a 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2108      	movs	r1, #8
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <turnR+0xac>)
 8000a8a:	f002 f845 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2110      	movs	r1, #16
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <turnR+0xac>)
 8000a94:	f002 f840 	bl	8002b18 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedC);
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <turnR+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	88fa      	ldrh	r2, [r7, #6]
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedD);
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <turnR+0xb0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
	//osDelay(2700); setpoint
	osDelay(3300);
 8000aa8:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000aac:	f004 fc36 	bl	800531c <osDelay>
	uint16_t speedA = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	807b      	strh	r3, [r7, #2]
	uint16_t speedB = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	803b      	strh	r3, [r7, #0]
	//uint16_t speedA = 1000;
	//speedA = speedA - offset;
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2104      	movs	r1, #4
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <turnR+0xac>)
 8000abe:	f002 f82b 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <turnR+0xac>)
 8000ac8:	f002 f826 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2108      	movs	r1, #8
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <turnR+0xac>)
 8000ad2:	f002 f821 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <turnR+0xac>)
 8000adc:	f002 f81c 	bl	8002b18 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <turnR+0xb0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	887a      	ldrh	r2, [r7, #2]
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <turnR+0xb0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	883a      	ldrh	r2, [r7, #0]
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance ->CCR4 = 74; // center
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <turnR+0xa8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	224a      	movs	r2, #74	; 0x4a
 8000af6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20002704 	.word	0x20002704
 8000b04:	40010800 	.word	0x40010800
 8000b08:	200025b8 	.word	0x200025b8

08000b0c <turnL>:
void turnL()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	//walk str8
	uint16_t speedC = 900;
 8000b12:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000b16:	80fb      	strh	r3, [r7, #6]
	uint16_t speedD = 900;
 8000b18:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000b1c:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2104      	movs	r1, #4
 8000b22:	4836      	ldr	r0, [pc, #216]	; (8000bfc <turnL+0xf0>)
 8000b24:	f001 fff8 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	4833      	ldr	r0, [pc, #204]	; (8000bfc <turnL+0xf0>)
 8000b2e:	f001 fff3 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	4831      	ldr	r0, [pc, #196]	; (8000bfc <turnL+0xf0>)
 8000b38:	f001 ffee 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	482e      	ldr	r0, [pc, #184]	; (8000bfc <turnL+0xf0>)
 8000b42:	f001 ffe9 	bl	8002b18 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedC);
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <turnL+0xf4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedD);
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <turnL+0xf4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(1500);
 8000b56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b5a:	f004 fbdf 	bl	800531c <osDelay>
	//hard turn left
	speedC = 200;
 8000b5e:	23c8      	movs	r3, #200	; 0xc8
 8000b60:	80fb      	strh	r3, [r7, #6]
	speedD = 2300;
 8000b62:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8000b66:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedC);
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <turnL+0xf4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	88fa      	ldrh	r2, [r7, #6]
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedD);
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <turnL+0xf4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	88ba      	ldrh	r2, [r7, #4]
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance ->CCR4 = 57; // extreme left
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <turnL+0xf8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2239      	movs	r2, #57	; 0x39
 8000b7e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(2200);
 8000b80:	f640 0098 	movw	r0, #2200	; 0x898
 8000b84:	f004 fbca 	bl	800531c <osDelay>
	htim1.Instance ->CCR4 = 74; // center
 8000b88:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <turnL+0xf8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	224a      	movs	r2, #74	; 0x4a
 8000b8e:	641a      	str	r2, [r3, #64]	; 0x40
	speedC = 900;
 8000b90:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000b94:	80fb      	strh	r3, [r7, #6]
	speedD = 900;
 8000b96:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000b9a:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedC);
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <turnL+0xf4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	88fa      	ldrh	r2, [r7, #6]
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedD);
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <turnL+0xf4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	88ba      	ldrh	r2, [r7, #4]
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(700);
 8000bac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000bb0:	f004 fbb4 	bl	800531c <osDelay>
	uint16_t speedA = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	807b      	strh	r3, [r7, #2]
	uint16_t speedB = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	803b      	strh	r3, [r7, #0]
	//stop
	//uint16_t speedA = 1000;
	//speedA = speedA - offset;
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <turnL+0xf0>)
 8000bc2:	f001 ffa9 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <turnL+0xf0>)
 8000bcc:	f001 ffa4 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <turnL+0xf0>)
 8000bd6:	f001 ff9f 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <turnL+0xf0>)
 8000be0:	f001 ff9a 	bl	8002b18 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <turnL+0xf4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <turnL+0xf4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	883a      	ldrh	r2, [r7, #0]
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	200025b8 	.word	0x200025b8
 8000c04:	20002704 	.word	0x20002704

08000c08 <moveForward>:
void moveForward()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
		//speedA = 800;
		//speedB = 600;
	speedA = 1200;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <moveForward+0xa0>)
 8000c0e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000c12:	801a      	strh	r2, [r3, #0]
	speedB = 690;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <moveForward+0xa4>)
 8000c16:	f240 22b2 	movw	r2, #690	; 0x2b2
 8000c1a:	801a      	strh	r2, [r3, #0]
	  if (speedA == speedB){
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <moveForward+0xa0>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <moveForward+0xa4>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d106      	bne.n	8000c36 <moveForward+0x2e>
	    dummy += 1;
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <moveForward+0xa8>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <moveForward+0xa8>)
 8000c32:	801a      	strh	r2, [r3, #0]
 8000c34:	e014      	b.n	8000c60 <moveForward+0x58>
	  } else if(A_faster){
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <moveForward+0xac>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d008      	beq.n	8000c50 <moveForward+0x48>
	    speedA = speedA - errorVal;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <moveForward+0xa0>)
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <moveForward+0xb0>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <moveForward+0xa0>)
 8000c4c:	801a      	strh	r2, [r3, #0]
 8000c4e:	e007      	b.n	8000c60 <moveForward+0x58>
	  } else {
	    speedB = speedB - errorVal;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <moveForward+0xa4>)
 8000c52:	881a      	ldrh	r2, [r3, #0]
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <moveForward+0xb0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <moveForward+0xa4>)
 8000c5e:	801a      	strh	r2, [r3, #0]
	  }
		//uint16_t speedA = 1000;
		//speedA = speedA - offset;
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4815      	ldr	r0, [pc, #84]	; (8000cbc <moveForward+0xb4>)
 8000c66:	f001 ff57 	bl	8002b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <moveForward+0xb4>)
 8000c70:	f001 ff52 	bl	8002b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <moveForward+0xb4>)
 8000c7a:	f001 ff4d 	bl	8002b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	480e      	ldr	r0, [pc, #56]	; (8000cbc <moveForward+0xb4>)
 8000c84:	f001 ff48 	bl	8002b18 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <moveForward+0xa0>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <moveForward+0xb8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <moveForward+0xa4>)
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <moveForward+0xb8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f004 fb3d 	bl	800531c <osDelay>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200027ac 	.word	0x200027ac
 8000cac:	20002700 	.word	0x20002700
 8000cb0:	20000092 	.word	0x20000092
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	200025b8 	.word	0x200025b8

08000cc4 <moveBackword>:
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
		osDelay(1);
}
void moveBackword()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	  speedA = 800;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <moveBackword+0x98>)
 8000cca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000cce:	801a      	strh	r2, [r3, #0]
	  speedB = 600;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <moveBackword+0x9c>)
 8000cd2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cd6:	801a      	strh	r2, [r3, #0]
	  if (speedA == speedB){
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <moveBackword+0x98>)
 8000cda:	881a      	ldrh	r2, [r3, #0]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <moveBackword+0x9c>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d106      	bne.n	8000cf2 <moveBackword+0x2e>
	    dummy += 1;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <moveBackword+0xa0>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <moveBackword+0xa0>)
 8000cee:	801a      	strh	r2, [r3, #0]
 8000cf0:	e014      	b.n	8000d1c <moveBackword+0x58>
	  } else if(A_faster){
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <moveBackword+0xa4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <moveBackword+0x48>
	    speedA = speedA - errorVal;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <moveBackword+0x98>)
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <moveBackword+0xa8>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <moveBackword+0x98>)
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	e007      	b.n	8000d1c <moveBackword+0x58>
	  } else {
	    speedB = speedB - errorVal;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <moveBackword+0x9c>)
 8000d0e:	881a      	ldrh	r2, [r3, #0]
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <moveBackword+0xa8>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <moveBackword+0x9c>)
 8000d1a:	801a      	strh	r2, [r3, #0]
	  }
		//uint16_t speed = 2000;
		//speedA = speedA - offset;
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <moveBackword+0xac>)
 8000d22:	f001 fef9 	bl	8002b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <moveBackword+0xac>)
 8000d2c:	f001 fef4 	bl	8002b18 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speedA);
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <moveBackword+0x98>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <moveBackword+0xb0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <moveBackword+0xac>)
 8000d40:	f001 feea 	bl	8002b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <moveBackword+0xac>)
 8000d4a:	f001 fee5 	bl	8002b18 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speedB);
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <moveBackword+0x9c>)
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <moveBackword+0xb0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200027ac 	.word	0x200027ac
 8000d60:	20002700 	.word	0x20002700
 8000d64:	20000092 	.word	0x20000092
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	20000094 	.word	0x20000094
 8000d70:	40010800 	.word	0x40010800
 8000d74:	200025b8 	.word	0x200025b8

08000d78 <turnForward>:
void turnForward()
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	htim1.Instance ->CCR4 = 74; // center
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <turnForward+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	224a      	movs	r2, #74	; 0x4a
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20002704 	.word	0x20002704

08000d90 <turnLeft>:
void turnLeft()
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	htim1.Instance ->CCR4 = 57; // extreme left
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <turnLeft+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2239      	movs	r2, #57	; 0x39
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20002704 	.word	0x20002704

08000da8 <turnRight>:
void turnRight()
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	htim1.Instance ->CCR4 = 92; // extreme right
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <turnRight+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	225c      	movs	r2, #92	; 0x5c
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40

}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20002704 	.word	0x20002704

08000dc0 <motors>:
void motors(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
	uint16_t operator[4], i=0,y=0,z=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	82fb      	strh	r3, [r7, #22]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	82bb      	strh	r3, [r7, #20]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	827b      	strh	r3, [r7, #18]
	//uint16_t speedA = 1000;
	//uint16_t speedB = 1000;
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	49c6      	ldr	r1, [pc, #792]	; (80010f0 <motors+0x330>)
 8000dd8:	48c6      	ldr	r0, [pc, #792]	; (80010f4 <motors+0x334>)
 8000dda:	f003 fd2d 	bl	8004838 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000dde:	2100      	movs	r1, #0
 8000de0:	48c5      	ldr	r0, [pc, #788]	; (80010f8 <motors+0x338>)
 8000de2:	f002 fd41 	bl	8003868 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000de6:	2104      	movs	r1, #4
 8000de8:	48c3      	ldr	r0, [pc, #780]	; (80010f8 <motors+0x338>)
 8000dea:	f002 fd3d 	bl	8003868 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//testing for front wheel
 8000dee:	210c      	movs	r1, #12
 8000df0:	48c2      	ldr	r0, [pc, #776]	; (80010fc <motors+0x33c>)
 8000df2:	f002 fd39 	bl	8003868 <HAL_TIM_PWM_Start>
	//operator = 0;
	for(;;)
	{
	while(1)
	{
		HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
 8000df6:	2205      	movs	r2, #5
 8000df8:	49bd      	ldr	r1, [pc, #756]	; (80010f0 <motors+0x330>)
 8000dfa:	48be      	ldr	r0, [pc, #760]	; (80010f4 <motors+0x334>)
 8000dfc:	f003 fd1c 	bl	8004838 <HAL_UART_Receive_IT>
		operator[i] = aRxBuffer[i];
 8000e00:	8afb      	ldrh	r3, [r7, #22]
 8000e02:	4abb      	ldr	r2, [pc, #748]	; (80010f0 <motors+0x330>)
 8000e04:	5cd2      	ldrb	r2, [r2, r3]
 8000e06:	8afb      	ldrh	r3, [r7, #22]
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	f107 0118 	add.w	r1, r7, #24
 8000e10:	440b      	add	r3, r1
 8000e12:	f823 2c10 	strh.w	r2, [r3, #-16]
		{
			HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
			operator[0] = aRxBuffer[0];
		}*/

		if(i==5)
 8000e16:	8afb      	ldrh	r3, [r7, #22]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d101      	bne.n	8000e20 <motors+0x60>
		{
			i=0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	82fb      	strh	r3, [r7, #22]
		}
		switch(operator[i])
 8000e20:	8afb      	ldrh	r3, [r7, #22]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	f107 0218 	add.w	r2, r7, #24
 8000e28:	4413      	add	r3, r2
 8000e2a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000e2e:	3b30      	subs	r3, #48	; 0x30
 8000e30:	2b47      	cmp	r3, #71	; 0x47
 8000e32:	f200 817c 	bhi.w	800112e <motors+0x36e>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <motors+0x7c>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000fa5 	.word	0x08000fa5
 8000e40:	0800112f 	.word	0x0800112f
 8000e44:	0800112f 	.word	0x0800112f
 8000e48:	0800112f 	.word	0x0800112f
 8000e4c:	0800112f 	.word	0x0800112f
 8000e50:	0800112f 	.word	0x0800112f
 8000e54:	0800112f 	.word	0x0800112f
 8000e58:	0800112f 	.word	0x0800112f
 8000e5c:	0800112f 	.word	0x0800112f
 8000e60:	08001035 	.word	0x08001035
 8000e64:	0800112f 	.word	0x0800112f
 8000e68:	0800112f 	.word	0x0800112f
 8000e6c:	0800112f 	.word	0x0800112f
 8000e70:	0800112f 	.word	0x0800112f
 8000e74:	0800112f 	.word	0x0800112f
 8000e78:	0800112f 	.word	0x0800112f
 8000e7c:	0800112f 	.word	0x0800112f
 8000e80:	0800112f 	.word	0x0800112f
 8000e84:	0800112f 	.word	0x0800112f
 8000e88:	0800112f 	.word	0x0800112f
 8000e8c:	0800112f 	.word	0x0800112f
 8000e90:	0800112f 	.word	0x0800112f
 8000e94:	0800112f 	.word	0x0800112f
 8000e98:	0800112f 	.word	0x0800112f
 8000e9c:	0800112f 	.word	0x0800112f
 8000ea0:	0800112f 	.word	0x0800112f
 8000ea4:	0800112f 	.word	0x0800112f
 8000ea8:	0800112f 	.word	0x0800112f
 8000eac:	0800112f 	.word	0x0800112f
 8000eb0:	0800112f 	.word	0x0800112f
 8000eb4:	0800112f 	.word	0x0800112f
 8000eb8:	0800112f 	.word	0x0800112f
 8000ebc:	0800112f 	.word	0x0800112f
 8000ec0:	0800112f 	.word	0x0800112f
 8000ec4:	0800112f 	.word	0x0800112f
 8000ec8:	0800112f 	.word	0x0800112f
 8000ecc:	0800112f 	.word	0x0800112f
 8000ed0:	0800112f 	.word	0x0800112f
 8000ed4:	0800112f 	.word	0x0800112f
 8000ed8:	0800112f 	.word	0x0800112f
 8000edc:	080010ad 	.word	0x080010ad
 8000ee0:	0800112f 	.word	0x0800112f
 8000ee4:	0800112f 	.word	0x0800112f
 8000ee8:	0800112f 	.word	0x0800112f
 8000eec:	0800112f 	.word	0x0800112f
 8000ef0:	0800112f 	.word	0x0800112f
 8000ef4:	0800112f 	.word	0x0800112f
 8000ef8:	0800112f 	.word	0x0800112f
 8000efc:	0800112f 	.word	0x0800112f
 8000f00:	08000fed 	.word	0x08000fed
 8000f04:	0800112f 	.word	0x0800112f
 8000f08:	0800112f 	.word	0x0800112f
 8000f0c:	08001011 	.word	0x08001011
 8000f10:	08000f5d 	.word	0x08000f5d
 8000f14:	0800112f 	.word	0x0800112f
 8000f18:	0800112f 	.word	0x0800112f
 8000f1c:	0800112f 	.word	0x0800112f
 8000f20:	0800112f 	.word	0x0800112f
 8000f24:	0800112f 	.word	0x0800112f
 8000f28:	0800112f 	.word	0x0800112f
 8000f2c:	0800112f 	.word	0x0800112f
 8000f30:	0800112f 	.word	0x0800112f
 8000f34:	0800112f 	.word	0x0800112f
 8000f38:	0800112f 	.word	0x0800112f
 8000f3c:	0800112f 	.word	0x0800112f
 8000f40:	08000f81 	.word	0x08000f81
 8000f44:	0800112f 	.word	0x0800112f
 8000f48:	08001059 	.word	0x08001059
 8000f4c:	0800112f 	.word	0x0800112f
 8000f50:	0800112f 	.word	0x0800112f
 8000f54:	0800112f 	.word	0x0800112f
 8000f58:	08000fc9 	.word	0x08000fc9
		{
			case 'e':
				aRxBuffer[i] = '>';
 8000f5c:	8afb      	ldrh	r3, [r7, #22]
 8000f5e:	4a64      	ldr	r2, [pc, #400]	; (80010f0 <motors+0x330>)
 8000f60:	213e      	movs	r1, #62	; 0x3e
 8000f62:	54d1      	strb	r1, [r2, r3]
				operator[i] = '>';
 8000f64:	8afb      	ldrh	r3, [r7, #22]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	f107 0218 	add.w	r2, r7, #24
 8000f6c:	4413      	add	r3, r2
 8000f6e:	223e      	movs	r2, #62	; 0x3e
 8000f70:	f823 2c10 	strh.w	r2, [r3, #-16]
				turnR();
 8000f74:	f7ff fd70 	bl	8000a58 <turnR>
				i++;
 8000f78:	8afb      	ldrh	r3, [r7, #22]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	82fb      	strh	r3, [r7, #22]
				break;
 8000f7e:	e0d6      	b.n	800112e <motors+0x36e>
			case 'q':
				aRxBuffer[i] = '<';
 8000f80:	8afb      	ldrh	r3, [r7, #22]
 8000f82:	4a5b      	ldr	r2, [pc, #364]	; (80010f0 <motors+0x330>)
 8000f84:	213c      	movs	r1, #60	; 0x3c
 8000f86:	54d1      	strb	r1, [r2, r3]
				operator[i] = '<';
 8000f88:	8afb      	ldrh	r3, [r7, #22]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	f107 0218 	add.w	r2, r7, #24
 8000f90:	4413      	add	r3, r2
 8000f92:	223c      	movs	r2, #60	; 0x3c
 8000f94:	f823 2c10 	strh.w	r2, [r3, #-16]
				turnL();
 8000f98:	f7ff fdb8 	bl	8000b0c <turnL>
				i++;
 8000f9c:	8afb      	ldrh	r3, [r7, #22]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	82fb      	strh	r3, [r7, #22]
				break;
 8000fa2:	e0c4      	b.n	800112e <motors+0x36e>
			case '0':
				aRxBuffer[i] = '&';
 8000fa4:	8afb      	ldrh	r3, [r7, #22]
 8000fa6:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <motors+0x330>)
 8000fa8:	2126      	movs	r1, #38	; 0x26
 8000faa:	54d1      	strb	r1, [r2, r3]
				operator[i] = '&';
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	f107 0218 	add.w	r2, r7, #24
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2226      	movs	r2, #38	; 0x26
 8000fb8:	f823 2c10 	strh.w	r2, [r3, #-16]
				stop();
 8000fbc:	f7ff fd1e 	bl	80009fc <stop>
				i++;
 8000fc0:	8afb      	ldrh	r3, [r7, #22]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]
				break;
 8000fc6:	e0b2      	b.n	800112e <motors+0x36e>
			case 'w':
				aRxBuffer[i] = '^';
 8000fc8:	8afb      	ldrh	r3, [r7, #22]
 8000fca:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <motors+0x330>)
 8000fcc:	215e      	movs	r1, #94	; 0x5e
 8000fce:	54d1      	strb	r1, [r2, r3]
				operator[i] = '^';
 8000fd0:	8afb      	ldrh	r3, [r7, #22]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	f107 0218 	add.w	r2, r7, #24
 8000fd8:	4413      	add	r3, r2
 8000fda:	225e      	movs	r2, #94	; 0x5e
 8000fdc:	f823 2c10 	strh.w	r2, [r3, #-16]
				moveForward();
 8000fe0:	f7ff fe12 	bl	8000c08 <moveForward>
				i++;
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	82fb      	strh	r3, [r7, #22]
				break;
 8000fea:	e0a0      	b.n	800112e <motors+0x36e>
			case'a' :
				aRxBuffer[i] = '@';
 8000fec:	8afb      	ldrh	r3, [r7, #22]
 8000fee:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <motors+0x330>)
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	54d1      	strb	r1, [r2, r3]
				operator[i] = '@';
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	f107 0218 	add.w	r2, r7, #24
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	f823 2c10 	strh.w	r2, [r3, #-16]
				turnLeft();
 8001004:	f7ff fec4 	bl	8000d90 <turnLeft>
				i++;
 8001008:	8afb      	ldrh	r3, [r7, #22]
 800100a:	3301      	adds	r3, #1
 800100c:	82fb      	strh	r3, [r7, #22]
				break;
 800100e:	e08e      	b.n	800112e <motors+0x36e>
			case 'd':
				aRxBuffer[i] = '$';
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	4a37      	ldr	r2, [pc, #220]	; (80010f0 <motors+0x330>)
 8001014:	2124      	movs	r1, #36	; 0x24
 8001016:	54d1      	strb	r1, [r2, r3]
				operator[i] = '$';
 8001018:	8afb      	ldrh	r3, [r7, #22]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	f107 0218 	add.w	r2, r7, #24
 8001020:	4413      	add	r3, r2
 8001022:	2224      	movs	r2, #36	; 0x24
 8001024:	f823 2c10 	strh.w	r2, [r3, #-16]
				turnRight();
 8001028:	f7ff febe 	bl	8000da8 <turnRight>
				i++;
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	3301      	adds	r3, #1
 8001030:	82fb      	strh	r3, [r7, #22]
				break;
 8001032:	e07c      	b.n	800112e <motors+0x36e>
			case '9':
				aRxBuffer[i] = '-';
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <motors+0x330>)
 8001038:	212d      	movs	r1, #45	; 0x2d
 800103a:	54d1      	strb	r1, [r2, r3]
				operator[i] = '-';
 800103c:	8afb      	ldrh	r3, [r7, #22]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	f107 0218 	add.w	r2, r7, #24
 8001044:	4413      	add	r3, r2
 8001046:	222d      	movs	r2, #45	; 0x2d
 8001048:	f823 2c10 	strh.w	r2, [r3, #-16]
				turnForward();
 800104c:	f7ff fe94 	bl	8000d78 <turnForward>
				i++;
 8001050:	8afb      	ldrh	r3, [r7, #22]
 8001052:	3301      	adds	r3, #1
 8001054:	82fb      	strh	r3, [r7, #22]
				break;
 8001056:	e06a      	b.n	800112e <motors+0x36e>
			case 's':
				aRxBuffer[i]= '_';
 8001058:	8afb      	ldrh	r3, [r7, #22]
 800105a:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <motors+0x330>)
 800105c:	215f      	movs	r1, #95	; 0x5f
 800105e:	54d1      	strb	r1, [r2, r3]
				operator[i]= '_';
 8001060:	8afb      	ldrh	r3, [r7, #22]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	f107 0218 	add.w	r2, r7, #24
 8001068:	4413      	add	r3, r2
 800106a:	225f      	movs	r2, #95	; 0x5f
 800106c:	f823 2c10 	strh.w	r2, [r3, #-16]
				moveBackword();
 8001070:	f7ff fe28 	bl	8000cc4 <moveBackword>
				i++;
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	3301      	adds	r3, #1
 8001078:	82fb      	strh	r3, [r7, #22]
				break;
 800107a:	e058      	b.n	800112e <motors+0x36e>
			case'X':
				while((operator[0] == 'X'))
				{
					HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
 800107c:	2205      	movs	r2, #5
 800107e:	491c      	ldr	r1, [pc, #112]	; (80010f0 <motors+0x330>)
 8001080:	481c      	ldr	r0, [pc, #112]	; (80010f4 <motors+0x334>)
 8001082:	f003 fbd9 	bl	8004838 <HAL_UART_Receive_IT>
					operator[1] = aRxBuffer[1];
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <motors+0x330>)
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	b29b      	uxth	r3, r3
 800108c:	817b      	strh	r3, [r7, #10]
					operator[2] = aRxBuffer[2] ;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <motors+0x330>)
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	b29b      	uxth	r3, r3
 8001094:	81bb      	strh	r3, [r7, #12]
					operator[3] = aRxBuffer[3];
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <motors+0x330>)
 8001098:	78db      	ldrb	r3, [r3, #3]
 800109a:	b29b      	uxth	r3, r3
 800109c:	81fb      	strh	r3, [r7, #14]
					operator[4] = aRxBuffer[4];
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <motors+0x330>)
 80010a0:	791b      	ldrb	r3, [r3, #4]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	823b      	strh	r3, [r7, #16]
					if(operator[4] == 'X')
 80010a6:	8a3b      	ldrh	r3, [r7, #16]
 80010a8:	2b58      	cmp	r3, #88	; 0x58
 80010aa:	d003      	beq.n	80010b4 <motors+0x2f4>
				while((operator[0] == 'X'))
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	2b58      	cmp	r3, #88	; 0x58
 80010b0:	d0e4      	beq.n	800107c <motors+0x2bc>
 80010b2:	e000      	b.n	80010b6 <motors+0x2f6>
					{
						break;
 80010b4:	bf00      	nop

/*				var1 = atoi(operator[1]);
				var2 = atoi(operator[2]);
				var3 = atoi(operator[3]);*/

				switch(operator[1])
 80010b6:	897b      	ldrh	r3, [r7, #10]
 80010b8:	2b31      	cmp	r3, #49	; 0x31
 80010ba:	d002      	beq.n	80010c2 <motors+0x302>
 80010bc:	2b32      	cmp	r3, #50	; 0x32
 80010be:	d01f      	beq.n	8001100 <motors+0x340>
 80010c0:	e031      	b.n	8001126 <motors+0x366>
				{
					case '1':
						if(operator[2] == '1')
 80010c2:	89bb      	ldrh	r3, [r7, #12]
 80010c4:	2b31      	cmp	r3, #49	; 0x31
 80010c6:	d10a      	bne.n	80010de <motors+0x31e>
						{
							moveForward();
 80010c8:	f7ff fd9e 	bl	8000c08 <moveForward>
							operator[0] ='3';
 80010cc:	2333      	movs	r3, #51	; 0x33
 80010ce:	813b      	strh	r3, [r7, #8]
							aRxBuffer[0]='3';
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <motors+0x330>)
 80010d2:	2233      	movs	r2, #51	; 0x33
 80010d4:	701a      	strb	r2, [r3, #0]
							i--;
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	3b01      	subs	r3, #1
 80010da:	82fb      	strh	r3, [r7, #22]
							/*operator[4] ='3';
							aRxBuffer[4]='3';*/
							break;
 80010dc:	e023      	b.n	8001126 <motors+0x366>
						}
						else if(operator[2] == '2')
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	2b32      	cmp	r3, #50	; 0x32
 80010e2:	d10d      	bne.n	8001100 <motors+0x340>
						{
							moveBackword();
 80010e4:	f7ff fdee 	bl	8000cc4 <moveBackword>
							i++;
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	3301      	adds	r3, #1
 80010ec:	82fb      	strh	r3, [r7, #22]
							break;
 80010ee:	e01a      	b.n	8001126 <motors+0x366>
 80010f0:	20002750 	.word	0x20002750
 80010f4:	20002600 	.word	0x20002600
 80010f8:	200025b8 	.word	0x200025b8
 80010fc:	20002704 	.word	0x20002704
						}
					case '2':
						if(operator[2] == '1')
 8001100:	89bb      	ldrh	r3, [r7, #12]
 8001102:	2b31      	cmp	r3, #49	; 0x31
 8001104:	d105      	bne.n	8001112 <motors+0x352>
						{
							moveBackword();
 8001106:	f7ff fddd 	bl	8000cc4 <moveBackword>
							i++;
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	3301      	adds	r3, #1
 800110e:	82fb      	strh	r3, [r7, #22]
							break;
 8001110:	e009      	b.n	8001126 <motors+0x366>
						}
						else if(operator[2] == '2')
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	2b32      	cmp	r3, #50	; 0x32
 8001116:	d105      	bne.n	8001124 <motors+0x364>
						{
							moveForward();
 8001118:	f7ff fd76 	bl	8000c08 <moveForward>
							i++;
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	3301      	adds	r3, #1
 8001120:	82fb      	strh	r3, [r7, #22]
							break;
 8001122:	e000      	b.n	8001126 <motors+0x366>
						}
						break;
 8001124:	bf00      	nop
				}
				i++;
 8001126:	8afb      	ldrh	r3, [r7, #22]
 8001128:	3301      	adds	r3, #1
 800112a:	82fb      	strh	r3, [r7, #22]
				break;
 800112c:	bf00      	nop
	}osDelay(1000);
 800112e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001132:	f004 f8f3 	bl	800531c <osDelay>
		HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,5);
 8001136:	e65e      	b.n	8000df6 <motors+0x36>

08001138 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b08d      	sub	sp, #52	; 0x34
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	uint8_t hello[20] = "hello world\0";
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <show+0x80>)
 8001142:	f107 041c 	add.w	r4, r7, #28
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	c407      	stmia	r4!, {r0, r1, r2}
 800114a:	7023      	strb	r3, [r4, #0]
 800114c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t hello1[20] = "hello world\0";
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <show+0x80>)
 800115a:	f107 0408 	add.w	r4, r7, #8
 800115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001160:	c407      	stmia	r4!, {r0, r1, r2}
 8001162:	7023      	strb	r3, [r4, #0]
 8001164:	f107 0315 	add.w	r3, r7, #21
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	f8c3 2003 	str.w	r2, [r3, #3]

  /* Infinite loop */
  for(;;)
  {
	  sprintf(hello,"%s\0", aRxBuffer);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <show+0x84>)
 8001176:	4912      	ldr	r1, [pc, #72]	; (80011c0 <show+0x88>)
 8001178:	4618      	mov	r0, r3
 800117a:	f006 ff07 	bl	8007f8c <siprintf>
	  OLED_ShowString(10,40,hello);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	461a      	mov	r2, r3
 8001184:	2128      	movs	r1, #40	; 0x28
 8001186:	200a      	movs	r0, #10
 8001188:	f006 fe02 	bl	8007d90 <OLED_ShowString>

	  sprintf(hello1,"%s\0", "MDP-GRP9");
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <show+0x8c>)
 8001192:	490b      	ldr	r1, [pc, #44]	; (80011c0 <show+0x88>)
 8001194:	4618      	mov	r0, r3
 8001196:	f006 fef9 	bl	8007f8c <siprintf>
	  OLED_ShowString(10,10,hello1);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	461a      	mov	r2, r3
 80011a0:	210a      	movs	r1, #10
 80011a2:	200a      	movs	r0, #10
 80011a4:	f006 fdf4 	bl	8007d90 <OLED_ShowString>

	  OLED_Refresh_Gram();
 80011a8:	f006 fc80 	bl	8007aac <OLED_Refresh_Gram>
	  osDelay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b0:	f004 f8b4 	bl	800531c <osDelay>
  {
 80011b4:	e7dc      	b.n	8001170 <show+0x38>
 80011b6:	bf00      	nop
 80011b8:	08008844 	.word	0x08008844
 80011bc:	20002750 	.word	0x20002750
 80011c0:	08008834 	.word	0x08008834
 80011c4:	08008838 	.word	0x08008838

080011c8 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b092      	sub	sp, #72	; 0x48
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
	  /* Infinite loop */
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80011d0:	213c      	movs	r1, #60	; 0x3c
 80011d2:	4863      	ldr	r0, [pc, #396]	; (8001360 <encoder_task+0x198>)
 80011d4:	f002 fca4 	bl	8003b20 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	; 0x3c
 80011da:	4862      	ldr	r0, [pc, #392]	; (8001364 <encoder_task+0x19c>)
 80011dc:	f002 fca0 	bl	8003b20 <HAL_TIM_Encoder_Start>
	  int cnt1,cnt2, cnt3, cnt4;
	  uint32_t tick;
	  uint16_t dir, dir1;

	  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80011e0:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <encoder_task+0x198>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
	  cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 80011e8:	4b5e      	ldr	r3, [pc, #376]	; (8001364 <encoder_task+0x19c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
	  tick = HAL_GetTick();
 80011f0:	f000 fc42 	bl	8001a78 <HAL_GetTick>
 80011f4:	63f8      	str	r0, [r7, #60]	; 0x3c
	  uint8_t SpeedA[20];
	  uint8_t SpeedB[20];
	  for(;;)
	  {
		  if(HAL_GetTick()-tick > 100L){
 80011f6:	f000 fc3f 	bl	8001a78 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	f240 80a8 	bls.w	8001356 <encoder_task+0x18e>
			  cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <encoder_task+0x198>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
			  cnt4 = __HAL_TIM_GET_COUNTER(&htim3);
 800120e:	4b55      	ldr	r3, [pc, #340]	; (8001364 <encoder_task+0x19c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
			  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <encoder_task+0x198>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b10      	cmp	r3, #16
 8001222:	d117      	bne.n	8001254 <encoder_task+0x8c>
				  if(cnt2<cnt1)
 8001224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001228:	429a      	cmp	r2, r3
 800122a:	da08      	bge.n	800123e <encoder_task+0x76>
					  readSpeedA = cnt1 - cnt2;
 800122c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800122e:	b29a      	uxth	r2, r3
 8001230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001232:	b29b      	uxth	r3, r3
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <encoder_task+0x1a0>)
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	e021      	b.n	8001282 <encoder_task+0xba>
				  else
					  readSpeedA = (65535 - cnt2) + cnt1;
 800123e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001240:	b29a      	uxth	r2, r3
 8001242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001244:	b29b      	uxth	r3, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <encoder_task+0x1a0>)
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	e016      	b.n	8001282 <encoder_task+0xba>
			  }
			  else{
				  if(cnt2 > cnt1)
 8001254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001258:	429a      	cmp	r2, r3
 800125a:	dd08      	ble.n	800126e <encoder_task+0xa6>
					  readSpeedA = cnt2 - cnt1;
 800125c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800125e:	b29a      	uxth	r2, r3
 8001260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001262:	b29b      	uxth	r3, r3
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <encoder_task+0x1a0>)
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	e009      	b.n	8001282 <encoder_task+0xba>
				  else
					  readSpeedA = (65535 - cnt1) + cnt2;
 800126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001270:	b29a      	uxth	r2, r3
 8001272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001274:	b29b      	uxth	r3, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <encoder_task+0x1a0>)
 8001280:	801a      	strh	r2, [r3, #0]
			  }
			  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <encoder_task+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b10      	cmp	r3, #16
 800128e:	d117      	bne.n	80012c0 <encoder_task+0xf8>
				  if(cnt4<cnt3)
 8001290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001294:	429a      	cmp	r2, r3
 8001296:	da08      	bge.n	80012aa <encoder_task+0xe2>
					  readSpeedB = cnt3 - cnt4;
 8001298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800129a:	b29a      	uxth	r2, r3
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	b29b      	uxth	r3, r3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <encoder_task+0x1a4>)
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e01b      	b.n	80012e2 <encoder_task+0x11a>
				  else
					  readSpeedB = (65535 - cnt4) + cnt3;
 80012aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <encoder_task+0x1a4>)
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	e010      	b.n	80012e2 <encoder_task+0x11a>
			  }
			  else{
				  if(cnt4 > cnt3)
 80012c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dd08      	ble.n	80012da <encoder_task+0x112>
					  readSpeedB = cnt4 - cnt3;
 80012c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <encoder_task+0x1a4>)
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	e003      	b.n	80012e2 <encoder_task+0x11a>
				  else
					  readSpeedB = (65535 - cnt3) + cnt3;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <encoder_task+0x1a4>)
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	801a      	strh	r2, [r3, #0]
			  }
			  sprintf(SpeedA,"Speed:%5d\0",readSpeedA);
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <encoder_task+0x1a0>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4920      	ldr	r1, [pc, #128]	; (8001370 <encoder_task+0x1a8>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fe4c 	bl	8007f8c <siprintf>
			  //OLED_ShowString(10,20,SpeedA);
			  sprintf(SpeedB,"Speed:%5d\0",readSpeedB);
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <encoder_task+0x1a4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	491c      	ldr	r1, [pc, #112]	; (8001370 <encoder_task+0x1a8>)
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fe43 	bl	8007f8c <siprintf>
			  //OLED_ShowString(10,30,SpeedB);

	      if(readSpeedA > readSpeedB){
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <encoder_task+0x1a0>)
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <encoder_task+0x1a4>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d90b      	bls.n	800132a <encoder_task+0x162>
	        errorVal = readSpeedA - readSpeedB;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <encoder_task+0x1a0>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <encoder_task+0x1a4>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <encoder_task+0x1ac>)
 8001320:	801a      	strh	r2, [r3, #0]
	        A_faster = true;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <encoder_task+0x1b0>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e00a      	b.n	8001340 <encoder_task+0x178>
	      } else{
	        errorVal = readSpeedB - readSpeedA;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <encoder_task+0x1a4>)
 800132c:	881a      	ldrh	r2, [r3, #0]
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <encoder_task+0x1a0>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <encoder_task+0x1ac>)
 8001338:	801a      	strh	r2, [r3, #0]
	        A_faster = false;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <encoder_task+0x1b0>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
			  //sprintf(speedA,"Speed:%5d\0",offset);
			  //OLED_ShowString(10,40,offset);
			  //dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
			  //sprintf(hello,"Dir:%5d\0",dir);
			  //OLED_ShowString(10,30,hello);
			  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <encoder_task+0x198>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
			  cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <encoder_task+0x19c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
			  tick = HAL_GetTick();
 8001350:	f000 fb92 	bl	8001a78 <HAL_GetTick>
 8001354:	63f8      	str	r0, [r7, #60]	; 0x3c
		  }
	    osDelay(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f003 ffe0 	bl	800531c <osDelay>
		  if(HAL_GetTick()-tick > 100L){
 800135c:	e74b      	b.n	80011f6 <encoder_task+0x2e>
 800135e:	bf00      	nop
 8001360:	20002764 	.word	0x20002764
 8001364:	20002680 	.word	0x20002680
 8001368:	200027ae 	.word	0x200027ae
 800136c:	200026f8 	.word	0x200026f8
 8001370:	08008858 	.word	0x08008858
 8001374:	20000094 	.word	0x20000094
 8001378:	20000090 	.word	0x20000090

0800137c <sensorDist>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorDist */
void sensorDist(void *argument)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint8_t IR2[20];
	uint8_t distance1;
	uint8_t distance2;
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001384:	4827      	ldr	r0, [pc, #156]	; (8001424 <sensorDist+0xa8>)
 8001386:	f000 fc8f 	bl	8001ca8 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800138a:	4827      	ldr	r0, [pc, #156]	; (8001428 <sensorDist+0xac>)
 800138c:	f000 fc8c 	bl	8001ca8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	4823      	ldr	r0, [pc, #140]	; (8001424 <sensorDist+0xa8>)
 8001396:	f000 fd35 	bl	8001e04 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800139a:	f04f 31ff 	mov.w	r1, #4294967295
 800139e:	4822      	ldr	r0, [pc, #136]	; (8001428 <sensorDist+0xac>)
 80013a0:	f000 fd30 	bl	8001e04 <HAL_ADC_PollForConversion>
	IR1_val = HAL_ADC_GetValue(&hadc1);
 80013a4:	481f      	ldr	r0, [pc, #124]	; (8001424 <sensorDist+0xa8>)
 80013a6:	f000 fe33 	bl	8002010 <HAL_ADC_GetValue>
 80013aa:	4603      	mov	r3, r0
 80013ac:	86fb      	strh	r3, [r7, #54]	; 0x36
	IR2_val = HAL_ADC_GetValue(&hadc2);
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <sensorDist+0xac>)
 80013b0:	f000 fe2e 	bl	8002010 <HAL_ADC_GetValue>
 80013b4:	4603      	mov	r3, r0
 80013b6:	86bb      	strh	r3, [r7, #52]	; 0x34

	distance1 = (16569/(IR1_val + 25)) - 11;
 80013b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013ba:	3319      	adds	r3, #25
 80013bc:	f244 02b9 	movw	r2, #16569	; 0x40b9
 80013c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3b0b      	subs	r3, #11
 80013c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	distance2 = (16569/(IR2_val + 25)) - 11;
 80013cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013ce:	3319      	adds	r3, #25
 80013d0:	f244 02b9 	movw	r2, #16569	; 0x40b9
 80013d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b0b      	subs	r3, #11
 80013dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	sprintf(IR1,"Dist(cm):%5d\0",distance1);
 80013e0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4910      	ldr	r1, [pc, #64]	; (800142c <sensorDist+0xb0>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 fdce 	bl	8007f8c <siprintf>
	OLED_ShowString(10,20,IR1);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	461a      	mov	r2, r3
 80013f6:	2114      	movs	r1, #20
 80013f8:	200a      	movs	r0, #10
 80013fa:	f006 fcc9 	bl	8007d90 <OLED_ShowString>

	sprintf(IR2,"Dist(cm):%5d\0",distance2);
 80013fe:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <sensorDist+0xb0>)
 8001408:	4618      	mov	r0, r3
 800140a:	f006 fdbf 	bl	8007f8c <siprintf>
	OLED_ShowString(10,30,IR2);
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	461a      	mov	r2, r3
 8001414:	211e      	movs	r1, #30
 8001416:	200a      	movs	r0, #10
 8001418:	f006 fcba 	bl	8007d90 <OLED_ShowString>

    osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f003 ff7d 	bl	800531c <osDelay>
  {
 8001422:	e7af      	b.n	8001384 <sensorDist+0x8>
 8001424:	200026c8 	.word	0x200026c8
 8001428:	20002644 	.word	0x20002644
 800142c:	08008864 	.word	0x08008864

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_MspInit+0x68>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_MspInit+0x68>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_MspInit+0x68>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x68>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_MspInit+0x68>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x68>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	210f      	movs	r1, #15
 8001476:	f06f 0001 	mvn.w	r0, #1
 800147a:	f001 f840 	bl	80024fe <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_MspInit+0x6c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_MspInit+0x6c>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_ADC_MspInit+0xbc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d122      	bne.n	8001512 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_ADC_MspInit+0xc0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4619      	mov	r1, r3
 800150a:	4819      	ldr	r0, [pc, #100]	; (8001570 <HAL_ADC_MspInit+0xc4>)
 800150c:	f001 f970 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001510:	e026      	b.n	8001560 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_ADC_MspInit+0xc8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d121      	bne.n	8001560 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_MspInit+0xc0>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_ADC_MspInit+0xc0>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_ADC_MspInit+0xc0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_ADC_MspInit+0xc0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_ADC_MspInit+0xc0>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_ADC_MspInit+0xc0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154c:	2304      	movs	r3, #4
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_ADC_MspInit+0xc4>)
 800155c:	f001 f948 	bl	80027f0 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012400 	.word	0x40012400
 800156c:	40021000 	.word	0x40021000
 8001570:	40011000 	.word	0x40011000
 8001574:	40012800 	.word	0x40012800

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_TIM_Base_MspInit+0x94>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d10c      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 800159e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015b0:	e028      	b.n	8001604 <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM8)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_TIM_Base_MspInit+0x9c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d123      	bne.n	8001604 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_TIM_Base_MspInit+0x98>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80015ec:	23c0      	movs	r3, #192	; 0xc0
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2302      	movs	r3, #2
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_TIM_Base_MspInit+0xa0>)
 8001600:	f001 f8f6 	bl	80027f0 <HAL_GPIO_Init>
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40012c00 	.word	0x40012c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40013400 	.word	0x40013400
 8001618:	40011000 	.word	0x40011000

0800161c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163a:	d14f      	bne.n	80016dc <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	61d3      	str	r3, [r2, #28]
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a37      	ldr	r2, [pc, #220]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a31      	ldr	r2, [pc, #196]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4828      	ldr	r0, [pc, #160]	; (800173c <HAL_TIM_Encoder_MspInit+0x120>)
 800169a:	f001 f8a9 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800169e:	2308      	movs	r3, #8
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <HAL_TIM_Encoder_MspInit+0x124>)
 80016b2:	f001 f89d 	bl	80027f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_TIM_Encoder_MspInit+0x128>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_TIM_Encoder_MspInit+0x128>)
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016da:	e028      	b.n	800172e <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_TIM_Encoder_MspInit+0x12c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d123      	bne.n	800172e <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <HAL_TIM_Encoder_MspInit+0x120>)
 800172a:	f001 f861 	bl	80027f0 <HAL_GPIO_Init>
}
 800172e:	bf00      	nop
 8001730:	3730      	adds	r7, #48	; 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40010000 	.word	0x40010000
 8001748:	40000400 	.word	0x40000400

0800174c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_TIM_MspPostInit+0x80>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d12a      	bne.n	80017c2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_TIM_MspPostInit+0x84>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_TIM_MspPostInit+0x84>)
 8001772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_TIM_MspPostInit+0x84>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001788:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4619      	mov	r1, r3
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <HAL_TIM_MspPostInit+0x88>)
 800179a:	f001 f829 	bl	80027f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_TIM_MspPostInit+0x8c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_TIM_MspPostInit+0x8c>)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40011800 	.word	0x40011800
 80017d8:	40010000 	.word	0x40010000

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_UART_MspInit+0xc0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d14b      	bne.n	8001894 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 8001802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_UART_MspInit+0xc4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4818      	ldr	r0, [pc, #96]	; (80018a4 <HAL_UART_MspInit+0xc8>)
 8001842:	f000 ffd5 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_UART_MspInit+0xc8>)
 800185c:	f000 ffc8 	bl	80027f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_UART_MspInit+0xcc>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_UART_MspInit+0xcc>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2105      	movs	r1, #5
 8001888:	2027      	movs	r0, #39	; 0x27
 800188a:	f000 fe38 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800188e:	2027      	movs	r0, #39	; 0x27
 8001890:	f000 fe51 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40004800 	.word	0x40004800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40010000 	.word	0x40010000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018da:	f000 f8bb 	bl	8001a54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018de:	f005 f929 	bl	8006b34 <xTaskGetSchedulerState>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018e8:	f005 fe86 	bl	80075f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USART3_IRQHandler+0x10>)
 80018f6:	f002 ffcf 	bl	8004898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20002600 	.word	0x20002600

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f006 faea 	bl	8007f0c <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20010000 	.word	0x20010000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000098 	.word	0x20000098
 800196c:	20002c08 	.word	0x20002c08

08001970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	; (80019c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a2:	f7ff ffe5 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f006 fab7 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019aa:	f7fe fc41 	bl	8000230 <main>
  bx lr
 80019ae:	4770      	bx	lr
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019b8:	08009418 	.word	0x08009418
  ldr r2, =_sbss
 80019bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019c0:	20002c04 	.word	0x20002c04

080019c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC1_2_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_Init+0x28>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_Init+0x28>)
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 fd85 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f808 	bl	80019f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e4:	f7ff fd2a 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x54>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x58>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fd9d 	bl	8002552 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00e      	b.n	8001a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d80a      	bhi.n	8001a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f000 fd65 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_InitTick+0x5c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x20>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_IncTick+0x20>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200027b0 	.word	0x200027b0

08001a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_GetTick+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	200027b0 	.word	0x200027b0

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffe0 	bl	8001a78 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ce      	b.n	8001c94 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fcca 	bl	80014ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fbd7 	bl	80022cc <ADC_ConversionStop_Disable>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80a9 	bne.w	8001c82 <HAL_ADC_Init+0x1ae>
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80a5 	bne.w	8001c82 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b40:	f023 0302 	bic.w	r3, r3, #2
 8001b44:	f043 0202 	orr.w	r2, r3, #2
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4951      	ldr	r1, [pc, #324]	; (8001c9c <HAL_ADC_Init+0x1c8>)
 8001b56:	428b      	cmp	r3, r1
 8001b58:	d10a      	bne.n	8001b70 <HAL_ADC_Init+0x9c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b62:	d002      	beq.n	8001b6a <HAL_ADC_Init+0x96>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	e004      	b.n	8001b74 <HAL_ADC_Init+0xa0>
 8001b6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0xa0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7b1b      	ldrb	r3, [r3, #12]
 8001b7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b8c:	d003      	beq.n	8001b96 <HAL_ADC_Init+0xc2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_ADC_Init+0xc8>
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_Init+0xca>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7d1b      	ldrb	r3, [r3, #20]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d119      	bne.n	8001be0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7b1b      	ldrb	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	035a      	lsls	r2, r3, #13
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e00b      	b.n	8001be0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_ADC_Init+0x1cc>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c10:	d003      	beq.n	8001c1a <HAL_ADC_Init+0x146>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d104      	bne.n	8001c24 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	051b      	lsls	r3, r3, #20
 8001c22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_ADC_Init+0x1d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d10b      	bne.n	8001c60 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f023 0303 	bic.w	r3, r3, #3
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c5e:	e018      	b.n	8001c92 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f023 0312 	bic.w	r3, r3, #18
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c80:	e007      	b.n	8001c92 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40013c00 	.word	0x40013c00
 8001ca0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ca4:	ff1f0efe 	.word	0xff1f0efe

08001ca8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Start+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e098      	b.n	8001df4 <HAL_ADC_Start+0x14c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 faa4 	bl	8002218 <ADC_Enable>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8087 	bne.w	8001dea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a41      	ldr	r2, [pc, #260]	; (8001dfc <HAL_ADC_Start+0x154>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_Start+0x5e>
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_ADC_Start+0x158>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d026      	beq.n	8001d6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d30:	e01d      	b.n	8001d6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_ADC_Start+0x158>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_Start+0xaa>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <HAL_ADC_Start+0x154>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10d      	bne.n	8001d6e <HAL_ADC_Start+0xc6>
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_ADC_Start+0x158>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f023 0206 	bic.w	r2, r3, #6
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d86:	e002      	b.n	8001d8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0202 	mvn.w	r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001daa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dae:	d113      	bne.n	8001dd8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_ADC_Start+0x154>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_ADC_Start+0x158>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	e00c      	b.n	8001df2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40012800 	.word	0x40012800
 8001e00:	40012400 	.word	0x40012400

08001e04 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e1a:	f7ff fe2d 	bl	8001a78 <HAL_GetTick>
 8001e1e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f043 0220 	orr.w	r2, r3, #32
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d3      	b.n	8001fee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d131      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d12a      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e62:	e021      	b.n	8001ea8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d01d      	beq.n	8001ea8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_ADC_PollForConversion+0x7e>
 8001e72:	f7ff fe01 	bl	8001a78 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d212      	bcs.n	8001ea8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0a2      	b.n	8001fee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0d6      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eb6:	e070      	b.n	8001f9a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001eb8:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <HAL_ADC_PollForConversion+0x1f4>)
 8001eba:	681c      	ldr	r4, [r3, #0]
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f001 fb45 	bl	800354c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_ADC_PollForConversion+0x1f8>)
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d118      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x104>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_ADC_PollForConversion+0x1fc>)
 8001ede:	400b      	ands	r3, r1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d111      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x104>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_ADC_PollForConversion+0x200>)
 8001eec:	400b      	ands	r3, r1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x100>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68d9      	ldr	r1, [r3, #12]
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_ADC_PollForConversion+0x204>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x100>
 8001f00:	2314      	movs	r3, #20
 8001f02:	e020      	b.n	8001f46 <HAL_ADC_PollForConversion+0x142>
 8001f04:	2329      	movs	r3, #41	; 0x29
 8001f06:	e01e      	b.n	8001f46 <HAL_ADC_PollForConversion+0x142>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_ADC_PollForConversion+0x200>)
 8001f10:	400b      	ands	r3, r1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_ADC_PollForConversion+0x120>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_ADC_PollForConversion+0x204>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_ADC_PollForConversion+0x13c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <HAL_ADC_PollForConversion+0x208>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <HAL_ADC_PollForConversion+0x140>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68d9      	ldr	r1, [r3, #12]
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_ADC_PollForConversion+0x208>)
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_PollForConversion+0x140>
 8001f40:	2354      	movs	r3, #84	; 0x54
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_PollForConversion+0x142>
 8001f44:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f4c:	e021      	b.n	8001f92 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d01a      	beq.n	8001f8c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x168>
 8001f5c:	f7ff fd8c 	bl	8001a78 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d20f      	bcs.n	8001f8c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d90b      	bls.n	8001f8c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f043 0204 	orr.w	r2, r3, #4
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e030      	b.n	8001fee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d8d9      	bhi.n	8001f4e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0212 	mvn.w	r2, #18
 8001fa2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fbe:	d115      	bne.n	8001fec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d111      	bne.n	8001fec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	24924924 	.word	0x24924924
 8002000:	00924924 	.word	0x00924924
 8002004:	12492492 	.word	0x12492492
 8002008:	00492492 	.word	0x00492492
 800200c:	00249249 	.word	0x00249249

08002010 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e0dc      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1da>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b06      	cmp	r3, #6
 8002056:	d81c      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b05      	subs	r3, #5
 800206a:	221f      	movs	r2, #31
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4019      	ands	r1, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b05      	subs	r3, #5
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
 8002090:	e03c      	b.n	800210c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d81c      	bhi.n	80020d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b23      	subs	r3, #35	; 0x23
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4019      	ands	r1, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b23      	subs	r3, #35	; 0x23
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
 80020d2:	e01b      	b.n	800210c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b41      	subs	r3, #65	; 0x41
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4019      	ands	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b41      	subs	r3, #65	; 0x41
 8002100:	fa00 f203 	lsl.w	r2, r0, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d91c      	bls.n	800214e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	3b1e      	subs	r3, #30
 8002126:	2207      	movs	r2, #7
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6898      	ldr	r0, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	3b1e      	subs	r3, #30
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	e019      	b.n	8002182 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4019      	ands	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6898      	ldr	r0, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b10      	cmp	r3, #16
 8002188:	d003      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d132      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_ADC_ConfigChannel+0x1e4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d125      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d126      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d11a      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_ADC_ConfigChannel+0x1e8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_ADC_ConfigChannel+0x1ec>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f9      	bne.n	80021da <HAL_ADC_ConfigChannel+0x1b2>
 80021e6:	e007      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012400 	.word	0x40012400
 8002210:	20000000 	.word	0x20000000
 8002214:	431bde83 	.word	0x431bde83

08002218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d040      	beq.n	80022b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <ADC_Enable+0xac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <ADC_Enable+0xb0>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002254:	e002      	b.n	800225c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002262:	f7ff fc09 	bl	8001a78 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002268:	e01f      	b.n	80022aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800226a:	f7ff fc05 	bl	8001a78 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d918      	bls.n	80022aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d011      	beq.n	80022aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e007      	b.n	80022ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d1d8      	bne.n	800226a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d12e      	bne.n	8002344 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f6:	f7ff fbbf 	bl	8001a78 <HAL_GetTick>
 80022fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022fc:	e01b      	b.n	8002336 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022fe:	f7ff fbbb 	bl	8001a78 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d914      	bls.n	8002336 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10d      	bne.n	8002336 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d0dc      	beq.n	80022fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <__NVIC_EnableIRQ+0x34>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff90 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff2d 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff42 	bl	8002398 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff90 	bl	8002440 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e020      	b.n	80025d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 020e 	bic.w	r2, r2, #14
 80025a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e0d6      	b.n	80027b0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020e 	bic.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_DMA_Abort_IT+0x1dc>)
 800262a:	429a      	cmp	r2, r3
 800262c:	d958      	bls.n	80026e0 <HAL_DMA_Abort_IT+0x100>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a63      	ldr	r2, [pc, #396]	; (80027c0 <HAL_DMA_Abort_IT+0x1e0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d04f      	beq.n	80026d8 <HAL_DMA_Abort_IT+0xf8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_DMA_Abort_IT+0x1e4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d048      	beq.n	80026d4 <HAL_DMA_Abort_IT+0xf4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a60      	ldr	r2, [pc, #384]	; (80027c8 <HAL_DMA_Abort_IT+0x1e8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d040      	beq.n	80026ce <HAL_DMA_Abort_IT+0xee>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_DMA_Abort_IT+0x1ec>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d038      	beq.n	80026c8 <HAL_DMA_Abort_IT+0xe8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <HAL_DMA_Abort_IT+0x1f0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d030      	beq.n	80026c2 <HAL_DMA_Abort_IT+0xe2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_DMA_Abort_IT+0x1f4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d028      	beq.n	80026bc <HAL_DMA_Abort_IT+0xdc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a53      	ldr	r2, [pc, #332]	; (80027bc <HAL_DMA_Abort_IT+0x1dc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d020      	beq.n	80026b6 <HAL_DMA_Abort_IT+0xd6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_DMA_Abort_IT+0x1f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_DMA_Abort_IT+0xd2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_DMA_Abort_IT+0x1fc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d012      	beq.n	80026ae <HAL_DMA_Abort_IT+0xce>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <HAL_DMA_Abort_IT+0x200>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00a      	beq.n	80026a8 <HAL_DMA_Abort_IT+0xc8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a53      	ldr	r2, [pc, #332]	; (80027e4 <HAL_DMA_Abort_IT+0x204>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_DMA_Abort_IT+0xc2>
 800269c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a0:	e01b      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	e018      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ac:	e015      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026ae:	2310      	movs	r3, #16
 80026b0:	e013      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e011      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ba:	e00e      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026c0:	e00b      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c6:	e008      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	e005      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d2:	e002      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026d4:	2310      	movs	r3, #16
 80026d6:	e000      	b.n	80026da <HAL_DMA_Abort_IT+0xfa>
 80026d8:	2301      	movs	r3, #1
 80026da:	4a43      	ldr	r2, [pc, #268]	; (80027e8 <HAL_DMA_Abort_IT+0x208>)
 80026dc:	6053      	str	r3, [r2, #4]
 80026de:	e057      	b.n	8002790 <HAL_DMA_Abort_IT+0x1b0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a36      	ldr	r2, [pc, #216]	; (80027c0 <HAL_DMA_Abort_IT+0x1e0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04f      	beq.n	800278a <HAL_DMA_Abort_IT+0x1aa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_DMA_Abort_IT+0x1e4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d048      	beq.n	8002786 <HAL_DMA_Abort_IT+0x1a6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_DMA_Abort_IT+0x1e8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_Abort_IT+0x1a0>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_DMA_Abort_IT+0x1ec>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d038      	beq.n	800277a <HAL_DMA_Abort_IT+0x19a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <HAL_DMA_Abort_IT+0x1f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d030      	beq.n	8002774 <HAL_DMA_Abort_IT+0x194>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <HAL_DMA_Abort_IT+0x1f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d028      	beq.n	800276e <HAL_DMA_Abort_IT+0x18e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_DMA_Abort_IT+0x1dc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d020      	beq.n	8002768 <HAL_DMA_Abort_IT+0x188>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DMA_Abort_IT+0x1f8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d019      	beq.n	8002764 <HAL_DMA_Abort_IT+0x184>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_DMA_Abort_IT+0x1fc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d012      	beq.n	8002760 <HAL_DMA_Abort_IT+0x180>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_DMA_Abort_IT+0x200>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00a      	beq.n	800275a <HAL_DMA_Abort_IT+0x17a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_DMA_Abort_IT+0x204>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d102      	bne.n	8002754 <HAL_DMA_Abort_IT+0x174>
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	e01b      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002758:	e018      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 800275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275e:	e015      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002760:	2310      	movs	r3, #16
 8002762:	e013      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002764:	2301      	movs	r3, #1
 8002766:	e011      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276c:	e00e      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 800276e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002772:	e00b      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002778:	e008      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	e005      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002784:	e002      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 8002786:	2310      	movs	r3, #16
 8002788:	e000      	b.n	800278c <HAL_DMA_Abort_IT+0x1ac>
 800278a:	2301      	movs	r3, #1
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_DMA_Abort_IT+0x20c>)
 800278e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
    } 
  }
  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40020080 	.word	0x40020080
 80027c0:	40020008 	.word	0x40020008
 80027c4:	4002001c 	.word	0x4002001c
 80027c8:	40020030 	.word	0x40020030
 80027cc:	40020044 	.word	0x40020044
 80027d0:	40020058 	.word	0x40020058
 80027d4:	4002006c 	.word	0x4002006c
 80027d8:	40020408 	.word	0x40020408
 80027dc:	4002041c 	.word	0x4002041c
 80027e0:	40020430 	.word	0x40020430
 80027e4:	40020444 	.word	0x40020444
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020000 	.word	0x40020000

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e179      	b.n	8002af8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002804:	2201      	movs	r2, #1
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	f040 8168 	bne.w	8002af2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4aa0      	ldr	r2, [pc, #640]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d05e      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 800282c:	4a9e      	ldr	r2, [pc, #632]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d875      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002832:	4a9e      	ldr	r2, [pc, #632]	; (8002aac <HAL_GPIO_Init+0x2bc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d058      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002838:	4a9c      	ldr	r2, [pc, #624]	; (8002aac <HAL_GPIO_Init+0x2bc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d86f      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800283e:	4a9c      	ldr	r2, [pc, #624]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d052      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002844:	4a9a      	ldr	r2, [pc, #616]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d869      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800284a:	4a9a      	ldr	r2, [pc, #616]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d04c      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002850:	4a98      	ldr	r2, [pc, #608]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d863      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002856:	4a98      	ldr	r2, [pc, #608]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d046      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 800285c:	4a96      	ldr	r2, [pc, #600]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d85d      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002862:	2b12      	cmp	r3, #18
 8002864:	d82a      	bhi.n	80028bc <HAL_GPIO_Init+0xcc>
 8002866:	2b12      	cmp	r3, #18
 8002868:	d859      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <HAL_GPIO_Init+0x80>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	080028eb 	.word	0x080028eb
 8002874:	080028c5 	.word	0x080028c5
 8002878:	080028d7 	.word	0x080028d7
 800287c:	08002919 	.word	0x08002919
 8002880:	0800291f 	.word	0x0800291f
 8002884:	0800291f 	.word	0x0800291f
 8002888:	0800291f 	.word	0x0800291f
 800288c:	0800291f 	.word	0x0800291f
 8002890:	0800291f 	.word	0x0800291f
 8002894:	0800291f 	.word	0x0800291f
 8002898:	0800291f 	.word	0x0800291f
 800289c:	0800291f 	.word	0x0800291f
 80028a0:	0800291f 	.word	0x0800291f
 80028a4:	0800291f 	.word	0x0800291f
 80028a8:	0800291f 	.word	0x0800291f
 80028ac:	0800291f 	.word	0x0800291f
 80028b0:	0800291f 	.word	0x0800291f
 80028b4:	080028cd 	.word	0x080028cd
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	4a7f      	ldr	r2, [pc, #508]	; (8002abc <HAL_GPIO_Init+0x2cc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028c2:	e02c      	b.n	800291e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	623b      	str	r3, [r7, #32]
          break;
 80028ca:	e029      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	3304      	adds	r3, #4
 80028d2:	623b      	str	r3, [r7, #32]
          break;
 80028d4:	e024      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	3308      	adds	r3, #8
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e01f      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	330c      	adds	r3, #12
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e01a      	b.n	8002920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028f2:	2304      	movs	r3, #4
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e013      	b.n	8002920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002900:	2308      	movs	r3, #8
 8002902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	611a      	str	r2, [r3, #16]
          break;
 800290a:	e009      	b.n	8002920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800290c:	2308      	movs	r3, #8
 800290e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	615a      	str	r2, [r3, #20]
          break;
 8002916:	e003      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x130>
          break;
 800291e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2bff      	cmp	r3, #255	; 0xff
 8002924:	d801      	bhi.n	800292a <HAL_GPIO_Init+0x13a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	e001      	b.n	800292e <HAL_GPIO_Init+0x13e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d802      	bhi.n	800293c <HAL_GPIO_Init+0x14c>
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x152>
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3b08      	subs	r3, #8
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	210f      	movs	r1, #15
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80c1 	beq.w	8002af2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002988:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_GPIO_Init+0x2d4>)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a46      	ldr	r2, [pc, #280]	; (8002ac8 <HAL_GPIO_Init+0x2d8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d01f      	beq.n	80029f4 <HAL_GPIO_Init+0x204>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a45      	ldr	r2, [pc, #276]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d019      	beq.n	80029f0 <HAL_GPIO_Init+0x200>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a44      	ldr	r2, [pc, #272]	; (8002ad0 <HAL_GPIO_Init+0x2e0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <HAL_GPIO_Init+0x1fc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <HAL_GPIO_Init+0x2e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00d      	beq.n	80029e8 <HAL_GPIO_Init+0x1f8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a42      	ldr	r2, [pc, #264]	; (8002ad8 <HAL_GPIO_Init+0x2e8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <HAL_GPIO_Init+0x1f4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a41      	ldr	r2, [pc, #260]	; (8002adc <HAL_GPIO_Init+0x2ec>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_GPIO_Init+0x1f0>
 80029dc:	2305      	movs	r3, #5
 80029de:	e00a      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029e0:	2306      	movs	r3, #6
 80029e2:	e008      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e006      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e004      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_GPIO_Init+0x206>
 80029f4:	2300      	movs	r3, #0
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	4093      	lsls	r3, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a06:	492f      	ldr	r1, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x2d4>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	492e      	ldr	r1, [pc, #184]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	492a      	ldr	r1, [pc, #168]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4924      	ldr	r1, [pc, #144]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4920      	ldr	r1, [pc, #128]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4916      	ldr	r1, [pc, #88]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d025      	beq.n	8002ae4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_GPIO_Init+0x2f0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e025      	b.n	8002af2 <HAL_GPIO_Init+0x302>
 8002aa6:	bf00      	nop
 8002aa8:	10320000 	.word	0x10320000
 8002aac:	10310000 	.word	0x10310000
 8002ab0:	10220000 	.word	0x10220000
 8002ab4:	10210000 	.word	0x10210000
 8002ab8:	10120000 	.word	0x10120000
 8002abc:	10110000 	.word	0x10110000
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010800 	.word	0x40010800
 8002acc:	40010c00 	.word	0x40010c00
 8002ad0:	40011000 	.word	0x40011000
 8002ad4:	40011400 	.word	0x40011400
 8002ad8:	40011800 	.word	0x40011800
 8002adc:	40011c00 	.word	0x40011c00
 8002ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f ae7e 	bne.w	8002804 <HAL_GPIO_Init+0x14>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	372c      	adds	r7, #44	; 0x2c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43d9      	mvns	r1, r3
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	400b      	ands	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	420e0020 	.word	0x420e0020

08002b94 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_PWR_DisableBkUpAccess+0x14>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	420e0020 	.word	0x420e0020

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e26c      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
 8002be4:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e246      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x76>
 8002c14:	4b80      	ldr	r3, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fef6 	bl	8001a78 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fef2 	bl	8001a78 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1fa      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe4>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fee2 	bl	8001a78 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fede 	bl	8001a78 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1e6      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x10c>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1ba      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fe97 	bl	8001a78 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fe93 	bl	8001a78 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e19b      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fe76 	bl	8001a78 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fe72 	bl	8001a78 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e17a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03a      	beq.n	8002e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fe56 	bl	8001a78 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fe52 	bl	8001a78 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e15a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f000 fad8 	bl	80033a4 <RCC_Delay>
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fe3c 	bl	8001a78 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fe38 	bl	8001a78 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e140      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	42420000 	.word	0x42420000
 8002e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b9e      	ldr	r3, [pc, #632]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e9      	bne.n	8002e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a6 	beq.w	8002f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a93      	ldr	r2, [pc, #588]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a8a      	ldr	r2, [pc, #552]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fdf9 	bl	8001a78 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fdf5 	bl	8001a78 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0fd      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
 8002eb0:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e02d      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x356>
 8002ee8:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fda9 	bl	8001a78 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fda5 	bl	8001a78 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0ab      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x37e>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fd93 	bl	8001a78 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fd8f 	bl	8001a78 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e095      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8081 	beq.w	8003096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d061      	beq.n	8003064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d146      	bne.n	8003036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fd63 	bl	8001a78 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe fd5f 	bl	8001a78 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e067      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	492d      	ldr	r1, [pc, #180]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a19      	ldr	r1, [r3, #32]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	430b      	orrs	r3, r1
 8003002:	4927      	ldr	r1, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fd33 	bl	8001a78 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fd2f 	bl	8001a78 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e037      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x46a>
 8003034:	e02f      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fd1c 	bl	8001a78 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fd18 	bl	8001a78 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e020      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x498>
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe fc6c 	bl	8001a78 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe fc68 	bl	8001a78 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fbca 	bl	80019f4 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
 8003274:	08008960 	.word	0x08008960
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b490      	push	{r4, r7}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003288:	1d3c      	adds	r4, r7, #4
 800328a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003290:	f240 2301 	movw	r3, #513	; 0x201
 8003294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	e02d      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e02d      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c5b      	lsrs	r3, r3, #17
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032f2:	4413      	add	r3, r2
 80032f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e004      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	623b      	str	r3, [r7, #32]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331e:	623b      	str	r3, [r7, #32]
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	6a3b      	ldr	r3, [r7, #32]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc90      	pop	{r4, r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	08008874 	.word	0x08008874
 8003334:	40021000 	.word	0x40021000
 8003338:	007a1200 	.word	0x007a1200
 800333c:	003d0900 	.word	0x003d0900

08003340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_RCC_GetHCLKFreq+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	20000000 	.word	0x20000000

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003358:	f7ff fff2 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08008970 	.word	0x08008970

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003380:	f7ff ffde 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0adb      	lsrs	r3, r3, #11
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	08008970 	.word	0x08008970

080033a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCC_Delay+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <RCC_Delay+0x38>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c0:	bf00      	nop
  }
  while (Delay --);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <RCC_Delay+0x1c>
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	20000000 	.word	0x20000000
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d07d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d118      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a42      	ldr	r2, [pc, #264]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003440:	f7fe fb1a 	bl	8001a78 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fe fb16 	bl	8001a78 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e06d      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d027      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe fae5 	bl	8001a78 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fae1 	bl	8001a78 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	490b      	ldr	r1, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420440 	.word	0x42420440

0800354c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b08d      	sub	sp, #52	; 0x34
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003556:	f107 040c 	add.w	r4, r7, #12
 800355a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003560:	f240 2301 	movw	r3, #513	; 0x201
 8003564:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	2300      	movs	r3, #0
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3b01      	subs	r3, #1
 800357e:	2b0f      	cmp	r3, #15
 8003580:	f200 80b6 	bhi.w	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	0800366f 	.word	0x0800366f
 8003590:	080036d5 	.word	0x080036d5
 8003594:	080036f1 	.word	0x080036f1
 8003598:	0800365f 	.word	0x0800365f
 800359c:	080036f1 	.word	0x080036f1
 80035a0:	080036f1 	.word	0x080036f1
 80035a4:	080036f1 	.word	0x080036f1
 80035a8:	08003667 	.word	0x08003667
 80035ac:	080036f1 	.word	0x080036f1
 80035b0:	080036f1 	.word	0x080036f1
 80035b4:	080036f1 	.word	0x080036f1
 80035b8:	080036f1 	.word	0x080036f1
 80035bc:	080036f1 	.word	0x080036f1
 80035c0:	080036f1 	.word	0x080036f1
 80035c4:	080036f1 	.word	0x080036f1
 80035c8:	080035cd 	.word	0x080035cd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80035cc:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035d2:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 808a 	beq.w	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035ec:	4413      	add	r3, r2
 80035ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035f2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fe:	4b42      	ldr	r3, [pc, #264]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0c5b      	lsrs	r3, r3, #17
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800360c:	4413      	add	r3, r2
 800360e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	fbb2 f2f3 	udiv	r2, r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	e004      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	4a37      	ldr	r2, [pc, #220]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003646:	d102      	bne.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800364c:	e052      	b.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800365c:	e04a      	b.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800365e:	f7ff fe0f 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8003662:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003664:	e049      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003666:	f7ff fe0b 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800366a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800366c:	e045      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367e:	d108      	bne.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003690:	e01f      	b.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369c:	d109      	bne.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80036aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b0:	e00f      	b.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036bc:	d11c      	bne.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80036ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80036d0:	e012      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80036d2:	e011      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036d4:	f7ff fe52 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0b9b      	lsrs	r3, r3, #14
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	3301      	adds	r3, #1
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80036f8:	bf00      	nop
    }
  }
  return (frequency);
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3734      	adds	r7, #52	; 0x34
 8003700:	46bd      	mov	sp, r7
 8003702:	bd90      	pop	{r4, r7, pc}
 8003704:	08008884 	.word	0x08008884
 8003708:	40021000 	.word	0x40021000
 800370c:	007a1200 	.word	0x007a1200
 8003710:	003d0900 	.word	0x003d0900
 8003714:	aaaaaaab 	.word	0xaaaaaaab

08003718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e041      	b.n	80037ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd ff1a 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fbf2 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e041      	b.n	800384c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f839 	bl	8003854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f000 fba3 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start+0x24>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e022      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d109      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x3e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e015      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_PWM_Start+0x58>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <HAL_TIM_PWM_Start+0x6a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e072      	b.n	80039c0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0x82>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e8:	e013      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0x92>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	e003      	b.n	8003912 <HAL_TIM_PWM_Start+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fdcc 	bl	80044b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_TIM_PWM_Start+0x160>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_PWM_Start+0xcc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a27      	ldr	r2, [pc, #156]	; (80039cc <HAL_TIM_PWM_Start+0x164>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_TIM_PWM_Start+0xd0>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_TIM_PWM_Start+0xd2>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_TIM_PWM_Start+0x160>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_TIM_PWM_Start+0x122>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_TIM_PWM_Start+0x164>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_TIM_PWM_Start+0x122>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0x122>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_TIM_PWM_Start+0x168>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0x122>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_TIM_PWM_Start+0x16c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0x122>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_TIM_PWM_Start+0x170>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d010      	beq.n	80039be <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e007      	b.n	80039be <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00

080039dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e093      	b.n	8003b18 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fd fe09 	bl	800161c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f000 fa85 	bl	8003f40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a7c:	f023 030c 	bic.w	r3, r3, #12
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	031b      	lsls	r3, r3, #12
 8003aac:	4313      	orrs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d102      	bne.n	8003b5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e069      	b.n	8003c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	e031      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d110      	bne.n	8003b9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b7e:	7b3b      	ldrb	r3, [r7, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e055      	b.n	8003c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b98:	e01d      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d108      	bne.n	8003bb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba0:	7bbb      	ldrb	r3, [r7, #14]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba6:	7b7b      	ldrb	r3, [r7, #13]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bac:	7b3b      	ldrb	r3, [r7, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e03e      	b.n	8003c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_TIM_Encoder_Start+0xc4>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d008      	beq.n	8003bf4 <HAL_TIM_Encoder_Start+0xd4>
 8003be2:	e00f      	b.n	8003c04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc63 	bl	80044b8 <TIM_CCxChannelCmd>
      break;
 8003bf2:	e016      	b.n	8003c22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fc5b 	bl	80044b8 <TIM_CCxChannelCmd>
      break;
 8003c02:	e00e      	b.n	8003c22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fc53 	bl	80044b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	2104      	movs	r1, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fc4c 	bl	80044b8 <TIM_CCxChannelCmd>
      break;
 8003c20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0ac      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	f200 809f 	bhi.w	8003da4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003da5 	.word	0x08003da5
 8003c74:	08003da5 	.word	0x08003da5
 8003c78:	08003da5 	.word	0x08003da5
 8003c7c:	08003ce1 	.word	0x08003ce1
 8003c80:	08003da5 	.word	0x08003da5
 8003c84:	08003da5 	.word	0x08003da5
 8003c88:	08003da5 	.word	0x08003da5
 8003c8c:	08003d23 	.word	0x08003d23
 8003c90:	08003da5 	.word	0x08003da5
 8003c94:	08003da5 	.word	0x08003da5
 8003c98:	08003da5 	.word	0x08003da5
 8003c9c:	08003d63 	.word	0x08003d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f9c4 	bl	8004034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0208 	orr.w	r2, r2, #8
 8003cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6999      	ldr	r1, [r3, #24]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	619a      	str	r2, [r3, #24]
      break;
 8003cde:	e062      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fa14 	bl	8004114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	021a      	lsls	r2, r3, #8
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]
      break;
 8003d20:	e041      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fa67 	bl	80041fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0208 	orr.w	r2, r2, #8
 8003d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0204 	bic.w	r2, r2, #4
 8003d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69d9      	ldr	r1, [r3, #28]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
      break;
 8003d60:	e021      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fabb 	bl	80042e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69d9      	ldr	r1, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	021a      	lsls	r2, r3, #8
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	61da      	str	r2, [r3, #28]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIM_ConfigClockSource+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0b3      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x180>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e08:	d03e      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0xd0>
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0e:	f200 8087 	bhi.w	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	f000 8085 	beq.w	8003f24 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d87f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d01a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0xa2>
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d87b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d050      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x116>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d877      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e30:	2b50      	cmp	r3, #80	; 0x50
 8003e32:	d03c      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xf6>
 8003e34:	2b50      	cmp	r3, #80	; 0x50
 8003e36:	d873      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d058      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x136>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d86f      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d064      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x156>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d86b      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d060      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x156>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d867      	bhi.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x156>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d05a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e58:	e062      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6899      	ldr	r1, [r3, #8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f000 fb06 	bl	800447a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	609a      	str	r2, [r3, #8]
      break;
 8003e86:	e04e      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f000 faef 	bl	800447a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eaa:	609a      	str	r2, [r3, #8]
      break;
 8003eac:	e03b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fa66 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2150      	movs	r1, #80	; 0x50
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fabd 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e02b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f000 fa84 	bl	80043e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2160      	movs	r1, #96	; 0x60
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 faad 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003eec:	e01b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fa46 	bl	800438c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fa9d 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e00b      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f000 fa94 	bl	8004446 <TIM_ITRx_SetConfig>
        break;
 8003f1e:	e002      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a33      	ldr	r2, [pc, #204]	; (8004020 <TIM_Base_SetConfig+0xe0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a32      	ldr	r2, [pc, #200]	; (8004024 <TIM_Base_SetConfig+0xe4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <TIM_Base_SetConfig+0xe8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2e      	ldr	r2, [pc, #184]	; (800402c <TIM_Base_SetConfig+0xec>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <TIM_Base_SetConfig+0xf0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <TIM_Base_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_Base_SetConfig+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a21      	ldr	r2, [pc, #132]	; (8004024 <TIM_Base_SetConfig+0xe4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_Base_SetConfig+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <TIM_Base_SetConfig+0xe8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x82>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <TIM_Base_SetConfig+0xec>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x82>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <TIM_Base_SetConfig+0xf0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <TIM_Base_SetConfig+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0xc8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <TIM_Base_SetConfig+0xe4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	615a      	str	r2, [r3, #20]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40013400 	.word	0x40013400
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00

08004034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0302 	bic.w	r3, r3, #2
 800407c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a20      	ldr	r2, [pc, #128]	; (800410c <TIM_OC1_SetConfig+0xd8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC1_SetConfig+0x64>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <TIM_OC1_SetConfig+0xdc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0308 	bic.w	r3, r3, #8
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <TIM_OC1_SetConfig+0xd8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d003      	beq.n	80040c2 <TIM_OC1_SetConfig+0x8e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <TIM_OC1_SetConfig+0xdc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40013400 	.word	0x40013400

08004114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0210 	bic.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_OC2_SetConfig+0xe0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x68>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <TIM_OC2_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10d      	bne.n	8004198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <TIM_OC2_SetConfig+0xe0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC2_SetConfig+0x94>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <TIM_OC2_SetConfig+0xe4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d113      	bne.n	80041d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40013400 	.word	0x40013400

080041fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC3_SetConfig+0x66>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10d      	bne.n	800427e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_OC3_SetConfig+0x92>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40013400 	.word	0x40013400

080042e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a11      	ldr	r2, [pc, #68]	; (8004384 <TIM_OC4_SetConfig+0xa0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC4_SetConfig+0x68>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <TIM_OC4_SetConfig+0xa4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40013400 	.word	0x40013400

0800438c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 030a 	bic.w	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 0210 	bic.w	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	031b      	lsls	r3, r3, #12
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	f043 0307 	orr.w	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800447a:	b480      	push	{r7}
 800447c:	b087      	sub	sp, #28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	021a      	lsls	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	431a      	orrs	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	609a      	str	r2, [r3, #8]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	43db      	mvns	r3, r3
 80044da:	401a      	ands	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e050      	b.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d00e      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10c      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00

080045d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e03d      	b.n	8004670 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e03f      	b.n	800470c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fd f89b 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fc8e 	bl	8004fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	d17c      	bne.n	800482e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Transmit+0x2c>
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e075      	b.n	8004830 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Transmit+0x3e>
 800474e:	2302      	movs	r3, #2
 8004750:	e06e      	b.n	8004830 <HAL_UART_Transmit+0x11c>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2221      	movs	r2, #33	; 0x21
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004768:	f7fd f986 	bl	8001a78 <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d108      	bne.n	8004796 <HAL_UART_Transmit+0x82>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e003      	b.n	800479e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047a6:	e02a      	b.n	80047fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa40 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e036      	b.n	8004830 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3302      	adds	r3, #2
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e007      	b.n	80047f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3301      	adds	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1cf      	bne.n	80047a8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa10 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e006      	b.n	8004830 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	d11d      	bne.n	800488e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_UART_Receive_IT+0x26>
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e016      	b.n	8004890 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_UART_Receive_IT+0x38>
 800486c:	2302      	movs	r3, #2
 800486e:	e00f      	b.n	8004890 <HAL_UART_Receive_IT+0x58>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	461a      	mov	r2, r3
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fa21 	bl	8004ccc <UART_Start_Receive_IT>
 800488a:	4603      	mov	r3, r0
 800488c:	e000      	b.n	8004890 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10d      	bne.n	80048ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_UART_IRQHandler+0x52>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fad2 	bl	8004e8c <UART_Receive_IT>
      return;
 80048e8:	e17b      	b.n	8004be2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80b1 	beq.w	8004a54 <HAL_UART_IRQHandler+0x1bc>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_UART_IRQHandler+0x70>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80a6 	beq.w	8004a54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_UART_IRQHandler+0x90>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_UART_IRQHandler+0xb0>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f043 0202 	orr.w	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_UART_IRQHandler+0xd0>
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f043 0204 	orr.w	r2, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00f      	beq.n	8004992 <HAL_UART_IRQHandler+0xfa>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <HAL_UART_IRQHandler+0xee>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0208 	orr.w	r2, r3, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 811e 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_UART_IRQHandler+0x11e>
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa6b 	bl	8004e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <HAL_UART_IRQHandler+0x146>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d031      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9ad 	bl	8004d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d023      	beq.n	8004a3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d013      	beq.n	8004a32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	4a76      	ldr	r2, [pc, #472]	; (8004be8 <HAL_UART_IRQHandler+0x350>)
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fd fde2 	bl	80025e0 <HAL_DMA_Abort_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e00e      	b.n	8004a50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8ec 	bl	8004c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e00a      	b.n	8004a50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8e8 	bl	8004c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	e006      	b.n	8004a50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8e4 	bl	8004c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a4e:	e0c3      	b.n	8004bd8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	bf00      	nop
    return;
 8004a52:	e0c1      	b.n	8004bd8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 80a1 	bne.w	8004ba0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 809b 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8095 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d04e      	beq.n	8004b38 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004aa4:	8a3b      	ldrh	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8098 	beq.w	8004bdc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab0:	8a3a      	ldrh	r2, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	f080 8092 	bcs.w	8004bdc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8a3a      	ldrh	r2, [r7, #16]
 8004abc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d02b      	beq.n	8004b20 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ad6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0210 	bic.w	r2, r2, #16
 8004b14:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fd fd25 	bl	800256a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f876 	bl	8004c22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b36:	e051      	b.n	8004bdc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d047      	beq.n	8004be0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004b50:	8a7b      	ldrh	r3, [r7, #18]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d044      	beq.n	8004be0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b64:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0210 	bic.w	r2, r2, #16
 8004b92:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b94:	8a7b      	ldrh	r3, [r7, #18]
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f842 	bl	8004c22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b9e:	e01f      	b.n	8004be0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_UART_IRQHandler+0x324>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f902 	bl	8004dbe <UART_Transmit_IT>
    return;
 8004bba:	e012      	b.n	8004be2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_UART_IRQHandler+0x34a>
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f943 	bl	8004e5c <UART_EndTransmit_IT>
    return;
 8004bd6:	e004      	b.n	8004be2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004bd8:	bf00      	nop
 8004bda:	e002      	b.n	8004be2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004bdc:	bf00      	nop
 8004bde:	e000      	b.n	8004be2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004be0:	bf00      	nop
  }
}
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08004d97 	.word	0x08004d97

08004bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c48:	e02c      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d028      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c58:	f7fc ff0e 	bl	8001a78 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d21d      	bcs.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e00f      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d0c3      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	88fa      	ldrh	r2, [r7, #6]
 8004cea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2222      	movs	r2, #34	; 0x22
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d10:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0220 	orr.w	r2, r2, #32
 8004d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0210 	bic.w	r2, r2, #16
 8004d7c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ff2d 	bl	8004c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b21      	cmp	r3, #33	; 0x21
 8004dd0:	d13e      	bne.n	8004e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d114      	bne.n	8004e06 <UART_Transmit_IT+0x48>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d110      	bne.n	8004e06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]
 8004e04:	e008      	b.n	8004e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	1c59      	adds	r1, r3, #1
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6211      	str	r1, [r2, #32]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4619      	mov	r1, r3
 8004e26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff feb5 	bl	8004bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	f040 8099 	bne.w	8004fd4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	d117      	bne.n	8004edc <UART_Receive_IT+0x50>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8004eda:	e026      	b.n	8004f2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d007      	beq.n	8004f00 <UART_Receive_IT+0x74>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <UART_Receive_IT+0x82>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e008      	b.n	8004f20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4619      	mov	r1, r3
 8004f38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d148      	bne.n	8004fd0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0220 	bic.w	r2, r2, #32
 8004f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d123      	bne.n	8004fc6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0210 	bic.w	r2, r2, #16
 8004f92:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d10a      	bne.n	8004fb8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fe2f 	bl	8004c22 <HAL_UARTEx_RxEventCallback>
 8004fc4:	e002      	b.n	8004fcc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe19 	bl	8004bfe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e002      	b.n	8004fd6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800501a:	f023 030c 	bic.w	r3, r3, #12
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	430b      	orrs	r3, r1
 8005026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <UART_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d103      	bne.n	8005050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fe f998 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	e002      	b.n	8005056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe f980 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8005054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <UART_SetConfig+0x118>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	0119      	lsls	r1, r3, #4
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009a      	lsls	r2, r3, #2
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	fbb2 f2f3 	udiv	r2, r2, r3
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <UART_SetConfig+0x118>)
 800508e:	fba3 0302 	umull	r0, r3, r3, r2
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2064      	movs	r0, #100	; 0x64
 8005096:	fb00 f303 	mul.w	r3, r0, r3
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	3332      	adds	r3, #50	; 0x32
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <UART_SetConfig+0x118>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ac:	4419      	add	r1, r3
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009a      	lsls	r2, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <UART_SetConfig+0x118>)
 80050c6:	fba3 0302 	umull	r0, r3, r3, r2
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2064      	movs	r0, #100	; 0x64
 80050ce:	fb00 f303 	mul.w	r3, r0, r3
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	3332      	adds	r3, #50	; 0x32
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <UART_SetConfig+0x118>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	440a      	add	r2, r1
 80050ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40013800 	.word	0x40013800
 80050f8:	51eb851f 	.word	0x51eb851f

080050fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	60bb      	str	r3, [r7, #8]
  return(result);
 8005108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510e:	f3ef 8310 	mrs	r3, PRIMASK
 8005112:	607b      	str	r3, [r7, #4]
  return(result);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <osKernelInitialize+0x32>
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <osKernelInitialize+0x60>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d109      	bne.n	8005136 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005122:	f3ef 8311 	mrs	r3, BASEPRI
 8005126:	603b      	str	r3, [r7, #0]
  return(result);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800512e:	f06f 0305 	mvn.w	r3, #5
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e00c      	b.n	8005150 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <osKernelInitialize+0x60>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <osKernelInitialize+0x60>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e002      	b.n	8005150 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr
 800515c:	2000009c 	.word	0x2000009c

08005160 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	60bb      	str	r3, [r7, #8]
  return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10f      	bne.n	8005192 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8310 	mrs	r3, PRIMASK
 8005176:	607b      	str	r3, [r7, #4]
  return(result);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <osKernelStart+0x32>
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <osKernelStart+0x64>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d109      	bne.n	800519a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005186:	f3ef 8311 	mrs	r3, BASEPRI
 800518a:	603b      	str	r3, [r7, #0]
  return(result);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005192:	f06f 0305 	mvn.w	r3, #5
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e00e      	b.n	80051b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <osKernelStart+0x64>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <osKernelStart+0x64>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80051a8:	f001 f878 	bl	800629c <vTaskStartScheduler>
      stat = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e002      	b.n	80051b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	2000009c 	.word	0x2000009c

080051c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b092      	sub	sp, #72	; 0x48
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 8094 	bne.w	800530e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ea:	623b      	str	r3, [r7, #32]
  return(result);
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 808d 	bne.w	800530e <osThreadNew+0x146>
 80051f4:	4b48      	ldr	r3, [pc, #288]	; (8005318 <osThreadNew+0x150>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d106      	bne.n	800520a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005200:	61fb      	str	r3, [r7, #28]
  return(result);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8082 	bne.w	800530e <osThreadNew+0x146>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d07e      	beq.n	800530e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005214:	2318      	movs	r3, #24
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005218:	2300      	movs	r3, #0
 800521a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800521c:	f107 031b 	add.w	r3, r7, #27
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d045      	beq.n	80052ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <osThreadNew+0x74>
        name = attr->name;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <osThreadNew+0x9a>
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	2b38      	cmp	r3, #56	; 0x38
 8005254:	d805      	bhi.n	8005262 <osThreadNew+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x9e>
        return (NULL);
 8005262:	2300      	movs	r3, #0
 8005264:	e054      	b.n	8005310 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <osThreadNew+0xd4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b5b      	cmp	r3, #91	; 0x5b
 8005284:	d90a      	bls.n	800529c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osThreadNew+0xd4>
        mem = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
 800529a:	e010      	b.n	80052be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <osThreadNew+0xf6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <osThreadNew+0xf6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <osThreadNew+0xf6>
          mem = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b8:	e001      	b.n	80052be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d110      	bne.n	80052e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fe12 	bl	8005f04 <xTaskCreateStatic>
 80052e0:	4603      	mov	r3, r0
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e013      	b.n	800530e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fe5c 	bl	8005fbc <xTaskCreate>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <osThreadNew+0x146>
          hTask = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800530e:	697b      	ldr	r3, [r7, #20]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3738      	adds	r7, #56	; 0x38
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	2000009c 	.word	0x2000009c

0800531c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005324:	f3ef 8305 	mrs	r3, IPSR
 8005328:	613b      	str	r3, [r7, #16]
  return(result);
 800532a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005330:	f3ef 8310 	mrs	r3, PRIMASK
 8005334:	60fb      	str	r3, [r7, #12]
  return(result);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <osDelay+0x34>
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <osDelay+0x58>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d109      	bne.n	8005358 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005344:	f3ef 8311 	mrs	r3, BASEPRI
 8005348:	60bb      	str	r3, [r7, #8]
  return(result);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <osDelay+0x3c>
    stat = osErrorISR;
 8005350:	f06f 0305 	mvn.w	r3, #5
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e007      	b.n	8005368 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 ff66 	bl	8006234 <vTaskDelay>
    }
  }

  return (stat);
 8005368:	697b      	ldr	r3, [r7, #20]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	2000009c 	.word	0x2000009c

08005378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <vApplicationGetIdleTaskMemory+0x28>)
 8005388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800538e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	200000a0 	.word	0x200000a0
 80053a4:	200000fc 	.word	0x200000fc

080053a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80053b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <vApplicationGetTimerTaskMemory+0x30>)
 80053be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c6:	601a      	str	r2, [r3, #0]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	200002fc 	.word	0x200002fc
 80053d8:	20000358 	.word	0x20000358

080053dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f103 0208 	add.w	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f103 0208 	add.w	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f103 0208 	add.w	r2, r3, #8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e00c      	b.n	80054b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3308      	adds	r3, #8
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e002      	b.n	80054a6 <vListInsert+0x2e>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d2f6      	bcs.n	80054a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6892      	ldr	r2, [r2, #8]
 80054fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6852      	ldr	r2, [r2, #4]
 8005508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d103      	bne.n	800551c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	1e5a      	subs	r2, r3, #1
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
	...

0800553c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005566:	f001 ffc9 	bl	80074fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	441a      	add	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	3b01      	subs	r3, #1
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d114      	bne.n	80055e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01a      	beq.n	80055fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3310      	adds	r3, #16
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 f8f1 	bl	80067b0 <xTaskRemoveFromEventList>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <xQueueGenericReset+0xcc>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	e009      	b.n	80055fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3310      	adds	r3, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fef6 	bl	80053dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fef1 	bl	80053dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f001 ffaf 	bl	800755c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055fe:	2301      	movs	r3, #1
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	; 0x38
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <xQueueGenericCreateStatic+0x52>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <xQueueGenericCreateStatic+0x56>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericCreateStatic+0x58>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <xQueueGenericCreateStatic+0x7e>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueGenericCreateStatic+0x82>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericCreateStatic+0x84>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61fb      	str	r3, [r7, #28]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056aa:	2350      	movs	r3, #80	; 0x50
 80056ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b50      	cmp	r3, #80	; 0x50
 80056b2:	d00a      	beq.n	80056ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61bb      	str	r3, [r7, #24]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f805 	bl	80056fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3730      	adds	r7, #48	; 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e002      	b.n	800571c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005728:	2101      	movs	r1, #1
 800572a:	69b8      	ldr	r0, [r7, #24]
 800572c:	f7ff ff06 	bl	800553c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08e      	sub	sp, #56	; 0x38
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800574e:	2300      	movs	r3, #0
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericSend+0x32>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d103      	bne.n	8005780 <xQueueGenericSend+0x40>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueGenericSend+0x44>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSend+0x46>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xQueueGenericSend+0x60>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d103      	bne.n	80057ae <xQueueGenericSend+0x6e>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <xQueueGenericSend+0x72>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <xQueueGenericSend+0x74>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <xQueueGenericSend+0x8e>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	623b      	str	r3, [r7, #32]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ce:	f001 f9b1 	bl	8006b34 <xTaskGetSchedulerState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xQueueGenericSend+0x9e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <xQueueGenericSend+0xa2>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <xQueueGenericSend+0xa4>
 80057e2:	2300      	movs	r3, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <xQueueGenericSend+0xbe>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	61fb      	str	r3, [r7, #28]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fe:	f001 fe7d 	bl	80074fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <xQueueGenericSend+0xd4>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d129      	bne.n	8005868 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581a:	f000 fa07 	bl	8005c2c <prvCopyDataToQueue>
 800581e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f000 ffbf 	bl	80067b0 <xTaskRemoveFromEventList>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <xQueueGenericSend+0x1f8>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e00a      	b.n	8005860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <xQueueGenericSend+0x1f8>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005860:	f001 fe7c 	bl	800755c <vPortExitCritical>
				return pdPASS;
 8005864:	2301      	movs	r3, #1
 8005866:	e063      	b.n	8005930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800586e:	f001 fe75 	bl	800755c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005872:	2300      	movs	r3, #0
 8005874:	e05c      	b.n	8005930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fff9 	bl	8006878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005886:	2301      	movs	r3, #1
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800588a:	f001 fe67 	bl	800755c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800588e:	f000 fd6b 	bl	8006368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005892:	f001 fe33 	bl	80074fc <vPortEnterCritical>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800589c:	b25b      	sxtb	r3, r3
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d103      	bne.n	80058ac <xQueueGenericSend+0x16c>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d103      	bne.n	80058c2 <xQueueGenericSend+0x182>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c2:	f001 fe4b 	bl	800755c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058c6:	1d3a      	adds	r2, r7, #4
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 ffe8 	bl	80068a4 <xTaskCheckForTimeOut>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d124      	bne.n	8005924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058dc:	f000 fa9e 	bl	8005e1c <prvIsQueueFull>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	3310      	adds	r3, #16
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 ff0e 	bl	8006710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f6:	f000 fa29 	bl	8005d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058fa:	f000 fd43 	bl	8006384 <xTaskResumeAll>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f af7c 	bne.w	80057fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <xQueueGenericSend+0x1f8>)
 8005908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	e772      	b.n	80057fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591a:	f000 fa17 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800591e:	f000 fd31 	bl	8006384 <xTaskResumeAll>
 8005922:	e76c      	b.n	80057fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005926:	f000 fa11 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800592a:	f000 fd2b 	bl	8006384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800592e:	2300      	movs	r3, #0
		}
	}
}
 8005930:	4618      	mov	r0, r3
 8005932:	3738      	adds	r7, #56	; 0x38
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	; 0x38
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <xQueueGenericSendFromISR+0x3c>
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueGenericSendFromISR+0x40>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueGenericSendFromISR+0x42>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	623b      	str	r3, [r7, #32]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d103      	bne.n	80059a6 <xQueueGenericSendFromISR+0x6a>
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <xQueueGenericSendFromISR+0x6e>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericSendFromISR+0x70>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059c6:	f001 fe5b 	bl	8007680 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059ca:	f3ef 8211 	mrs	r2, BASEPRI
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	61ba      	str	r2, [r7, #24]
 80059e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <xQueueGenericSendFromISR+0xbc>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d12c      	bne.n	8005a52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a08:	f000 f910 	bl	8005c2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d112      	bne.n	8005a3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fec4 	bl	80067b0 <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00e      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a40:	3301      	adds	r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	b25a      	sxtb	r2, r3
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a50:	e001      	b.n	8005a56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3738      	adds	r7, #56	; 0x38
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xQueueReceive+0x30>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	623b      	str	r3, [r7, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <xQueueReceive+0x3e>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueReceive+0x42>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueReceive+0x44>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueReceive+0x5e>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aca:	f001 f833 	bl	8006b34 <xTaskGetSchedulerState>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xQueueReceive+0x6e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <xQueueReceive+0x72>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <xQueueReceive+0x74>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueReceive+0x8e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61bb      	str	r3, [r7, #24]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005afa:	f001 fcff 	bl	80074fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01f      	beq.n	8005b4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f8f7 	bl	8005d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	3310      	adds	r3, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fe42 	bl	80067b0 <xTaskRemoveFromEventList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b32:	4b3d      	ldr	r3, [pc, #244]	; (8005c28 <xQueueReceive+0x1bc>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b42:	f001 fd0b 	bl	800755c <vPortExitCritical>
				return pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e069      	b.n	8005c1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b50:	f001 fd04 	bl	800755c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e062      	b.n	8005c1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5e:	f107 0310 	add.w	r3, r7, #16
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fe88 	bl	8006878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6c:	f001 fcf6 	bl	800755c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b70:	f000 fbfa 	bl	8006368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b74:	f001 fcc2 	bl	80074fc <vPortEnterCritical>
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7e:	b25b      	sxtb	r3, r3
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d103      	bne.n	8005b8e <xQueueReceive+0x122>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d103      	bne.n	8005ba4 <xQueueReceive+0x138>
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba4:	f001 fcda 	bl	800755c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba8:	1d3a      	adds	r2, r7, #4
 8005baa:	f107 0310 	add.w	r3, r7, #16
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fe77 	bl	80068a4 <xTaskCheckForTimeOut>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d123      	bne.n	8005c04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbe:	f000 f917 	bl	8005df0 <prvIsQueueEmpty>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd9d 	bl	8006710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd8:	f000 f8b8 	bl	8005d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bdc:	f000 fbd2 	bl	8006384 <xTaskResumeAll>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d189      	bne.n	8005afa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xQueueReceive+0x1bc>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e780      	b.n	8005afa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfa:	f000 f8a7 	bl	8005d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fbc1 	bl	8006384 <xTaskResumeAll>
 8005c02:	e77a      	b.n	8005afa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c06:	f000 f8a1 	bl	8005d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fbbb 	bl	8006384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c10:	f000 f8ee 	bl	8005df0 <prvIsQueueEmpty>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f43f af6f 	beq.w	8005afa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d14d      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ff8a 	bl	8006b70 <xTaskPriorityDisinherit>
 8005c5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	e043      	b.n	8005cee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d119      	bne.n	8005ca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6898      	ldr	r0, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	461a      	mov	r2, r3
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	f002 f972 	bl	8007f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d32b      	bcc.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	609a      	str	r2, [r3, #8]
 8005c9e:	e026      	b.n	8005cee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68d8      	ldr	r0, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f002 f958 	bl	8007f60 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	425b      	negs	r3, r3
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d207      	bcs.n	8005cdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d105      	bne.n	8005cee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d303      	bcc.n	8005d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f002 f90e 	bl	8007f60 <memcpy>
	}
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d54:	f001 fbd2 	bl	80074fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d60:	e011      	b.n	8005d86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fd1e 	bl	80067b0 <xTaskRemoveFromEventList>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d7a:	f000 fdf5 	bl	8006968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dce9      	bgt.n	8005d62 <prvUnlockQueue+0x16>
 8005d8e:	e000      	b.n	8005d92 <prvUnlockQueue+0x46>
					break;
 8005d90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d9a:	f001 fbdf 	bl	800755c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d9e:	f001 fbad 	bl	80074fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005daa:	e011      	b.n	8005dd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3310      	adds	r3, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fcf9 	bl	80067b0 <xTaskRemoveFromEventList>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dc4:	f000 fdd0 	bl	8006968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dce9      	bgt.n	8005dac <prvUnlockQueue+0x60>
 8005dd8:	e000      	b.n	8005ddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	22ff      	movs	r2, #255	; 0xff
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005de4:	f001 fbba 	bl	800755c <vPortExitCritical>
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df8:	f001 fb80 	bl	80074fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e001      	b.n	8005e0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f001 fba5 	bl	800755c <vPortExitCritical>

	return xReturn;
 8005e12:	68fb      	ldr	r3, [r7, #12]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e24:	f001 fb6a 	bl	80074fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d102      	bne.n	8005e3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e001      	b.n	8005e3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f001 fb8d 	bl	800755c <vPortExitCritical>

	return xReturn;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	e014      	b.n	8005e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e5c:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <vQueueAddToRegistry+0x4c>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e68:	490b      	ldr	r1, [pc, #44]	; (8005e98 <vQueueAddToRegistry+0x4c>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <vQueueAddToRegistry+0x4c>)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e7e:	e006      	b.n	8005e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b07      	cmp	r3, #7
 8005e8a:	d9e7      	bls.n	8005e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	200027b4 	.word	0x200027b4

08005e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005eac:	f001 fb26 	bl	80074fc <vPortEnterCritical>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d103      	bne.n	8005ec6 <vQueueWaitForMessageRestricted+0x2a>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d103      	bne.n	8005edc <vQueueWaitForMessageRestricted+0x40>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005edc:	f001 fb3e 	bl	800755c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3324      	adds	r3, #36	; 0x24
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fc31 	bl	8006758 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ef6:	6978      	ldr	r0, [r7, #20]
 8005ef8:	f7ff ff28 	bl	8005d4c <prvUnlockQueue>
	}
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	; 0x38
 8005f08:	af04      	add	r7, sp, #16
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	623b      	str	r3, [r7, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61fb      	str	r3, [r7, #28]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f4a:	235c      	movs	r3, #92	; 0x5c
 8005f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b5c      	cmp	r3, #92	; 0x5c
 8005f52:	d00a      	beq.n	8005f6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	61bb      	str	r3, [r7, #24]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01e      	beq.n	8005fae <xTaskCreateStatic+0xaa>
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f850 	bl	8006046 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa8:	f000 f8d4 	bl	8006154 <prvAddNewTaskToReadyList>
 8005fac:	e001      	b.n	8005fb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb2:	697b      	ldr	r3, [r7, #20]
	}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08c      	sub	sp, #48	; 0x30
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fb93 	bl	80076fc <pvPortMalloc>
 8005fd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fde:	205c      	movs	r0, #92	; 0x5c
 8005fe0:	f001 fb8c 	bl	80076fc <pvPortMalloc>
 8005fe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff2:	e005      	b.n	8006000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ff4:	6978      	ldr	r0, [r7, #20]
 8005ff6:	f001 fc45 	bl	8007884 <vPortFree>
 8005ffa:	e001      	b.n	8006000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	2300      	movs	r3, #0
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f80e 	bl	8006046 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800602a:	69f8      	ldr	r0, [r7, #28]
 800602c:	f000 f892 	bl	8006154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006030:	2301      	movs	r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e002      	b.n	800603c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800603c:	69bb      	ldr	r3, [r7, #24]
	}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b088      	sub	sp, #32
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	461a      	mov	r2, r3
 800605e:	21a5      	movs	r1, #165	; 0xa5
 8006060:	f001 ff8c 	bl	8007f7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800606e:	3b01      	subs	r3, #1
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f023 0307 	bic.w	r3, r3, #7
 800607c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	617b      	str	r3, [r7, #20]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e012      	b.n	80060ca <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	7819      	ldrb	r1, [r3, #0]
 80060ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	3334      	adds	r3, #52	; 0x34
 80060b4:	460a      	mov	r2, r1
 80060b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d006      	beq.n	80060d2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d9e9      	bls.n	80060a4 <prvInitialiseNewTask+0x5e>
 80060d0:	e000      	b.n	80060d4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80060d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	2b37      	cmp	r3, #55	; 0x37
 80060e0:	d901      	bls.n	80060e6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060e2:	2337      	movs	r3, #55	; 0x37
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	2200      	movs	r2, #0
 80060f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff f98c 	bl	800541a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	3318      	adds	r3, #24
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f987 	bl	800541a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006110:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006120:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	2200      	movs	r2, #0
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	69b8      	ldr	r0, [r7, #24]
 8006136:	f001 f8ef 	bl	8007318 <pxPortInitialiseStack>
 800613a:	4602      	mov	r2, r0
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800614c:	bf00      	nop
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800615c:	f001 f9ce 	bl	80074fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006160:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800616a:	4b2c      	ldr	r3, [pc, #176]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d110      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006180:	f000 fc16 	bl	80069b0 <prvInitialiseTaskLists>
 8006184:	e00d      	b.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006186:	4b26      	ldr	r3, [pc, #152]	; (8006220 <prvAddNewTaskToReadyList+0xcc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800618e:	4b23      	ldr	r3, [pc, #140]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	429a      	cmp	r2, r3
 800619a:	d802      	bhi.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800619c:	4a1f      	ldr	r2, [pc, #124]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061a2:	4b20      	ldr	r3, [pc, #128]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <prvAddNewTaskToReadyList+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <prvAddNewTaskToReadyList+0xd8>)
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7ff f927 	bl	8005432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061e4:	f001 f9ba 	bl	800755c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <prvAddNewTaskToReadyList+0xcc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d207      	bcs.n	800620e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvAddNewTaskToReadyList+0xdc>)
 8006200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000c2c 	.word	0x20000c2c
 800621c:	20000758 	.word	0x20000758
 8006220:	20000c38 	.word	0x20000c38
 8006224:	20000c48 	.word	0x20000c48
 8006228:	20000c34 	.word	0x20000c34
 800622c:	2000075c 	.word	0x2000075c
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <vTaskDelay+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <vTaskDelay+0x30>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60bb      	str	r3, [r7, #8]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006264:	f000 f880 	bl	8006368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fcee 	bl	8006c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006270:	f000 f888 	bl	8006384 <xTaskResumeAll>
 8006274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <vTaskDelay+0x64>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000c54 	.word	0x20000c54
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062aa:	463a      	mov	r2, r7
 80062ac:	1d39      	adds	r1, r7, #4
 80062ae:	f107 0308 	add.w	r3, r7, #8
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f860 	bl	8005378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	9202      	str	r2, [sp, #8]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	460a      	mov	r2, r1
 80062ca:	4921      	ldr	r1, [pc, #132]	; (8006350 <vTaskStartScheduler+0xb4>)
 80062cc:	4821      	ldr	r0, [pc, #132]	; (8006354 <vTaskStartScheduler+0xb8>)
 80062ce:	f7ff fe19 	bl	8005f04 <xTaskCreateStatic>
 80062d2:	4603      	mov	r3, r0
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <vTaskStartScheduler+0xbc>)
 80062d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062d8:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <vTaskStartScheduler+0xbc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e001      	b.n	80062ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062f0:	f000 fd00 	bl	8006cf4 <xTimerCreateTimerTask>
 80062f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d116      	bne.n	800632a <vTaskStartScheduler+0x8e>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	613b      	str	r3, [r7, #16]
}
 800630e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <vTaskStartScheduler+0xc0>)
 8006312:	f04f 32ff 	mov.w	r2, #4294967295
 8006316:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <vTaskStartScheduler+0xc4>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <vTaskStartScheduler+0xc8>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006324:	f001 f878 	bl	8007418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006328:	e00e      	b.n	8006348 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d10a      	bne.n	8006348 <vTaskStartScheduler+0xac>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vTaskStartScheduler+0xaa>
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08008894 	.word	0x08008894
 8006354:	08006981 	.word	0x08006981
 8006358:	20000c50 	.word	0x20000c50
 800635c:	20000c4c 	.word	0x20000c4c
 8006360:	20000c38 	.word	0x20000c38
 8006364:	20000c30 	.word	0x20000c30

08006368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800636c:	4b04      	ldr	r3, [pc, #16]	; (8006380 <vTaskSuspendAll+0x18>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a03      	ldr	r2, [pc, #12]	; (8006380 <vTaskSuspendAll+0x18>)
 8006374:	6013      	str	r3, [r2, #0]
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000c54 	.word	0x20000c54

08006384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006392:	4b42      	ldr	r3, [pc, #264]	; (800649c <xTaskResumeAll+0x118>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	603b      	str	r3, [r7, #0]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063b0:	f001 f8a4 	bl	80074fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063b4:	4b39      	ldr	r3, [pc, #228]	; (800649c <xTaskResumeAll+0x118>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	4a38      	ldr	r2, [pc, #224]	; (800649c <xTaskResumeAll+0x118>)
 80063bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063be:	4b37      	ldr	r3, [pc, #220]	; (800649c <xTaskResumeAll+0x118>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d162      	bne.n	800648c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063c6:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <xTaskResumeAll+0x11c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d05e      	beq.n	800648c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ce:	e02f      	b.n	8006430 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063d0:	4b34      	ldr	r3, [pc, #208]	; (80064a4 <xTaskResumeAll+0x120>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3318      	adds	r3, #24
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff f883 	bl	80054e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff f87e 	bl	80054e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <xTaskResumeAll+0x124>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d903      	bls.n	8006400 <xTaskResumeAll+0x7c>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <xTaskResumeAll+0x124>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a27      	ldr	r2, [pc, #156]	; (80064ac <xTaskResumeAll+0x128>)
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7ff f80b 	bl	8005432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <xTaskResumeAll+0x12c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <xTaskResumeAll+0x130>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <xTaskResumeAll+0x120>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1cb      	bne.n	80063d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800643e:	f000 fb55 	bl	8006aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <xTaskResumeAll+0x134>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800644e:	f000 f845 	bl	80064dc <xTaskIncrementTick>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <xTaskResumeAll+0x130>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3b01      	subs	r3, #1
 8006462:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f1      	bne.n	800644e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <xTaskResumeAll+0x134>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006470:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <xTaskResumeAll+0x130>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d009      	beq.n	800648c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <xTaskResumeAll+0x138>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800648c:	f001 f866 	bl	800755c <vPortExitCritical>

	return xAlreadyYielded;
 8006490:	68bb      	ldr	r3, [r7, #8]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000c54 	.word	0x20000c54
 80064a0:	20000c2c 	.word	0x20000c2c
 80064a4:	20000bec 	.word	0x20000bec
 80064a8:	20000c34 	.word	0x20000c34
 80064ac:	2000075c 	.word	0x2000075c
 80064b0:	20000758 	.word	0x20000758
 80064b4:	20000c40 	.word	0x20000c40
 80064b8:	20000c3c 	.word	0x20000c3c
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064c6:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <xTaskGetTickCount+0x18>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	20000c30 	.word	0x20000c30

080064dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e6:	4b51      	ldr	r3, [pc, #324]	; (800662c <xTaskIncrementTick+0x150>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 808e 	bne.w	800660c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064f0:	4b4f      	ldr	r3, [pc, #316]	; (8006630 <xTaskIncrementTick+0x154>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064f8:	4a4d      	ldr	r2, [pc, #308]	; (8006630 <xTaskIncrementTick+0x154>)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d120      	bne.n	8006546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <xTaskIncrementTick+0x158>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <xTaskIncrementTick+0x48>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	603b      	str	r3, [r7, #0]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <xTaskIncrementTick+0x46>
 8006524:	4b43      	ldr	r3, [pc, #268]	; (8006634 <xTaskIncrementTick+0x158>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	4b43      	ldr	r3, [pc, #268]	; (8006638 <xTaskIncrementTick+0x15c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a41      	ldr	r2, [pc, #260]	; (8006634 <xTaskIncrementTick+0x158>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	4a41      	ldr	r2, [pc, #260]	; (8006638 <xTaskIncrementTick+0x15c>)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b40      	ldr	r3, [pc, #256]	; (800663c <xTaskIncrementTick+0x160>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	4a3f      	ldr	r2, [pc, #252]	; (800663c <xTaskIncrementTick+0x160>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	f000 fad3 	bl	8006aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006546:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <xTaskIncrementTick+0x164>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	429a      	cmp	r2, r3
 800654e:	d34e      	bcc.n	80065ee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006550:	4b38      	ldr	r3, [pc, #224]	; (8006634 <xTaskIncrementTick+0x158>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <xTaskIncrementTick+0x82>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xTaskIncrementTick+0x84>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006564:	4b36      	ldr	r3, [pc, #216]	; (8006640 <xTaskIncrementTick+0x164>)
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	601a      	str	r2, [r3, #0]
					break;
 800656c:	e03f      	b.n	80065ee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800656e:	4b31      	ldr	r3, [pc, #196]	; (8006634 <xTaskIncrementTick+0x158>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d203      	bcs.n	800658e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006586:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <xTaskIncrementTick+0x164>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6013      	str	r3, [r2, #0]
						break;
 800658c:	e02f      	b.n	80065ee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3304      	adds	r3, #4
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe ffa8 	bl	80054e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	3318      	adds	r3, #24
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe ff9f 	bl	80054e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ae:	4b25      	ldr	r3, [pc, #148]	; (8006644 <xTaskIncrementTick+0x168>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d903      	bls.n	80065be <xTaskIncrementTick+0xe2>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4a22      	ldr	r2, [pc, #136]	; (8006644 <xTaskIncrementTick+0x168>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <xTaskIncrementTick+0x16c>)
 80065cc:	441a      	add	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe ff2c 	bl	8005432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	4b1b      	ldr	r3, [pc, #108]	; (800664c <xTaskIncrementTick+0x170>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d3b3      	bcc.n	8006550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ec:	e7b0      	b.n	8006550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065ee:	4b17      	ldr	r3, [pc, #92]	; (800664c <xTaskIncrementTick+0x170>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	4914      	ldr	r1, [pc, #80]	; (8006648 <xTaskIncrementTick+0x16c>)
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d907      	bls.n	8006616 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006606:	2301      	movs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e004      	b.n	8006616 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800660c:	4b10      	ldr	r3, [pc, #64]	; (8006650 <xTaskIncrementTick+0x174>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <xTaskIncrementTick+0x174>)
 8006614:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskIncrementTick+0x178>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006622:	697b      	ldr	r3, [r7, #20]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000c54 	.word	0x20000c54
 8006630:	20000c30 	.word	0x20000c30
 8006634:	20000be4 	.word	0x20000be4
 8006638:	20000be8 	.word	0x20000be8
 800663c:	20000c44 	.word	0x20000c44
 8006640:	20000c4c 	.word	0x20000c4c
 8006644:	20000c34 	.word	0x20000c34
 8006648:	2000075c 	.word	0x2000075c
 800664c:	20000758 	.word	0x20000758
 8006650:	20000c3c 	.word	0x20000c3c
 8006654:	20000c40 	.word	0x20000c40

08006658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800665e:	4b27      	ldr	r3, [pc, #156]	; (80066fc <vTaskSwitchContext+0xa4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006666:	4b26      	ldr	r3, [pc, #152]	; (8006700 <vTaskSwitchContext+0xa8>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800666c:	e041      	b.n	80066f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <vTaskSwitchContext+0xa8>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006674:	4b23      	ldr	r3, [pc, #140]	; (8006704 <vTaskSwitchContext+0xac>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e010      	b.n	800669e <vTaskSwitchContext+0x46>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <vTaskSwitchContext+0x40>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	607b      	str	r3, [r7, #4]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <vTaskSwitchContext+0x3e>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	491a      	ldr	r1, [pc, #104]	; (8006708 <vTaskSwitchContext+0xb0>)
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0e4      	beq.n	800667c <vTaskSwitchContext+0x24>
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a12      	ldr	r2, [pc, #72]	; (8006708 <vTaskSwitchContext+0xb0>)
 80066be:	4413      	add	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	3308      	adds	r3, #8
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d104      	bne.n	80066e2 <vTaskSwitchContext+0x8a>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a08      	ldr	r2, [pc, #32]	; (800670c <vTaskSwitchContext+0xb4>)
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	4a05      	ldr	r2, [pc, #20]	; (8006704 <vTaskSwitchContext+0xac>)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	20000c54 	.word	0x20000c54
 8006700:	20000c40 	.word	0x20000c40
 8006704:	20000c34 	.word	0x20000c34
 8006708:	2000075c 	.word	0x2000075c
 800670c:	20000758 	.word	0x20000758

08006710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <vTaskPlaceOnEventList+0x44>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3318      	adds	r3, #24
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe fe9a 	bl	8005478 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006744:	2101      	movs	r1, #1
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f000 fa80 	bl	8006c4c <prvAddCurrentTaskToDelayedList>
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000758 	.word	0x20000758

08006758 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	617b      	str	r3, [r7, #20]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3318      	adds	r3, #24
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7fe fe52 	bl	8005432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006794:	f04f 33ff 	mov.w	r3, #4294967295
 8006798:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	68b8      	ldr	r0, [r7, #8]
 800679e:	f000 fa55 	bl	8006c4c <prvAddCurrentTaskToDelayedList>
	}
 80067a2:	bf00      	nop
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000758 	.word	0x20000758

080067b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60fb      	str	r3, [r7, #12]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3318      	adds	r3, #24
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fe81 	bl	80054e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e6:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <xTaskRemoveFromEventList+0xb0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11d      	bne.n	800682a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fe78 	bl	80054e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	4b19      	ldr	r3, [pc, #100]	; (8006864 <xTaskRemoveFromEventList+0xb4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d903      	bls.n	800680c <xTaskRemoveFromEventList+0x5c>
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a16      	ldr	r2, [pc, #88]	; (8006864 <xTaskRemoveFromEventList+0xb4>)
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4a13      	ldr	r2, [pc, #76]	; (8006868 <xTaskRemoveFromEventList+0xb8>)
 800681a:	441a      	add	r2, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f7fe fe05 	bl	8005432 <vListInsertEnd>
 8006828:	e005      	b.n	8006836 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3318      	adds	r3, #24
 800682e:	4619      	mov	r1, r3
 8006830:	480e      	ldr	r0, [pc, #56]	; (800686c <xTaskRemoveFromEventList+0xbc>)
 8006832:	f7fe fdfe 	bl	8005432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <xTaskRemoveFromEventList+0xc0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d905      	bls.n	8006850 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <xTaskRemoveFromEventList+0xc4>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e001      	b.n	8006854 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006854:	697b      	ldr	r3, [r7, #20]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000c54 	.word	0x20000c54
 8006864:	20000c34 	.word	0x20000c34
 8006868:	2000075c 	.word	0x2000075c
 800686c:	20000bec 	.word	0x20000bec
 8006870:	20000758 	.word	0x20000758
 8006874:	20000c40 	.word	0x20000c40

08006878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <vTaskInternalSetTimeOutState+0x24>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <vTaskInternalSetTimeOutState+0x28>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	605a      	str	r2, [r3, #4]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20000c44 	.word	0x20000c44
 80068a0:	20000c30 	.word	0x20000c30

080068a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068e6:	f000 fe09 	bl	80074fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <xTaskCheckForTimeOut+0xbc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d102      	bne.n	800690a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e023      	b.n	8006952 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b15      	ldr	r3, [pc, #84]	; (8006964 <xTaskCheckForTimeOut+0xc0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d007      	beq.n	8006926 <xTaskCheckForTimeOut+0x82>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	d302      	bcc.n	8006926 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e015      	b.n	8006952 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	429a      	cmp	r2, r3
 800692e:	d20b      	bcs.n	8006948 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ff9b 	bl	8006878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e004      	b.n	8006952 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800694e:	2301      	movs	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006952:	f000 fe03 	bl	800755c <vPortExitCritical>

	return xReturn;
 8006956:	69fb      	ldr	r3, [r7, #28]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000c30 	.word	0x20000c30
 8006964:	20000c44 	.word	0x20000c44

08006968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800696c:	4b03      	ldr	r3, [pc, #12]	; (800697c <vTaskMissedYield+0x14>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000c40 	.word	0x20000c40

08006980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006988:	f000 f852 	bl	8006a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <prvIdleTask+0x28>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d9f9      	bls.n	8006988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <prvIdleTask+0x2c>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069a4:	e7f0      	b.n	8006988 <prvIdleTask+0x8>
 80069a6:	bf00      	nop
 80069a8:	2000075c 	.word	0x2000075c
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e00c      	b.n	80069d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <prvInitialiseTaskLists+0x60>)
 80069c8:	4413      	add	r3, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fd06 	bl	80053dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b37      	cmp	r3, #55	; 0x37
 80069da:	d9ef      	bls.n	80069bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069dc:	480d      	ldr	r0, [pc, #52]	; (8006a14 <prvInitialiseTaskLists+0x64>)
 80069de:	f7fe fcfd 	bl	80053dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069e2:	480d      	ldr	r0, [pc, #52]	; (8006a18 <prvInitialiseTaskLists+0x68>)
 80069e4:	f7fe fcfa 	bl	80053dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069e8:	480c      	ldr	r0, [pc, #48]	; (8006a1c <prvInitialiseTaskLists+0x6c>)
 80069ea:	f7fe fcf7 	bl	80053dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ee:	480c      	ldr	r0, [pc, #48]	; (8006a20 <prvInitialiseTaskLists+0x70>)
 80069f0:	f7fe fcf4 	bl	80053dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069f4:	480b      	ldr	r0, [pc, #44]	; (8006a24 <prvInitialiseTaskLists+0x74>)
 80069f6:	f7fe fcf1 	bl	80053dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <prvInitialiseTaskLists+0x78>)
 80069fc:	4a05      	ldr	r2, [pc, #20]	; (8006a14 <prvInitialiseTaskLists+0x64>)
 80069fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <prvInitialiseTaskLists+0x7c>)
 8006a02:	4a05      	ldr	r2, [pc, #20]	; (8006a18 <prvInitialiseTaskLists+0x68>)
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	2000075c 	.word	0x2000075c
 8006a14:	20000bbc 	.word	0x20000bbc
 8006a18:	20000bd0 	.word	0x20000bd0
 8006a1c:	20000bec 	.word	0x20000bec
 8006a20:	20000c00 	.word	0x20000c00
 8006a24:	20000c18 	.word	0x20000c18
 8006a28:	20000be4 	.word	0x20000be4
 8006a2c:	20000be8 	.word	0x20000be8

08006a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a36:	e019      	b.n	8006a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a38:	f000 fd60 	bl	80074fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <prvCheckTasksWaitingTermination+0x50>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fd4d 	bl	80054e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <prvCheckTasksWaitingTermination+0x54>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <prvCheckTasksWaitingTermination+0x54>)
 8006a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a62:	f000 fd7b 	bl	800755c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f810 	bl	8006a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e1      	bne.n	8006a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000c00 	.word	0x20000c00
 8006a84:	20000c2c 	.word	0x20000c2c
 8006a88:	20000c14 	.word	0x20000c14

08006a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 feee 	bl	8007884 <vPortFree>
				vPortFree( pxTCB );
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 feeb 	bl	8007884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006aae:	e018      	b.n	8006ae2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d103      	bne.n	8006ac2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fee2 	bl	8007884 <vPortFree>
	}
 8006ac0:	e00f      	b.n	8006ae2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d00a      	beq.n	8006ae2 <prvDeleteTCB+0x56>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <prvDeleteTCB+0x54>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af2:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <prvResetNextTaskUnblockTime+0x40>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <prvResetNextTaskUnblockTime+0x14>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <prvResetNextTaskUnblockTime+0x16>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <prvResetNextTaskUnblockTime+0x44>)
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b0e:	e008      	b.n	8006b22 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvResetNextTaskUnblockTime+0x40>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <prvResetNextTaskUnblockTime+0x44>)
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr
 8006b2c:	20000be4 	.word	0x20000be4
 8006b30:	20000c4c 	.word	0x20000c4c

08006b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <xTaskGetSchedulerState+0x34>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b42:	2301      	movs	r3, #1
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	e008      	b.n	8006b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <xTaskGetSchedulerState+0x38>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b50:	2302      	movs	r3, #2
 8006b52:	607b      	str	r3, [r7, #4]
 8006b54:	e001      	b.n	8006b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b5a:	687b      	ldr	r3, [r7, #4]
	}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000c38 	.word	0x20000c38
 8006b6c:	20000c54 	.word	0x20000c54

08006b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d056      	beq.n	8006c34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b86:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <xTaskPriorityDisinherit+0xd0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d00a      	beq.n	8006ba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60bb      	str	r3, [r7, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d02c      	beq.n	8006c34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d128      	bne.n	8006c34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fc7e 	bl	80054e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <xTaskPriorityDisinherit+0xd4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d903      	bls.n	8006c14 <xTaskPriorityDisinherit+0xa4>
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4a0c      	ldr	r2, [pc, #48]	; (8006c44 <xTaskPriorityDisinherit+0xd4>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <xTaskPriorityDisinherit+0xd8>)
 8006c22:	441a      	add	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f7fe fc01 	bl	8005432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c34:	697b      	ldr	r3, [r7, #20]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000758 	.word	0x20000758
 8006c44:	20000c34 	.word	0x20000c34
 8006c48:	2000075c 	.word	0x2000075c

08006c4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c56:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <prvAddCurrentTaskToDelayedList+0x90>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c5c:	4b20      	ldr	r3, [pc, #128]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3304      	adds	r3, #4
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fc40 	bl	80054e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d10a      	bne.n	8006c86 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4819      	ldr	r0, [pc, #100]	; (8006ce4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c80:	f7fe fbd7 	bl	8005432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c84:	e026      	b.n	8006cd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d209      	bcs.n	8006cb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7fe fbe4 	bl	8005478 <vListInsert>
}
 8006cb0:	e010      	b.n	8006cd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7fe fbda 	bl	8005478 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d202      	bcs.n	8006cd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000c30 	.word	0x20000c30
 8006ce0:	20000758 	.word	0x20000758
 8006ce4:	20000c18 	.word	0x20000c18
 8006ce8:	20000be8 	.word	0x20000be8
 8006cec:	20000be4 	.word	0x20000be4
 8006cf0:	20000c4c 	.word	0x20000c4c

08006cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cfe:	f000 facb 	bl	8007298 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <xTimerCreateTimerTask+0x80>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d021      	beq.n	8006d4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d12:	1d3a      	adds	r2, r7, #4
 8006d14:	f107 0108 	add.w	r1, r7, #8
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fb43 	bl	80053a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	9202      	str	r2, [sp, #8]
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	460a      	mov	r2, r1
 8006d34:	4910      	ldr	r1, [pc, #64]	; (8006d78 <xTimerCreateTimerTask+0x84>)
 8006d36:	4811      	ldr	r0, [pc, #68]	; (8006d7c <xTimerCreateTimerTask+0x88>)
 8006d38:	f7ff f8e4 	bl	8005f04 <xTaskCreateStatic>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4a10      	ldr	r2, [pc, #64]	; (8006d80 <xTimerCreateTimerTask+0x8c>)
 8006d40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <xTimerCreateTimerTask+0x8c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	613b      	str	r3, [r7, #16]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d6a:	697b      	ldr	r3, [r7, #20]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000c88 	.word	0x20000c88
 8006d78:	0800889c 	.word	0x0800889c
 8006d7c:	08006ea1 	.word	0x08006ea1
 8006d80:	20000c8c 	.word	0x20000c8c

08006d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006db2:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <xTimerGenericCommand+0x98>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d02a      	beq.n	8006e10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	dc18      	bgt.n	8006dfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dcc:	f7ff feb2 	bl	8006b34 <xTaskGetSchedulerState>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d109      	bne.n	8006dea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dd6:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <xTimerGenericCommand+0x98>)
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f107 0110 	add.w	r1, r7, #16
 8006dde:	2300      	movs	r3, #0
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	f7fe fcad 	bl	8005740 <xQueueGenericSend>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24
 8006de8:	e012      	b.n	8006e10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <xTimerGenericCommand+0x98>)
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f107 0110 	add.w	r1, r7, #16
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	f7fe fca3 	bl	8005740 <xQueueGenericSend>
 8006dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8006dfc:	e008      	b.n	8006e10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <xTimerGenericCommand+0x98>)
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	f107 0110 	add.w	r1, r7, #16
 8006e06:	2300      	movs	r3, #0
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	f7fe fd97 	bl	800593c <xQueueGenericSendFromISR>
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000c88 	.word	0x20000c88

08006e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2a:	4b1c      	ldr	r3, [pc, #112]	; (8006e9c <prvProcessExpiredTimer+0x7c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fb55 	bl	80054e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d122      	bne.n	8006e8c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	18d1      	adds	r1, r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f000 f8c8 	bl	8006fe8 <prvInsertTimerInActiveList>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	2300      	movs	r3, #0
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	2100      	movs	r1, #0
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f7ff ff8b 	bl	8006d84 <xTimerGenericCommand>
 8006e6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	6978      	ldr	r0, [r7, #20]
 8006e92:	4798      	blx	r3
}
 8006e94:	bf00      	nop
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000c80 	.word	0x20000c80

08006ea0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f857 	bl	8006f60 <prvGetNextExpireTime>
 8006eb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f803 	bl	8006ec4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ebe:	f000 f8d5 	bl	800706c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ec2:	e7f1      	b.n	8006ea8 <prvTimerTask+0x8>

08006ec4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ece:	f7ff fa4b 	bl	8006368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f866 	bl	8006fa8 <prvSampleTimeNow>
 8006edc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d130      	bne.n	8006f46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <prvProcessTimerOrBlockTask+0x3c>
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d806      	bhi.n	8006f00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ef2:	f7ff fa47 	bl	8006384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff91 	bl	8006e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006efe:	e024      	b.n	8006f4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <prvProcessTimerOrBlockTask+0x90>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f18:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <prvProcessTimerOrBlockTask+0x94>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	f7fe ffb9 	bl	8005e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f2a:	f7ff fa2b 	bl	8006384 <xTaskResumeAll>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <prvProcessTimerOrBlockTask+0x98>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
}
 8006f44:	e001      	b.n	8006f4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f46:	f7ff fa1d 	bl	8006384 <xTaskResumeAll>
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000c84 	.word	0x20000c84
 8006f58:	20000c88 	.word	0x20000c88
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f68:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <prvGetNextExpireTime+0x44>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d105      	bne.n	8006f92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f86:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <prvGetNextExpireTime+0x44>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e001      	b.n	8006f96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000c80 	.word	0x20000c80

08006fa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fb0:	f7ff fa86 	bl	80064c0 <xTaskGetTickCount>
 8006fb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <prvSampleTimeNow+0x3c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d205      	bcs.n	8006fcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fc0:	f000 f908 	bl	80071d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e002      	b.n	8006fd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fd2:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <prvSampleTimeNow+0x3c>)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000c90 	.word	0x20000c90

08006fe8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d812      	bhi.n	8007034 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	1ad2      	subs	r2, r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e01b      	b.n	800705a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007022:	4b10      	ldr	r3, [pc, #64]	; (8007064 <prvInsertTimerInActiveList+0x7c>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f7fe fa23 	bl	8005478 <vListInsert>
 8007032:	e012      	b.n	800705a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d206      	bcs.n	800704a <prvInsertTimerInActiveList+0x62>
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e007      	b.n	800705a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <prvInsertTimerInActiveList+0x80>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fe fa0f 	bl	8005478 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800705a:	697b      	ldr	r3, [r7, #20]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000c84 	.word	0x20000c84
 8007068:	20000c80 	.word	0x20000c80

0800706c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08e      	sub	sp, #56	; 0x38
 8007070:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007072:	e09d      	b.n	80071b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	da18      	bge.n	80070ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800707a:	1d3b      	adds	r3, r7, #4
 800707c:	3304      	adds	r3, #4
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	61fb      	str	r3, [r7, #28]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a2:	6850      	ldr	r0, [r2, #4]
 80070a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a6:	6892      	ldr	r2, [r2, #8]
 80070a8:	4611      	mov	r1, r2
 80070aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	db7d      	blt.n	80071ae <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fa10 	bl	80054e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070c8:	463b      	mov	r3, r7
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff6c 	bl	8006fa8 <prvSampleTimeNow>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d86b      	bhi.n	80071b0 <prvProcessReceivedCommands+0x144>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <prvProcessReceivedCommands+0x74>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007109 	.word	0x08007109
 80070e8:	08007109 	.word	0x08007109
 80070ec:	080071b1 	.word	0x080071b1
 80070f0:	08007165 	.word	0x08007165
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	08007109 	.word	0x08007109
 80070fc:	08007109 	.word	0x08007109
 8007100:	080071b1 	.word	0x080071b1
 8007104:	08007165 	.word	0x08007165
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	18d1      	adds	r1, r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007116:	f7ff ff67 	bl	8006fe8 <prvInsertTimerInActiveList>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d047      	beq.n	80071b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007126:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d13f      	bne.n	80071b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	441a      	add	r2, r3
 8007138:	2300      	movs	r3, #0
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	2300      	movs	r3, #0
 800713e:	2100      	movs	r1, #0
 8007140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007142:	f7ff fe1f 	bl	8006d84 <xTimerGenericCommand>
 8007146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d130      	bne.n	80071b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	61bb      	str	r3, [r7, #24]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	617b      	str	r3, [r7, #20]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	18d1      	adds	r1, r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007196:	f7ff ff27 	bl	8006fe8 <prvInsertTimerInActiveList>
					break;
 800719a:	e009      	b.n	80071b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80071a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a8:	f000 fb6c 	bl	8007884 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071ac:	e000      	b.n	80071b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvProcessReceivedCommands+0x164>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	1d39      	adds	r1, r7, #4
 80071b6:	2200      	movs	r2, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fc57 	bl	8005a6c <xQueueReceive>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f af57 	bne.w	8007074 <prvProcessReceivedCommands+0x8>
	}
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	3730      	adds	r7, #48	; 0x30
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000c88 	.word	0x20000c88

080071d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071da:	e045      	b.n	8007268 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071dc:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <prvSwitchTimerLists+0xbc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071e6:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <prvSwitchTimerLists+0xbc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe f977 	bl	80054e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d12e      	bne.n	8007268 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4413      	add	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	429a      	cmp	r2, r3
 800721a:	d90e      	bls.n	800723a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <prvSwitchTimerLists+0xbc>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7fe f920 	bl	8005478 <vListInsert>
 8007238:	e016      	b.n	8007268 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800723a:	2300      	movs	r3, #0
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	2100      	movs	r1, #0
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff fd9d 	bl	8006d84 <xTimerGenericCommand>
 800724a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	603b      	str	r3, [r7, #0]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007268:	4b09      	ldr	r3, [pc, #36]	; (8007290 <prvSwitchTimerLists+0xbc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1b4      	bne.n	80071dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <prvSwitchTimerLists+0xbc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <prvSwitchTimerLists+0xc0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <prvSwitchTimerLists+0xbc>)
 800727e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007280:	4a04      	ldr	r2, [pc, #16]	; (8007294 <prvSwitchTimerLists+0xc0>)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6013      	str	r3, [r2, #0]
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000c80 	.word	0x20000c80
 8007294:	20000c84 	.word	0x20000c84

08007298 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800729e:	f000 f92d 	bl	80074fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <prvCheckForValidListAndQueue+0x60>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d120      	bne.n	80072ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072aa:	4814      	ldr	r0, [pc, #80]	; (80072fc <prvCheckForValidListAndQueue+0x64>)
 80072ac:	f7fe f896 	bl	80053dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072b0:	4813      	ldr	r0, [pc, #76]	; (8007300 <prvCheckForValidListAndQueue+0x68>)
 80072b2:	f7fe f893 	bl	80053dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <prvCheckForValidListAndQueue+0x6c>)
 80072b8:	4a10      	ldr	r2, [pc, #64]	; (80072fc <prvCheckForValidListAndQueue+0x64>)
 80072ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072bc:	4b12      	ldr	r3, [pc, #72]	; (8007308 <prvCheckForValidListAndQueue+0x70>)
 80072be:	4a10      	ldr	r2, [pc, #64]	; (8007300 <prvCheckForValidListAndQueue+0x68>)
 80072c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072c2:	2300      	movs	r3, #0
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <prvCheckForValidListAndQueue+0x74>)
 80072c8:	4a11      	ldr	r2, [pc, #68]	; (8007310 <prvCheckForValidListAndQueue+0x78>)
 80072ca:	2110      	movs	r1, #16
 80072cc:	200a      	movs	r0, #10
 80072ce:	f7fe f99d 	bl	800560c <xQueueGenericCreateStatic>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <prvCheckForValidListAndQueue+0x60>)
 80072d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072d8:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <prvCheckForValidListAndQueue+0x60>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <prvCheckForValidListAndQueue+0x60>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	490b      	ldr	r1, [pc, #44]	; (8007314 <prvCheckForValidListAndQueue+0x7c>)
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fdb0 	bl	8005e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ec:	f000 f936 	bl	800755c <vPortExitCritical>
}
 80072f0:	bf00      	nop
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000c88 	.word	0x20000c88
 80072fc:	20000c58 	.word	0x20000c58
 8007300:	20000c6c 	.word	0x20000c6c
 8007304:	20000c80 	.word	0x20000c80
 8007308:	20000c84 	.word	0x20000c84
 800730c:	20000d34 	.word	0x20000d34
 8007310:	20000c94 	.word	0x20000c94
 8007314:	080088a4 	.word	0x080088a4

08007318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3b04      	subs	r3, #4
 8007328:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b04      	subs	r3, #4
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3b04      	subs	r3, #4
 8007346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007348:	4a08      	ldr	r2, [pc, #32]	; (800736c <pxPortInitialiseStack+0x54>)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b14      	subs	r3, #20
 8007352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3b20      	subs	r3, #32
 800735e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	08007371 	.word	0x08007371

08007370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <prvTaskExitError+0x54>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d00a      	beq.n	800739a <prvTaskExitError+0x2a>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <prvTaskExitError+0x28>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	60bb      	str	r3, [r7, #8]
}
 80073ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073ae:	bf00      	nop
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0fc      	beq.n	80073b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	2000000c 	.word	0x2000000c
	...

080073d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <pxCurrentTCBConst2>)
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073da:	f380 8809 	msr	PSP, r0
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8811 	msr	BASEPRI, r0
 80073ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80073ee:	4770      	bx	lr

080073f0 <pxCurrentTCBConst2>:
 80073f0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80073f8:	4806      	ldr	r0, [pc, #24]	; (8007414 <prvPortStartFirstTask+0x1c>)
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f380 8808 	msr	MSP, r0
 8007402:	b662      	cpsie	i
 8007404:	b661      	cpsie	f
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	df00      	svc	0
 8007410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007412:	bf00      	nop
 8007414:	e000ed08 	.word	0xe000ed08

08007418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800741e:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <xPortStartScheduler+0xd0>)
 8007420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	22ff      	movs	r2, #255	; 0xff
 800742e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4b2a      	ldr	r3, [pc, #168]	; (80074ec <xPortStartScheduler+0xd4>)
 8007444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007446:	4b2a      	ldr	r3, [pc, #168]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007448:	2207      	movs	r2, #7
 800744a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800744c:	e009      	b.n	8007462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800744e:	4b28      	ldr	r3, [pc, #160]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3b01      	subs	r3, #1
 8007454:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d0ef      	beq.n	800744e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800746e:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1c3 0307 	rsb	r3, r3, #7
 8007476:	2b04      	cmp	r3, #4
 8007478:	d00a      	beq.n	8007490 <xPortStartScheduler+0x78>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60bb      	str	r3, [r7, #8]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007490:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	4a16      	ldr	r2, [pc, #88]	; (80074f0 <xPortStartScheduler+0xd8>)
 8007498:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <xPortStartScheduler+0xd8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074a2:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <xPortStartScheduler+0xd8>)
 80074a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <xPortStartScheduler+0xdc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <xPortStartScheduler+0xdc>)
 80074b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <xPortStartScheduler+0xdc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <xPortStartScheduler+0xdc>)
 80074c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074c6:	f000 f8b9 	bl	800763c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <xPortStartScheduler+0xe0>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074d0:	f7ff ff92 	bl	80073f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074d4:	f7ff f8c0 	bl	8006658 <vTaskSwitchContext>
	prvTaskExitError();
 80074d8:	f7ff ff4a 	bl	8007370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	e000e400 	.word	0xe000e400
 80074ec:	20000d84 	.word	0x20000d84
 80074f0:	20000d88 	.word	0x20000d88
 80074f4:	e000ed20 	.word	0xe000ed20
 80074f8:	2000000c 	.word	0x2000000c

080074fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	607b      	str	r3, [r7, #4]
}
 8007514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <vPortEnterCritical+0x58>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a0d      	ldr	r2, [pc, #52]	; (8007554 <vPortEnterCritical+0x58>)
 800751e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007520:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <vPortEnterCritical+0x58>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10f      	bne.n	8007548 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <vPortEnterCritical+0x5c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <vPortEnterCritical+0x4c>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	603b      	str	r3, [r7, #0]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vPortEnterCritical+0x4a>
	}
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000000c 	.word	0x2000000c
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <vPortExitCritical+0x4c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <vPortExitCritical+0x24>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	607b      	str	r3, [r7, #4]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <vPortExitCritical+0x4c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3b01      	subs	r3, #1
 8007586:	4a08      	ldr	r2, [pc, #32]	; (80075a8 <vPortExitCritical+0x4c>)
 8007588:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <vPortExitCritical+0x4c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <vPortExitCritical+0x42>
 8007592:	2300      	movs	r3, #0
 8007594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f383 8811 	msr	BASEPRI, r3
}
 800759c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	2000000c 	.word	0x2000000c
 80075ac:	00000000 	.word	0x00000000

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075c0:	6010      	str	r0, [r2, #0]
 80075c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80075c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075ca:	f380 8811 	msr	BASEPRI, r0
 80075ce:	f7ff f843 	bl	8006658 <vTaskSwitchContext>
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075e6:	f380 8809 	msr	PSP, r0
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	4770      	bx	lr

080075f0 <pxCurrentTCBConst>:
 80075f0:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007612:	f7fe ff63 	bl	80064dc <xTaskIncrementTick>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <xPortSysTickHandler+0x40>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f383 8811 	msr	BASEPRI, r3
}
 800762e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <vPortSetupTimerInterrupt+0x30>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <vPortSetupTimerInterrupt+0x34>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <vPortSetupTimerInterrupt+0x38>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a09      	ldr	r2, [pc, #36]	; (8007678 <vPortSetupTimerInterrupt+0x3c>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	4a08      	ldr	r2, [pc, #32]	; (800767c <vPortSetupTimerInterrupt+0x40>)
 800765a:	3b01      	subs	r3, #1
 800765c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800765e:	4b03      	ldr	r3, [pc, #12]	; (800766c <vPortSetupTimerInterrupt+0x30>)
 8007660:	2207      	movs	r2, #7
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr
 800766c:	e000e010 	.word	0xe000e010
 8007670:	e000e018 	.word	0xe000e018
 8007674:	20000000 	.word	0x20000000
 8007678:	10624dd3 	.word	0x10624dd3
 800767c:	e000e014 	.word	0xe000e014

08007680 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007686:	f3ef 8305 	mrs	r3, IPSR
 800768a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b0f      	cmp	r3, #15
 8007690:	d914      	bls.n	80076bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <vPortValidateInterruptPriority+0x6c>)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <vPortValidateInterruptPriority+0x70>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	7afa      	ldrb	r2, [r7, #11]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d20a      	bcs.n	80076bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	607b      	str	r3, [r7, #4]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <vPortValidateInterruptPriority+0x74>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <vPortValidateInterruptPriority+0x78>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d90a      	bls.n	80076e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	603b      	str	r3, [r7, #0]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <vPortValidateInterruptPriority+0x60>
	}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	e000e3f0 	.word	0xe000e3f0
 80076f0:	20000d84 	.word	0x20000d84
 80076f4:	e000ed0c 	.word	0xe000ed0c
 80076f8:	20000d88 	.word	0x20000d88

080076fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007708:	f7fe fe2e 	bl	8006368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800770c:	4b58      	ldr	r3, [pc, #352]	; (8007870 <pvPortMalloc+0x174>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007714:	f000 f910 	bl	8007938 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007718:	4b56      	ldr	r3, [pc, #344]	; (8007874 <pvPortMalloc+0x178>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 808e 	bne.w	8007842 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01d      	beq.n	8007768 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800772c:	2208      	movs	r2, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d014      	beq.n	8007768 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	3308      	adds	r3, #8
 8007746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <pvPortMalloc+0x6c>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	617b      	str	r3, [r7, #20]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d069      	beq.n	8007842 <pvPortMalloc+0x146>
 800776e:	4b42      	ldr	r3, [pc, #264]	; (8007878 <pvPortMalloc+0x17c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	d864      	bhi.n	8007842 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007778:	4b40      	ldr	r3, [pc, #256]	; (800787c <pvPortMalloc+0x180>)
 800777a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800777c:	4b3f      	ldr	r3, [pc, #252]	; (800787c <pvPortMalloc+0x180>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007782:	e004      	b.n	800778e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d903      	bls.n	80077a0 <pvPortMalloc+0xa4>
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f1      	bne.n	8007784 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077a0:	4b33      	ldr	r3, [pc, #204]	; (8007870 <pvPortMalloc+0x174>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d04b      	beq.n	8007842 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2208      	movs	r2, #8
 80077b0:	4413      	add	r3, r2
 80077b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	2308      	movs	r3, #8
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d91f      	bls.n	800780c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <pvPortMalloc+0xf8>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	613b      	str	r3, [r7, #16]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007806:	69b8      	ldr	r0, [r7, #24]
 8007808:	f000 f8f8 	bl	80079fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <pvPortMalloc+0x17c>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	4a18      	ldr	r2, [pc, #96]	; (8007878 <pvPortMalloc+0x17c>)
 8007818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <pvPortMalloc+0x17c>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b18      	ldr	r3, [pc, #96]	; (8007880 <pvPortMalloc+0x184>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d203      	bcs.n	800782e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007826:	4b14      	ldr	r3, [pc, #80]	; (8007878 <pvPortMalloc+0x17c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a15      	ldr	r2, [pc, #84]	; (8007880 <pvPortMalloc+0x184>)
 800782c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	4b10      	ldr	r3, [pc, #64]	; (8007874 <pvPortMalloc+0x178>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	431a      	orrs	r2, r3
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007842:	f7fe fd9f 	bl	8006384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <pvPortMalloc+0x16a>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <pvPortMalloc+0x168>
	return pvReturn;
 8007866:	69fb      	ldr	r3, [r7, #28]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3728      	adds	r7, #40	; 0x28
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20002594 	.word	0x20002594
 8007874:	200025a0 	.word	0x200025a0
 8007878:	20002598 	.word	0x20002598
 800787c:	2000258c 	.word	0x2000258c
 8007880:	2000259c 	.word	0x2000259c

08007884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d048      	beq.n	8007928 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007896:	2308      	movs	r3, #8
 8007898:	425b      	negs	r3, r3
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4413      	add	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4b21      	ldr	r3, [pc, #132]	; (8007930 <vPortFree+0xac>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <vPortFree+0x44>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60fb      	str	r3, [r7, #12]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <vPortFree+0x62>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60bb      	str	r3, [r7, #8]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <vPortFree+0xac>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d019      	beq.n	8007928 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortFree+0xac>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	43db      	mvns	r3, r3
 8007906:	401a      	ands	r2, r3
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800790c:	f7fe fd2c 	bl	8006368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <vPortFree+0xb0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4413      	add	r3, r2
 800791a:	4a06      	ldr	r2, [pc, #24]	; (8007934 <vPortFree+0xb0>)
 800791c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800791e:	6938      	ldr	r0, [r7, #16]
 8007920:	f000 f86c 	bl	80079fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007924:	f7fe fd2e 	bl	8006384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007928:	bf00      	nop
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200025a0 	.word	0x200025a0
 8007934:	20002598 	.word	0x20002598

08007938 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800793e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007942:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007944:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <prvHeapInit+0xac>)
 8007946:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00c      	beq.n	800796c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3307      	adds	r3, #7
 8007956:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <prvHeapInit+0xac>)
 8007968:	4413      	add	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007970:	4a1d      	ldr	r2, [pc, #116]	; (80079e8 <prvHeapInit+0xb0>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007976:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <prvHeapInit+0xb0>)
 8007978:	2200      	movs	r2, #0
 800797a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007984:	2208      	movs	r2, #8
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a15      	ldr	r2, [pc, #84]	; (80079ec <prvHeapInit+0xb4>)
 8007998:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <prvHeapInit+0xb4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2200      	movs	r2, #0
 80079a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <prvHeapInit+0xb4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <prvHeapInit+0xb4>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <prvHeapInit+0xb8>)
 80079c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <prvHeapInit+0xbc>)
 80079ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079d0:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <prvHeapInit+0xc0>)
 80079d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	20000d8c 	.word	0x20000d8c
 80079e8:	2000258c 	.word	0x2000258c
 80079ec:	20002594 	.word	0x20002594
 80079f0:	2000259c 	.word	0x2000259c
 80079f4:	20002598 	.word	0x20002598
 80079f8:	200025a0 	.word	0x200025a0

080079fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a04:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <prvInsertBlockIntoFreeList+0xa8>)
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e002      	b.n	8007a10 <prvInsertBlockIntoFreeList+0x14>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d8f7      	bhi.n	8007a0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	4413      	add	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d108      	bne.n	8007a3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	441a      	add	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d118      	bne.n	8007a84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <prvInsertBlockIntoFreeList+0xac>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d00d      	beq.n	8007a7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e008      	b.n	8007a8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <prvInsertBlockIntoFreeList+0xac>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e003      	b.n	8007a8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d002      	beq.n	8007a9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr
 8007aa4:	2000258c 	.word	0x2000258c
 8007aa8:	20002594 	.word	0x20002594

08007aac <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	71fb      	strb	r3, [r7, #7]
 8007ab6:	e026      	b.n	8007b06 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	3b50      	subs	r3, #80	; 0x50
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f82b 	bl	8007b1c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f000 f827 	bl	8007b1c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8007ace:	2100      	movs	r1, #0
 8007ad0:	2010      	movs	r0, #16
 8007ad2:	f000 f823 	bl	8007b1c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	71bb      	strb	r3, [r7, #6]
 8007ada:	e00d      	b.n	8007af8 <OLED_Refresh_Gram+0x4c>
 8007adc:	79ba      	ldrb	r2, [r7, #6]
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	490d      	ldr	r1, [pc, #52]	; (8007b18 <OLED_Refresh_Gram+0x6c>)
 8007ae2:	00d2      	lsls	r2, r2, #3
 8007ae4:	440a      	add	r2, r1
 8007ae6:	4413      	add	r3, r2
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f815 	bl	8007b1c <OLED_WR_Byte>
 8007af2:	79bb      	ldrb	r3, [r7, #6]
 8007af4:	3301      	adds	r3, #1
 8007af6:	71bb      	strb	r3, [r7, #6]
 8007af8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	daed      	bge.n	8007adc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	3301      	adds	r3, #1
 8007b04:	71fb      	strb	r3, [r7, #7]
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b07      	cmp	r3, #7
 8007b0a:	d9d5      	bls.n	8007ab8 <OLED_Refresh_Gram+0xc>
	}   
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200027f4 	.word	0x200027f4

08007b1c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	460a      	mov	r2, r1
 8007b26:	71fb      	strb	r3, [r7, #7]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8007b2c:	79bb      	ldrb	r3, [r7, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8007b32:	2201      	movs	r2, #1
 8007b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b38:	481c      	ldr	r0, [pc, #112]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b3a:	f7fa ffed 	bl	8002b18 <HAL_GPIO_WritePin>
 8007b3e:	e005      	b.n	8007b4c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8007b40:	2200      	movs	r2, #0
 8007b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b46:	4819      	ldr	r0, [pc, #100]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b48:	f7fa ffe6 	bl	8002b18 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	e01e      	b.n	8007b90 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8007b52:	2200      	movs	r2, #0
 8007b54:	2120      	movs	r1, #32
 8007b56:	4815      	ldr	r0, [pc, #84]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b58:	f7fa ffde 	bl	8002b18 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8007b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da05      	bge.n	8007b70 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8007b64:	2201      	movs	r2, #1
 8007b66:	2140      	movs	r1, #64	; 0x40
 8007b68:	4810      	ldr	r0, [pc, #64]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b6a:	f7fa ffd5 	bl	8002b18 <HAL_GPIO_WritePin>
 8007b6e:	e004      	b.n	8007b7a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8007b70:	2200      	movs	r2, #0
 8007b72:	2140      	movs	r1, #64	; 0x40
 8007b74:	480d      	ldr	r0, [pc, #52]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b76:	f7fa ffcf 	bl	8002b18 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	480b      	ldr	r0, [pc, #44]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b80:	f7fa ffca 	bl	8002b18 <HAL_GPIO_WritePin>
		dat<<=1;   
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	73fb      	strb	r3, [r7, #15]
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b07      	cmp	r3, #7
 8007b94:	d9dd      	bls.n	8007b52 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8007b96:	2201      	movs	r2, #1
 8007b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b9c:	4803      	ldr	r0, [pc, #12]	; (8007bac <OLED_WR_Byte+0x90>)
 8007b9e:	f7fa ffbb 	bl	8002b18 <HAL_GPIO_WritePin>
} 
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40011800 	.word	0x40011800

08007bb0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	71fb      	strb	r3, [r7, #7]
 8007bba:	e014      	b.n	8007be6 <OLED_Clear+0x36>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	71bb      	strb	r3, [r7, #6]
 8007bc0:	e00a      	b.n	8007bd8 <OLED_Clear+0x28>
 8007bc2:	79ba      	ldrb	r2, [r7, #6]
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	490c      	ldr	r1, [pc, #48]	; (8007bf8 <OLED_Clear+0x48>)
 8007bc8:	00d2      	lsls	r2, r2, #3
 8007bca:	440a      	add	r2, r1
 8007bcc:	4413      	add	r3, r2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	79bb      	ldrb	r3, [r7, #6]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	71bb      	strb	r3, [r7, #6]
 8007bd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	daf0      	bge.n	8007bc2 <OLED_Clear+0x12>
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	3301      	adds	r3, #1
 8007be4:	71fb      	strb	r3, [r7, #7]
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	2b07      	cmp	r3, #7
 8007bea:	d9e7      	bls.n	8007bbc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8007bec:	f7ff ff5e 	bl	8007aac <OLED_Refresh_Gram>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	200027f4 	.word	0x200027f4

08007bfc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	71fb      	strb	r3, [r7, #7]
 8007c06:	460b      	mov	r3, r1
 8007c08:	71bb      	strb	r3, [r7, #6]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8007c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	db41      	blt.n	8007c9e <OLED_DrawPoint+0xa2>
 8007c1a:	79bb      	ldrb	r3, [r7, #6]
 8007c1c:	2b3f      	cmp	r3, #63	; 0x3f
 8007c1e:	d83e      	bhi.n	8007c9e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8007c20:	79bb      	ldrb	r3, [r7, #6]
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f1c3 0307 	rsb	r3, r3, #7
 8007c2a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8007c2c:	79bb      	ldrb	r3, [r7, #6]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8007c34:	7b7b      	ldrb	r3, [r7, #13]
 8007c36:	f1c3 0307 	rsb	r3, r3, #7
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8007c42:	797b      	ldrb	r3, [r7, #5]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <OLED_DrawPoint+0x72>
 8007c48:	79fa      	ldrb	r2, [r7, #7]
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	4916      	ldr	r1, [pc, #88]	; (8007ca8 <OLED_DrawPoint+0xac>)
 8007c4e:	00d2      	lsls	r2, r2, #3
 8007c50:	440a      	add	r2, r1
 8007c52:	4413      	add	r3, r2
 8007c54:	7818      	ldrb	r0, [r3, #0]
 8007c56:	79fa      	ldrb	r2, [r7, #7]
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	7bf9      	ldrb	r1, [r7, #15]
 8007c5c:	4301      	orrs	r1, r0
 8007c5e:	b2c8      	uxtb	r0, r1
 8007c60:	4911      	ldr	r1, [pc, #68]	; (8007ca8 <OLED_DrawPoint+0xac>)
 8007c62:	00d2      	lsls	r2, r2, #3
 8007c64:	440a      	add	r2, r1
 8007c66:	4413      	add	r3, r2
 8007c68:	4602      	mov	r2, r0
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e018      	b.n	8007ca0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8007c6e:	79fa      	ldrb	r2, [r7, #7]
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	490d      	ldr	r1, [pc, #52]	; (8007ca8 <OLED_DrawPoint+0xac>)
 8007c74:	00d2      	lsls	r2, r2, #3
 8007c76:	440a      	add	r2, r1
 8007c78:	4413      	add	r3, r2
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b25a      	sxtb	r2, r3
 8007c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	4013      	ands	r3, r2
 8007c88:	b259      	sxtb	r1, r3
 8007c8a:	79fa      	ldrb	r2, [r7, #7]
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	b2c8      	uxtb	r0, r1
 8007c90:	4905      	ldr	r1, [pc, #20]	; (8007ca8 <OLED_DrawPoint+0xac>)
 8007c92:	00d2      	lsls	r2, r2, #3
 8007c94:	440a      	add	r2, r1
 8007c96:	4413      	add	r3, r2
 8007c98:	4602      	mov	r2, r0
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e000      	b.n	8007ca0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8007c9e:	bf00      	nop
}
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr
 8007ca8:	200027f4 	.word	0x200027f4

08007cac <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4623      	mov	r3, r4
 8007cbc:	71fb      	strb	r3, [r7, #7]
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	71bb      	strb	r3, [r7, #6]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	717b      	strb	r3, [r7, #5]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8007cca:	79bb      	ldrb	r3, [r7, #6]
 8007ccc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8007cce:	797b      	ldrb	r3, [r7, #5]
 8007cd0:	3b20      	subs	r3, #32
 8007cd2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]
 8007cd8:	e04d      	b.n	8007d76 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8007cda:	793b      	ldrb	r3, [r7, #4]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	d10b      	bne.n	8007cf8 <OLED_ShowChar+0x4c>
 8007ce0:	797a      	ldrb	r2, [r7, #5]
 8007ce2:	7bb9      	ldrb	r1, [r7, #14]
 8007ce4:	4828      	ldr	r0, [pc, #160]	; (8007d88 <OLED_ShowChar+0xdc>)
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4403      	add	r3, r0
 8007cf0:	440b      	add	r3, r1
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	e007      	b.n	8007d08 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8007cf8:	797a      	ldrb	r2, [r7, #5]
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	4923      	ldr	r1, [pc, #140]	; (8007d8c <OLED_ShowChar+0xe0>)
 8007cfe:	0112      	lsls	r2, r2, #4
 8007d00:	440a      	add	r2, r1
 8007d02:	4413      	add	r3, r2
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	737b      	strb	r3, [r7, #13]
 8007d0c:	e02d      	b.n	8007d6a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8007d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da07      	bge.n	8007d26 <OLED_ShowChar+0x7a>
 8007d16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007d1a:	79b9      	ldrb	r1, [r7, #6]
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff ff6c 	bl	8007bfc <OLED_DrawPoint>
 8007d24:	e00c      	b.n	8007d40 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8007d26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf0c      	ite	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	2300      	movne	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	79b9      	ldrb	r1, [r7, #6]
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff ff5e 	bl	8007bfc <OLED_DrawPoint>
			temp<<=1;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	73fb      	strb	r3, [r7, #15]
			y++;
 8007d46:	79bb      	ldrb	r3, [r7, #6]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8007d4c:	79ba      	ldrb	r2, [r7, #6]
 8007d4e:	7b3b      	ldrb	r3, [r7, #12]
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	793b      	ldrb	r3, [r7, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d105      	bne.n	8007d64 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8007d58:	7b3b      	ldrb	r3, [r7, #12]
 8007d5a:	71bb      	strb	r3, [r7, #6]
				x++;
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	71fb      	strb	r3, [r7, #7]
				break;
 8007d62:	e005      	b.n	8007d70 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8007d64:	7b7b      	ldrb	r3, [r7, #13]
 8007d66:	3301      	adds	r3, #1
 8007d68:	737b      	strb	r3, [r7, #13]
 8007d6a:	7b7b      	ldrb	r3, [r7, #13]
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	d9ce      	bls.n	8007d0e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	3301      	adds	r3, #1
 8007d74:	73bb      	strb	r3, [r7, #14]
 8007d76:	7bba      	ldrb	r2, [r7, #14]
 8007d78:	793b      	ldrb	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d3ad      	bcc.n	8007cda <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd90      	pop	{r4, r7, pc}
 8007d88:	08008978 	.word	0x08008978
 8007d8c:	08008dec 	.word	0x08008dec

08007d90 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	4603      	mov	r3, r0
 8007d98:	603a      	str	r2, [r7, #0]
 8007d9a:	71fb      	strb	r3, [r7, #7]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8007da0:	e01f      	b.n	8007de2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	2b7a      	cmp	r3, #122	; 0x7a
 8007da6:	d904      	bls.n	8007db2 <OLED_ShowString+0x22>
 8007da8:	2300      	movs	r3, #0
 8007daa:	71fb      	strb	r3, [r7, #7]
 8007dac:	79bb      	ldrb	r3, [r7, #6]
 8007dae:	3310      	adds	r3, #16
 8007db0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8007db2:	79bb      	ldrb	r3, [r7, #6]
 8007db4:	2b3a      	cmp	r3, #58	; 0x3a
 8007db6:	d905      	bls.n	8007dc4 <OLED_ShowString+0x34>
 8007db8:	2300      	movs	r3, #0
 8007dba:	71fb      	strb	r3, [r7, #7]
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	71bb      	strb	r3, [r7, #6]
 8007dc0:	f7ff fef6 	bl	8007bb0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781a      	ldrb	r2, [r3, #0]
 8007dc8:	79b9      	ldrb	r1, [r7, #6]
 8007dca:	79f8      	ldrb	r0, [r7, #7]
 8007dcc:	2301      	movs	r3, #1
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	f7ff ff6b 	bl	8007cac <OLED_ShowChar>
        x+=8;
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	71fb      	strb	r3, [r7, #7]
        p++;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	3301      	adds	r3, #1
 8007de0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1db      	bne.n	8007da2 <OLED_ShowString+0x12>
    }  
}	 
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <OLED_Init>:

void OLED_Init(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8007df8:	f7fa fec0 	bl	8002b7c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8007dfc:	4b41      	ldr	r3, [pc, #260]	; (8007f04 <OLED_Init+0x110>)
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	4a40      	ldr	r2, [pc, #256]	; (8007f04 <OLED_Init+0x110>)
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	6213      	str	r3, [r2, #32]
 8007e08:	4b3e      	ldr	r3, [pc, #248]	; (8007f04 <OLED_Init+0x110>)
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	4a3d      	ldr	r2, [pc, #244]	; (8007f04 <OLED_Init+0x110>)
 8007e0e:	f023 0304 	bic.w	r3, r3, #4
 8007e12:	6213      	str	r3, [r2, #32]
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8007e14:	f7fa febe 	bl	8002b94 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2180      	movs	r1, #128	; 0x80
 8007e1c:	483a      	ldr	r0, [pc, #232]	; (8007f08 <OLED_Init+0x114>)
 8007e1e:	f7fa fe7b 	bl	8002b18 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007e22:	2064      	movs	r0, #100	; 0x64
 8007e24:	f7f9 fe32 	bl	8001a8c <HAL_Delay>
	OLED_RST_Set();
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2180      	movs	r1, #128	; 0x80
 8007e2c:	4836      	ldr	r0, [pc, #216]	; (8007f08 <OLED_Init+0x114>)
 8007e2e:	f7fa fe73 	bl	8002b18 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007e32:	2100      	movs	r1, #0
 8007e34:	20ae      	movs	r0, #174	; 0xae
 8007e36:	f7ff fe71 	bl	8007b1c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	20d5      	movs	r0, #213	; 0xd5
 8007e3e:	f7ff fe6d 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007e42:	2100      	movs	r1, #0
 8007e44:	2050      	movs	r0, #80	; 0x50
 8007e46:	f7ff fe69 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	20a8      	movs	r0, #168	; 0xa8
 8007e4e:	f7ff fe65 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007e52:	2100      	movs	r1, #0
 8007e54:	203f      	movs	r0, #63	; 0x3f
 8007e56:	f7ff fe61 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	20d3      	movs	r0, #211	; 0xd3
 8007e5e:	f7ff fe5d 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007e62:	2100      	movs	r1, #0
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff fe59 	bl	8007b1c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	2040      	movs	r0, #64	; 0x40
 8007e6e:	f7ff fe55 	bl	8007b1c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007e72:	2100      	movs	r1, #0
 8007e74:	208d      	movs	r0, #141	; 0x8d
 8007e76:	f7ff fe51 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	2014      	movs	r0, #20
 8007e7e:	f7ff fe4d 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007e82:	2100      	movs	r1, #0
 8007e84:	2020      	movs	r0, #32
 8007e86:	f7ff fe49 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	2002      	movs	r0, #2
 8007e8e:	f7ff fe45 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8007e92:	2100      	movs	r1, #0
 8007e94:	20a1      	movs	r0, #161	; 0xa1
 8007e96:	f7ff fe41 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	20c0      	movs	r0, #192	; 0xc0
 8007e9e:	f7ff fe3d 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	20da      	movs	r0, #218	; 0xda
 8007ea6:	f7ff fe39 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8007eaa:	2100      	movs	r1, #0
 8007eac:	2012      	movs	r0, #18
 8007eae:	f7ff fe35 	bl	8007b1c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	2081      	movs	r0, #129	; 0x81
 8007eb6:	f7ff fe31 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8007eba:	2100      	movs	r1, #0
 8007ebc:	20ef      	movs	r0, #239	; 0xef
 8007ebe:	f7ff fe2d 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	20d9      	movs	r0, #217	; 0xd9
 8007ec6:	f7ff fe29 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8007eca:	2100      	movs	r1, #0
 8007ecc:	20f1      	movs	r0, #241	; 0xf1
 8007ece:	f7ff fe25 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	20db      	movs	r0, #219	; 0xdb
 8007ed6:	f7ff fe21 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8007eda:	2100      	movs	r1, #0
 8007edc:	2030      	movs	r0, #48	; 0x30
 8007ede:	f7ff fe1d 	bl	8007b1c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	20a4      	movs	r0, #164	; 0xa4
 8007ee6:	f7ff fe19 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8007eea:	2100      	movs	r1, #0
 8007eec:	20a6      	movs	r0, #166	; 0xa6
 8007eee:	f7ff fe15 	bl	8007b1c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	20af      	movs	r0, #175	; 0xaf
 8007ef6:	f7ff fe11 	bl	8007b1c <OLED_WR_Byte>
	OLED_Clear(); 
 8007efa:	f7ff fe59 	bl	8007bb0 <OLED_Clear>
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
 8007f08:	40011800 	.word	0x40011800

08007f0c <__errno>:
 8007f0c:	4b01      	ldr	r3, [pc, #4]	; (8007f14 <__errno+0x8>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000010 	.word	0x20000010

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	4d0c      	ldr	r5, [pc, #48]	; (8007f50 <__libc_init_array+0x38>)
 8007f1e:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f20:	1b64      	subs	r4, r4, r5
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	f000 fc5c 	bl	80087e4 <_init>
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	4d0a      	ldr	r5, [pc, #40]	; (8007f58 <__libc_init_array+0x40>)
 8007f30:	4c0a      	ldr	r4, [pc, #40]	; (8007f5c <__libc_init_array+0x44>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	08009410 	.word	0x08009410
 8007f54:	08009410 	.word	0x08009410
 8007f58:	08009410 	.word	0x08009410
 8007f5c:	08009414 	.word	0x08009414

08007f60 <memcpy>:
 8007f60:	440a      	add	r2, r1
 8007f62:	4291      	cmp	r1, r2
 8007f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f68:	d100      	bne.n	8007f6c <memcpy+0xc>
 8007f6a:	4770      	bx	lr
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	4291      	cmp	r1, r2
 8007f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f78:	d1f9      	bne.n	8007f6e <memcpy+0xe>
 8007f7a:	bd10      	pop	{r4, pc}

08007f7c <memset>:
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4402      	add	r2, r0
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <siprintf>:
 8007f8c:	b40e      	push	{r1, r2, r3}
 8007f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f92:	b500      	push	{lr}
 8007f94:	b09c      	sub	sp, #112	; 0x70
 8007f96:	ab1d      	add	r3, sp, #116	; 0x74
 8007f98:	9002      	str	r0, [sp, #8]
 8007f9a:	9006      	str	r0, [sp, #24]
 8007f9c:	9107      	str	r1, [sp, #28]
 8007f9e:	9104      	str	r1, [sp, #16]
 8007fa0:	4808      	ldr	r0, [pc, #32]	; (8007fc4 <siprintf+0x38>)
 8007fa2:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <siprintf+0x3c>)
 8007fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa8:	9105      	str	r1, [sp, #20]
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	a902      	add	r1, sp, #8
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	f000 f868 	bl	8008084 <_svfiprintf_r>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	b01c      	add	sp, #112	; 0x70
 8007fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc0:	b003      	add	sp, #12
 8007fc2:	4770      	bx	lr
 8007fc4:	20000010 	.word	0x20000010
 8007fc8:	ffff0208 	.word	0xffff0208

08007fcc <__ssputs_r>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	688e      	ldr	r6, [r1, #8]
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	429e      	cmp	r6, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4690      	mov	r8, r2
 8007fda:	461f      	mov	r7, r3
 8007fdc:	d838      	bhi.n	8008050 <__ssputs_r+0x84>
 8007fde:	898a      	ldrh	r2, [r1, #12]
 8007fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe4:	d032      	beq.n	800804c <__ssputs_r+0x80>
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	6909      	ldr	r1, [r1, #16]
 8007fea:	3301      	adds	r3, #1
 8007fec:	eba5 0901 	sub.w	r9, r5, r1
 8007ff0:	6965      	ldr	r5, [r4, #20]
 8007ff2:	444b      	add	r3, r9
 8007ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf38      	it	cc
 8008002:	461d      	movcc	r5, r3
 8008004:	0553      	lsls	r3, r2, #21
 8008006:	d531      	bpl.n	800806c <__ssputs_r+0xa0>
 8008008:	4629      	mov	r1, r5
 800800a:	f000 fb45 	bl	8008698 <_malloc_r>
 800800e:	4606      	mov	r6, r0
 8008010:	b950      	cbnz	r0, 8008028 <__ssputs_r+0x5c>
 8008012:	230c      	movs	r3, #12
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	f8ca 3000 	str.w	r3, [sl]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	464a      	mov	r2, r9
 800802a:	6921      	ldr	r1, [r4, #16]
 800802c:	f7ff ff98 	bl	8007f60 <memcpy>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6126      	str	r6, [r4, #16]
 800803e:	444e      	add	r6, r9
 8008040:	6026      	str	r6, [r4, #0]
 8008042:	463e      	mov	r6, r7
 8008044:	6165      	str	r5, [r4, #20]
 8008046:	eba5 0509 	sub.w	r5, r5, r9
 800804a:	60a5      	str	r5, [r4, #8]
 800804c:	42be      	cmp	r6, r7
 800804e:	d900      	bls.n	8008052 <__ssputs_r+0x86>
 8008050:	463e      	mov	r6, r7
 8008052:	4632      	mov	r2, r6
 8008054:	4641      	mov	r1, r8
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	f000 fab8 	bl	80085cc <memmove>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	4432      	add	r2, r6
 8008064:	2000      	movs	r0, #0
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	6022      	str	r2, [r4, #0]
 800806a:	e7db      	b.n	8008024 <__ssputs_r+0x58>
 800806c:	462a      	mov	r2, r5
 800806e:	f000 fb6d 	bl	800874c <_realloc_r>
 8008072:	4606      	mov	r6, r0
 8008074:	2800      	cmp	r0, #0
 8008076:	d1e1      	bne.n	800803c <__ssputs_r+0x70>
 8008078:	4650      	mov	r0, sl
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	f000 fac0 	bl	8008600 <_free_r>
 8008080:	e7c7      	b.n	8008012 <__ssputs_r+0x46>
	...

08008084 <_svfiprintf_r>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	4698      	mov	r8, r3
 800808a:	898b      	ldrh	r3, [r1, #12]
 800808c:	4607      	mov	r7, r0
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	460d      	mov	r5, r1
 8008092:	4614      	mov	r4, r2
 8008094:	b09d      	sub	sp, #116	; 0x74
 8008096:	d50e      	bpl.n	80080b6 <_svfiprintf_r+0x32>
 8008098:	690b      	ldr	r3, [r1, #16]
 800809a:	b963      	cbnz	r3, 80080b6 <_svfiprintf_r+0x32>
 800809c:	2140      	movs	r1, #64	; 0x40
 800809e:	f000 fafb 	bl	8008698 <_malloc_r>
 80080a2:	6028      	str	r0, [r5, #0]
 80080a4:	6128      	str	r0, [r5, #16]
 80080a6:	b920      	cbnz	r0, 80080b2 <_svfiprintf_r+0x2e>
 80080a8:	230c      	movs	r3, #12
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e0d1      	b.n	8008256 <_svfiprintf_r+0x1d2>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	616b      	str	r3, [r5, #20]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ba:	2320      	movs	r3, #32
 80080bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c0:	2330      	movs	r3, #48	; 0x30
 80080c2:	f04f 0901 	mov.w	r9, #1
 80080c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008270 <_svfiprintf_r+0x1ec>
 80080ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d2:	4623      	mov	r3, r4
 80080d4:	469a      	mov	sl, r3
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	b10a      	cbz	r2, 80080e0 <_svfiprintf_r+0x5c>
 80080dc:	2a25      	cmp	r2, #37	; 0x25
 80080de:	d1f9      	bne.n	80080d4 <_svfiprintf_r+0x50>
 80080e0:	ebba 0b04 	subs.w	fp, sl, r4
 80080e4:	d00b      	beq.n	80080fe <_svfiprintf_r+0x7a>
 80080e6:	465b      	mov	r3, fp
 80080e8:	4622      	mov	r2, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff ff6d 	bl	8007fcc <__ssputs_r>
 80080f2:	3001      	adds	r0, #1
 80080f4:	f000 80aa 	beq.w	800824c <_svfiprintf_r+0x1c8>
 80080f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fa:	445a      	add	r2, fp
 80080fc:	9209      	str	r2, [sp, #36]	; 0x24
 80080fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a2 	beq.w	800824c <_svfiprintf_r+0x1c8>
 8008108:	2300      	movs	r3, #0
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008112:	f10a 0a01 	add.w	sl, sl, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811e:	931a      	str	r3, [sp, #104]	; 0x68
 8008120:	4654      	mov	r4, sl
 8008122:	2205      	movs	r2, #5
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	4851      	ldr	r0, [pc, #324]	; (8008270 <_svfiprintf_r+0x1ec>)
 800812a:	f000 fa41 	bl	80085b0 <memchr>
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	b9d8      	cbnz	r0, 800816a <_svfiprintf_r+0xe6>
 8008132:	06d0      	lsls	r0, r2, #27
 8008134:	bf44      	itt	mi
 8008136:	2320      	movmi	r3, #32
 8008138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813c:	0711      	lsls	r1, r2, #28
 800813e:	bf44      	itt	mi
 8008140:	232b      	movmi	r3, #43	; 0x2b
 8008142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b2a      	cmp	r3, #42	; 0x2a
 800814c:	d015      	beq.n	800817a <_svfiprintf_r+0xf6>
 800814e:	4654      	mov	r4, sl
 8008150:	2000      	movs	r0, #0
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	9a07      	ldr	r2, [sp, #28]
 8008158:	4621      	mov	r1, r4
 800815a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815e:	3b30      	subs	r3, #48	; 0x30
 8008160:	2b09      	cmp	r3, #9
 8008162:	d94e      	bls.n	8008202 <_svfiprintf_r+0x17e>
 8008164:	b1b0      	cbz	r0, 8008194 <_svfiprintf_r+0x110>
 8008166:	9207      	str	r2, [sp, #28]
 8008168:	e014      	b.n	8008194 <_svfiprintf_r+0x110>
 800816a:	eba0 0308 	sub.w	r3, r0, r8
 800816e:	fa09 f303 	lsl.w	r3, r9, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	46a2      	mov	sl, r4
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	e7d2      	b.n	8008120 <_svfiprintf_r+0x9c>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	1d19      	adds	r1, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfbb      	ittet	lt
 8008186:	425b      	neglt	r3, r3
 8008188:	f042 0202 	orrlt.w	r2, r2, #2
 800818c:	9307      	strge	r3, [sp, #28]
 800818e:	9307      	strlt	r3, [sp, #28]
 8008190:	bfb8      	it	lt
 8008192:	9204      	strlt	r2, [sp, #16]
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	2b2e      	cmp	r3, #46	; 0x2e
 8008198:	d10c      	bne.n	80081b4 <_svfiprintf_r+0x130>
 800819a:	7863      	ldrb	r3, [r4, #1]
 800819c:	2b2a      	cmp	r3, #42	; 0x2a
 800819e:	d135      	bne.n	800820c <_svfiprintf_r+0x188>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	3402      	adds	r4, #2
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008280 <_svfiprintf_r+0x1fc>
 80081b8:	2203      	movs	r2, #3
 80081ba:	4650      	mov	r0, sl
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	f000 f9f7 	bl	80085b0 <memchr>
 80081c2:	b140      	cbz	r0, 80081d6 <_svfiprintf_r+0x152>
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	eba0 000a 	sub.w	r0, r0, sl
 80081ca:	fa03 f000 	lsl.w	r0, r3, r0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3401      	adds	r4, #1
 80081d2:	4303      	orrs	r3, r0
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	2206      	movs	r2, #6
 80081dc:	4825      	ldr	r0, [pc, #148]	; (8008274 <_svfiprintf_r+0x1f0>)
 80081de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e2:	f000 f9e5 	bl	80085b0 <memchr>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d038      	beq.n	800825c <_svfiprintf_r+0x1d8>
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <_svfiprintf_r+0x1f4>)
 80081ec:	bb1b      	cbnz	r3, 8008236 <_svfiprintf_r+0x1b2>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	3308      	adds	r3, #8
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4433      	add	r3, r6
 80081fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008200:	e767      	b.n	80080d2 <_svfiprintf_r+0x4e>
 8008202:	460c      	mov	r4, r1
 8008204:	2001      	movs	r0, #1
 8008206:	fb0c 3202 	mla	r2, ip, r2, r3
 800820a:	e7a5      	b.n	8008158 <_svfiprintf_r+0xd4>
 800820c:	2300      	movs	r3, #0
 800820e:	f04f 0c0a 	mov.w	ip, #10
 8008212:	4619      	mov	r1, r3
 8008214:	3401      	adds	r4, #1
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	4620      	mov	r0, r4
 800821a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821e:	3a30      	subs	r2, #48	; 0x30
 8008220:	2a09      	cmp	r2, #9
 8008222:	d903      	bls.n	800822c <_svfiprintf_r+0x1a8>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0c5      	beq.n	80081b4 <_svfiprintf_r+0x130>
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	e7c3      	b.n	80081b4 <_svfiprintf_r+0x130>
 800822c:	4604      	mov	r4, r0
 800822e:	2301      	movs	r3, #1
 8008230:	fb0c 2101 	mla	r1, ip, r1, r2
 8008234:	e7f0      	b.n	8008218 <_svfiprintf_r+0x194>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4638      	mov	r0, r7
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <_svfiprintf_r+0x1f8>)
 8008240:	a904      	add	r1, sp, #16
 8008242:	f3af 8000 	nop.w
 8008246:	1c42      	adds	r2, r0, #1
 8008248:	4606      	mov	r6, r0
 800824a:	d1d6      	bne.n	80081fa <_svfiprintf_r+0x176>
 800824c:	89ab      	ldrh	r3, [r5, #12]
 800824e:	065b      	lsls	r3, r3, #25
 8008250:	f53f af2c 	bmi.w	80080ac <_svfiprintf_r+0x28>
 8008254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008256:	b01d      	add	sp, #116	; 0x74
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4638      	mov	r0, r7
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <_svfiprintf_r+0x1f8>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	f000 f87c 	bl	8008364 <_printf_i>
 800826c:	e7eb      	b.n	8008246 <_svfiprintf_r+0x1c2>
 800826e:	bf00      	nop
 8008270:	080093dc 	.word	0x080093dc
 8008274:	080093e6 	.word	0x080093e6
 8008278:	00000000 	.word	0x00000000
 800827c:	08007fcd 	.word	0x08007fcd
 8008280:	080093e2 	.word	0x080093e2

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4616      	mov	r6, r2
 800828a:	4699      	mov	r9, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	4607      	mov	r7, r0
 8008292:	4293      	cmp	r3, r2
 8008294:	bfb8      	it	lt
 8008296:	4613      	movlt	r3, r2
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800829e:	460c      	mov	r4, r1
 80082a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082a4:	b10a      	cbz	r2, 80082aa <_printf_common+0x26>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	6833      	ldrmi	r3, [r6, #0]
 80082b2:	3302      	addmi	r3, #2
 80082b4:	6033      	strmi	r3, [r6, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	f015 0506 	ands.w	r5, r5, #6
 80082bc:	d106      	bne.n	80082cc <_printf_common+0x48>
 80082be:	f104 0a19 	add.w	sl, r4, #25
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6832      	ldr	r2, [r6, #0]
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc28      	bgt.n	800831e <_printf_common+0x9a>
 80082cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d0:	1e13      	subs	r3, r2, #0
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	2301      	movne	r3, #1
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d42d      	bmi.n	8008338 <_printf_common+0xb4>
 80082dc:	4649      	mov	r1, r9
 80082de:	4638      	mov	r0, r7
 80082e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d020      	beq.n	800832c <_printf_common+0xa8>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	68e5      	ldr	r5, [r4, #12]
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	bf18      	it	ne
 80082f6:	2500      	movne	r5, #0
 80082f8:	6832      	ldr	r2, [r6, #0]
 80082fa:	f04f 0600 	mov.w	r6, #0
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	bf08      	it	eq
 8008302:	1aad      	subeq	r5, r5, r2
 8008304:	6922      	ldr	r2, [r4, #16]
 8008306:	bf08      	it	eq
 8008308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800830c:	4293      	cmp	r3, r2
 800830e:	bfc4      	itt	gt
 8008310:	1a9b      	subgt	r3, r3, r2
 8008312:	18ed      	addgt	r5, r5, r3
 8008314:	341a      	adds	r4, #26
 8008316:	42b5      	cmp	r5, r6
 8008318:	d11a      	bne.n	8008350 <_printf_common+0xcc>
 800831a:	2000      	movs	r0, #0
 800831c:	e008      	b.n	8008330 <_printf_common+0xac>
 800831e:	2301      	movs	r3, #1
 8008320:	4652      	mov	r2, sl
 8008322:	4649      	mov	r1, r9
 8008324:	4638      	mov	r0, r7
 8008326:	47c0      	blx	r8
 8008328:	3001      	adds	r0, #1
 800832a:	d103      	bne.n	8008334 <_printf_common+0xb0>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	3501      	adds	r5, #1
 8008336:	e7c4      	b.n	80082c2 <_printf_common+0x3e>
 8008338:	2030      	movs	r0, #48	; 0x30
 800833a:	18e1      	adds	r1, r4, r3
 800833c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008346:	4422      	add	r2, r4
 8008348:	3302      	adds	r3, #2
 800834a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800834e:	e7c5      	b.n	80082dc <_printf_common+0x58>
 8008350:	2301      	movs	r3, #1
 8008352:	4622      	mov	r2, r4
 8008354:	4649      	mov	r1, r9
 8008356:	4638      	mov	r0, r7
 8008358:	47c0      	blx	r8
 800835a:	3001      	adds	r0, #1
 800835c:	d0e6      	beq.n	800832c <_printf_common+0xa8>
 800835e:	3601      	adds	r6, #1
 8008360:	e7d9      	b.n	8008316 <_printf_common+0x92>
	...

08008364 <_printf_i>:
 8008364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008368:	460c      	mov	r4, r1
 800836a:	7e27      	ldrb	r7, [r4, #24]
 800836c:	4691      	mov	r9, r2
 800836e:	2f78      	cmp	r7, #120	; 0x78
 8008370:	4680      	mov	r8, r0
 8008372:	469a      	mov	sl, r3
 8008374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800837a:	d807      	bhi.n	800838c <_printf_i+0x28>
 800837c:	2f62      	cmp	r7, #98	; 0x62
 800837e:	d80a      	bhi.n	8008396 <_printf_i+0x32>
 8008380:	2f00      	cmp	r7, #0
 8008382:	f000 80d9 	beq.w	8008538 <_printf_i+0x1d4>
 8008386:	2f58      	cmp	r7, #88	; 0x58
 8008388:	f000 80a4 	beq.w	80084d4 <_printf_i+0x170>
 800838c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008394:	e03a      	b.n	800840c <_printf_i+0xa8>
 8008396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800839a:	2b15      	cmp	r3, #21
 800839c:	d8f6      	bhi.n	800838c <_printf_i+0x28>
 800839e:	a001      	add	r0, pc, #4	; (adr r0, 80083a4 <_printf_i+0x40>)
 80083a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083a4:	080083fd 	.word	0x080083fd
 80083a8:	08008411 	.word	0x08008411
 80083ac:	0800838d 	.word	0x0800838d
 80083b0:	0800838d 	.word	0x0800838d
 80083b4:	0800838d 	.word	0x0800838d
 80083b8:	0800838d 	.word	0x0800838d
 80083bc:	08008411 	.word	0x08008411
 80083c0:	0800838d 	.word	0x0800838d
 80083c4:	0800838d 	.word	0x0800838d
 80083c8:	0800838d 	.word	0x0800838d
 80083cc:	0800838d 	.word	0x0800838d
 80083d0:	0800851f 	.word	0x0800851f
 80083d4:	08008441 	.word	0x08008441
 80083d8:	08008501 	.word	0x08008501
 80083dc:	0800838d 	.word	0x0800838d
 80083e0:	0800838d 	.word	0x0800838d
 80083e4:	08008541 	.word	0x08008541
 80083e8:	0800838d 	.word	0x0800838d
 80083ec:	08008441 	.word	0x08008441
 80083f0:	0800838d 	.word	0x0800838d
 80083f4:	0800838d 	.word	0x0800838d
 80083f8:	08008509 	.word	0x08008509
 80083fc:	680b      	ldr	r3, [r1, #0]
 80083fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008402:	1d1a      	adds	r2, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	600a      	str	r2, [r1, #0]
 8008408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800840c:	2301      	movs	r3, #1
 800840e:	e0a4      	b.n	800855a <_printf_i+0x1f6>
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	6808      	ldr	r0, [r1, #0]
 8008414:	062e      	lsls	r6, r5, #24
 8008416:	f100 0304 	add.w	r3, r0, #4
 800841a:	d50a      	bpl.n	8008432 <_printf_i+0xce>
 800841c:	6805      	ldr	r5, [r0, #0]
 800841e:	600b      	str	r3, [r1, #0]
 8008420:	2d00      	cmp	r5, #0
 8008422:	da03      	bge.n	800842c <_printf_i+0xc8>
 8008424:	232d      	movs	r3, #45	; 0x2d
 8008426:	426d      	negs	r5, r5
 8008428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842c:	230a      	movs	r3, #10
 800842e:	485e      	ldr	r0, [pc, #376]	; (80085a8 <_printf_i+0x244>)
 8008430:	e019      	b.n	8008466 <_printf_i+0x102>
 8008432:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008436:	6805      	ldr	r5, [r0, #0]
 8008438:	600b      	str	r3, [r1, #0]
 800843a:	bf18      	it	ne
 800843c:	b22d      	sxthne	r5, r5
 800843e:	e7ef      	b.n	8008420 <_printf_i+0xbc>
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	1d18      	adds	r0, r3, #4
 8008446:	6008      	str	r0, [r1, #0]
 8008448:	0628      	lsls	r0, r5, #24
 800844a:	d501      	bpl.n	8008450 <_printf_i+0xec>
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0xf2>
 8008450:	0669      	lsls	r1, r5, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0xe8>
 8008454:	881d      	ldrh	r5, [r3, #0]
 8008456:	2f6f      	cmp	r7, #111	; 0x6f
 8008458:	bf0c      	ite	eq
 800845a:	2308      	moveq	r3, #8
 800845c:	230a      	movne	r3, #10
 800845e:	4852      	ldr	r0, [pc, #328]	; (80085a8 <_printf_i+0x244>)
 8008460:	2100      	movs	r1, #0
 8008462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008466:	6866      	ldr	r6, [r4, #4]
 8008468:	2e00      	cmp	r6, #0
 800846a:	bfa8      	it	ge
 800846c:	6821      	ldrge	r1, [r4, #0]
 800846e:	60a6      	str	r6, [r4, #8]
 8008470:	bfa4      	itt	ge
 8008472:	f021 0104 	bicge.w	r1, r1, #4
 8008476:	6021      	strge	r1, [r4, #0]
 8008478:	b90d      	cbnz	r5, 800847e <_printf_i+0x11a>
 800847a:	2e00      	cmp	r6, #0
 800847c:	d04d      	beq.n	800851a <_printf_i+0x1b6>
 800847e:	4616      	mov	r6, r2
 8008480:	fbb5 f1f3 	udiv	r1, r5, r3
 8008484:	fb03 5711 	mls	r7, r3, r1, r5
 8008488:	5dc7      	ldrb	r7, [r0, r7]
 800848a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800848e:	462f      	mov	r7, r5
 8008490:	42bb      	cmp	r3, r7
 8008492:	460d      	mov	r5, r1
 8008494:	d9f4      	bls.n	8008480 <_printf_i+0x11c>
 8008496:	2b08      	cmp	r3, #8
 8008498:	d10b      	bne.n	80084b2 <_printf_i+0x14e>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	07df      	lsls	r7, r3, #31
 800849e:	d508      	bpl.n	80084b2 <_printf_i+0x14e>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	6861      	ldr	r1, [r4, #4]
 80084a4:	4299      	cmp	r1, r3
 80084a6:	bfde      	ittt	le
 80084a8:	2330      	movle	r3, #48	; 0x30
 80084aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084b2:	1b92      	subs	r2, r2, r6
 80084b4:	6122      	str	r2, [r4, #16]
 80084b6:	464b      	mov	r3, r9
 80084b8:	4621      	mov	r1, r4
 80084ba:	4640      	mov	r0, r8
 80084bc:	f8cd a000 	str.w	sl, [sp]
 80084c0:	aa03      	add	r2, sp, #12
 80084c2:	f7ff fedf 	bl	8008284 <_printf_common>
 80084c6:	3001      	adds	r0, #1
 80084c8:	d14c      	bne.n	8008564 <_printf_i+0x200>
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	b004      	add	sp, #16
 80084d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d4:	4834      	ldr	r0, [pc, #208]	; (80085a8 <_printf_i+0x244>)
 80084d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084da:	680e      	ldr	r6, [r1, #0]
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	f856 5b04 	ldr.w	r5, [r6], #4
 80084e2:	061f      	lsls	r7, r3, #24
 80084e4:	600e      	str	r6, [r1, #0]
 80084e6:	d514      	bpl.n	8008512 <_printf_i+0x1ae>
 80084e8:	07d9      	lsls	r1, r3, #31
 80084ea:	bf44      	itt	mi
 80084ec:	f043 0320 	orrmi.w	r3, r3, #32
 80084f0:	6023      	strmi	r3, [r4, #0]
 80084f2:	b91d      	cbnz	r5, 80084fc <_printf_i+0x198>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	f023 0320 	bic.w	r3, r3, #32
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	2310      	movs	r3, #16
 80084fe:	e7af      	b.n	8008460 <_printf_i+0xfc>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	f043 0320 	orr.w	r3, r3, #32
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	2378      	movs	r3, #120	; 0x78
 800850a:	4828      	ldr	r0, [pc, #160]	; (80085ac <_printf_i+0x248>)
 800850c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008510:	e7e3      	b.n	80084da <_printf_i+0x176>
 8008512:	065e      	lsls	r6, r3, #25
 8008514:	bf48      	it	mi
 8008516:	b2ad      	uxthmi	r5, r5
 8008518:	e7e6      	b.n	80084e8 <_printf_i+0x184>
 800851a:	4616      	mov	r6, r2
 800851c:	e7bb      	b.n	8008496 <_printf_i+0x132>
 800851e:	680b      	ldr	r3, [r1, #0]
 8008520:	6826      	ldr	r6, [r4, #0]
 8008522:	1d1d      	adds	r5, r3, #4
 8008524:	6960      	ldr	r0, [r4, #20]
 8008526:	600d      	str	r5, [r1, #0]
 8008528:	0635      	lsls	r5, r6, #24
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	d501      	bpl.n	8008532 <_printf_i+0x1ce>
 800852e:	6018      	str	r0, [r3, #0]
 8008530:	e002      	b.n	8008538 <_printf_i+0x1d4>
 8008532:	0671      	lsls	r1, r6, #25
 8008534:	d5fb      	bpl.n	800852e <_printf_i+0x1ca>
 8008536:	8018      	strh	r0, [r3, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	4616      	mov	r6, r2
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	e7ba      	b.n	80084b6 <_printf_i+0x152>
 8008540:	680b      	ldr	r3, [r1, #0]
 8008542:	1d1a      	adds	r2, r3, #4
 8008544:	600a      	str	r2, [r1, #0]
 8008546:	681e      	ldr	r6, [r3, #0]
 8008548:	2100      	movs	r1, #0
 800854a:	4630      	mov	r0, r6
 800854c:	6862      	ldr	r2, [r4, #4]
 800854e:	f000 f82f 	bl	80085b0 <memchr>
 8008552:	b108      	cbz	r0, 8008558 <_printf_i+0x1f4>
 8008554:	1b80      	subs	r0, r0, r6
 8008556:	6060      	str	r0, [r4, #4]
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	2300      	movs	r3, #0
 800855e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008562:	e7a8      	b.n	80084b6 <_printf_i+0x152>
 8008564:	4632      	mov	r2, r6
 8008566:	4649      	mov	r1, r9
 8008568:	4640      	mov	r0, r8
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	47d0      	blx	sl
 800856e:	3001      	adds	r0, #1
 8008570:	d0ab      	beq.n	80084ca <_printf_i+0x166>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	079b      	lsls	r3, r3, #30
 8008576:	d413      	bmi.n	80085a0 <_printf_i+0x23c>
 8008578:	68e0      	ldr	r0, [r4, #12]
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	4298      	cmp	r0, r3
 800857e:	bfb8      	it	lt
 8008580:	4618      	movlt	r0, r3
 8008582:	e7a4      	b.n	80084ce <_printf_i+0x16a>
 8008584:	2301      	movs	r3, #1
 8008586:	4632      	mov	r2, r6
 8008588:	4649      	mov	r1, r9
 800858a:	4640      	mov	r0, r8
 800858c:	47d0      	blx	sl
 800858e:	3001      	adds	r0, #1
 8008590:	d09b      	beq.n	80084ca <_printf_i+0x166>
 8008592:	3501      	adds	r5, #1
 8008594:	68e3      	ldr	r3, [r4, #12]
 8008596:	9903      	ldr	r1, [sp, #12]
 8008598:	1a5b      	subs	r3, r3, r1
 800859a:	42ab      	cmp	r3, r5
 800859c:	dcf2      	bgt.n	8008584 <_printf_i+0x220>
 800859e:	e7eb      	b.n	8008578 <_printf_i+0x214>
 80085a0:	2500      	movs	r5, #0
 80085a2:	f104 0619 	add.w	r6, r4, #25
 80085a6:	e7f5      	b.n	8008594 <_printf_i+0x230>
 80085a8:	080093ed 	.word	0x080093ed
 80085ac:	080093fe 	.word	0x080093fe

080085b0 <memchr>:
 80085b0:	4603      	mov	r3, r0
 80085b2:	b510      	push	{r4, lr}
 80085b4:	b2c9      	uxtb	r1, r1
 80085b6:	4402      	add	r2, r0
 80085b8:	4293      	cmp	r3, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	d101      	bne.n	80085c2 <memchr+0x12>
 80085be:	2000      	movs	r0, #0
 80085c0:	e003      	b.n	80085ca <memchr+0x1a>
 80085c2:	7804      	ldrb	r4, [r0, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	428c      	cmp	r4, r1
 80085c8:	d1f6      	bne.n	80085b8 <memchr+0x8>
 80085ca:	bd10      	pop	{r4, pc}

080085cc <memmove>:
 80085cc:	4288      	cmp	r0, r1
 80085ce:	b510      	push	{r4, lr}
 80085d0:	eb01 0402 	add.w	r4, r1, r2
 80085d4:	d902      	bls.n	80085dc <memmove+0x10>
 80085d6:	4284      	cmp	r4, r0
 80085d8:	4623      	mov	r3, r4
 80085da:	d807      	bhi.n	80085ec <memmove+0x20>
 80085dc:	1e43      	subs	r3, r0, #1
 80085de:	42a1      	cmp	r1, r4
 80085e0:	d008      	beq.n	80085f4 <memmove+0x28>
 80085e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ea:	e7f8      	b.n	80085de <memmove+0x12>
 80085ec:	4601      	mov	r1, r0
 80085ee:	4402      	add	r2, r0
 80085f0:	428a      	cmp	r2, r1
 80085f2:	d100      	bne.n	80085f6 <memmove+0x2a>
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fe:	e7f7      	b.n	80085f0 <memmove+0x24>

08008600 <_free_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4605      	mov	r5, r0
 8008604:	2900      	cmp	r1, #0
 8008606:	d043      	beq.n	8008690 <_free_r+0x90>
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f0c      	subs	r4, r1, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfb8      	it	lt
 8008612:	18e4      	addlt	r4, r4, r3
 8008614:	f000 f8d0 	bl	80087b8 <__malloc_lock>
 8008618:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <_free_r+0x94>)
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	4610      	mov	r0, r2
 800861e:	b933      	cbnz	r3, 800862e <_free_r+0x2e>
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	6014      	str	r4, [r2, #0]
 8008624:	4628      	mov	r0, r5
 8008626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862a:	f000 b8cb 	b.w	80087c4 <__malloc_unlock>
 800862e:	42a3      	cmp	r3, r4
 8008630:	d90a      	bls.n	8008648 <_free_r+0x48>
 8008632:	6821      	ldr	r1, [r4, #0]
 8008634:	1862      	adds	r2, r4, r1
 8008636:	4293      	cmp	r3, r2
 8008638:	bf01      	itttt	eq
 800863a:	681a      	ldreq	r2, [r3, #0]
 800863c:	685b      	ldreq	r3, [r3, #4]
 800863e:	1852      	addeq	r2, r2, r1
 8008640:	6022      	streq	r2, [r4, #0]
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	6004      	str	r4, [r0, #0]
 8008646:	e7ed      	b.n	8008624 <_free_r+0x24>
 8008648:	461a      	mov	r2, r3
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	b10b      	cbz	r3, 8008652 <_free_r+0x52>
 800864e:	42a3      	cmp	r3, r4
 8008650:	d9fa      	bls.n	8008648 <_free_r+0x48>
 8008652:	6811      	ldr	r1, [r2, #0]
 8008654:	1850      	adds	r0, r2, r1
 8008656:	42a0      	cmp	r0, r4
 8008658:	d10b      	bne.n	8008672 <_free_r+0x72>
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	4401      	add	r1, r0
 800865e:	1850      	adds	r0, r2, r1
 8008660:	4283      	cmp	r3, r0
 8008662:	6011      	str	r1, [r2, #0]
 8008664:	d1de      	bne.n	8008624 <_free_r+0x24>
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4401      	add	r1, r0
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e7d8      	b.n	8008624 <_free_r+0x24>
 8008672:	d902      	bls.n	800867a <_free_r+0x7a>
 8008674:	230c      	movs	r3, #12
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	e7d4      	b.n	8008624 <_free_r+0x24>
 800867a:	6820      	ldr	r0, [r4, #0]
 800867c:	1821      	adds	r1, r4, r0
 800867e:	428b      	cmp	r3, r1
 8008680:	bf01      	itttt	eq
 8008682:	6819      	ldreq	r1, [r3, #0]
 8008684:	685b      	ldreq	r3, [r3, #4]
 8008686:	1809      	addeq	r1, r1, r0
 8008688:	6021      	streq	r1, [r4, #0]
 800868a:	6063      	str	r3, [r4, #4]
 800868c:	6054      	str	r4, [r2, #4]
 800868e:	e7c9      	b.n	8008624 <_free_r+0x24>
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	bf00      	nop
 8008694:	200025a4 	.word	0x200025a4

08008698 <_malloc_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	1ccd      	adds	r5, r1, #3
 800869c:	f025 0503 	bic.w	r5, r5, #3
 80086a0:	3508      	adds	r5, #8
 80086a2:	2d0c      	cmp	r5, #12
 80086a4:	bf38      	it	cc
 80086a6:	250c      	movcc	r5, #12
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	4606      	mov	r6, r0
 80086ac:	db01      	blt.n	80086b2 <_malloc_r+0x1a>
 80086ae:	42a9      	cmp	r1, r5
 80086b0:	d903      	bls.n	80086ba <_malloc_r+0x22>
 80086b2:	230c      	movs	r3, #12
 80086b4:	6033      	str	r3, [r6, #0]
 80086b6:	2000      	movs	r0, #0
 80086b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ba:	f000 f87d 	bl	80087b8 <__malloc_lock>
 80086be:	4921      	ldr	r1, [pc, #132]	; (8008744 <_malloc_r+0xac>)
 80086c0:	680a      	ldr	r2, [r1, #0]
 80086c2:	4614      	mov	r4, r2
 80086c4:	b99c      	cbnz	r4, 80086ee <_malloc_r+0x56>
 80086c6:	4f20      	ldr	r7, [pc, #128]	; (8008748 <_malloc_r+0xb0>)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	b923      	cbnz	r3, 80086d6 <_malloc_r+0x3e>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 f862 	bl	8008798 <_sbrk_r>
 80086d4:	6038      	str	r0, [r7, #0]
 80086d6:	4629      	mov	r1, r5
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f85d 	bl	8008798 <_sbrk_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d123      	bne.n	800872a <_malloc_r+0x92>
 80086e2:	230c      	movs	r3, #12
 80086e4:	4630      	mov	r0, r6
 80086e6:	6033      	str	r3, [r6, #0]
 80086e8:	f000 f86c 	bl	80087c4 <__malloc_unlock>
 80086ec:	e7e3      	b.n	80086b6 <_malloc_r+0x1e>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	1b5b      	subs	r3, r3, r5
 80086f2:	d417      	bmi.n	8008724 <_malloc_r+0x8c>
 80086f4:	2b0b      	cmp	r3, #11
 80086f6:	d903      	bls.n	8008700 <_malloc_r+0x68>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	441c      	add	r4, r3
 80086fc:	6025      	str	r5, [r4, #0]
 80086fe:	e004      	b.n	800870a <_malloc_r+0x72>
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	42a2      	cmp	r2, r4
 8008704:	bf0c      	ite	eq
 8008706:	600b      	streq	r3, [r1, #0]
 8008708:	6053      	strne	r3, [r2, #4]
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f85a 	bl	80087c4 <__malloc_unlock>
 8008710:	f104 000b 	add.w	r0, r4, #11
 8008714:	1d23      	adds	r3, r4, #4
 8008716:	f020 0007 	bic.w	r0, r0, #7
 800871a:	1ac2      	subs	r2, r0, r3
 800871c:	d0cc      	beq.n	80086b8 <_malloc_r+0x20>
 800871e:	1a1b      	subs	r3, r3, r0
 8008720:	50a3      	str	r3, [r4, r2]
 8008722:	e7c9      	b.n	80086b8 <_malloc_r+0x20>
 8008724:	4622      	mov	r2, r4
 8008726:	6864      	ldr	r4, [r4, #4]
 8008728:	e7cc      	b.n	80086c4 <_malloc_r+0x2c>
 800872a:	1cc4      	adds	r4, r0, #3
 800872c:	f024 0403 	bic.w	r4, r4, #3
 8008730:	42a0      	cmp	r0, r4
 8008732:	d0e3      	beq.n	80086fc <_malloc_r+0x64>
 8008734:	1a21      	subs	r1, r4, r0
 8008736:	4630      	mov	r0, r6
 8008738:	f000 f82e 	bl	8008798 <_sbrk_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d1dd      	bne.n	80086fc <_malloc_r+0x64>
 8008740:	e7cf      	b.n	80086e2 <_malloc_r+0x4a>
 8008742:	bf00      	nop
 8008744:	200025a4 	.word	0x200025a4
 8008748:	200025a8 	.word	0x200025a8

0800874c <_realloc_r>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	4607      	mov	r7, r0
 8008750:	4614      	mov	r4, r2
 8008752:	460e      	mov	r6, r1
 8008754:	b921      	cbnz	r1, 8008760 <_realloc_r+0x14>
 8008756:	4611      	mov	r1, r2
 8008758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800875c:	f7ff bf9c 	b.w	8008698 <_malloc_r>
 8008760:	b922      	cbnz	r2, 800876c <_realloc_r+0x20>
 8008762:	f7ff ff4d 	bl	8008600 <_free_r>
 8008766:	4625      	mov	r5, r4
 8008768:	4628      	mov	r0, r5
 800876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876c:	f000 f830 	bl	80087d0 <_malloc_usable_size_r>
 8008770:	42a0      	cmp	r0, r4
 8008772:	d20f      	bcs.n	8008794 <_realloc_r+0x48>
 8008774:	4621      	mov	r1, r4
 8008776:	4638      	mov	r0, r7
 8008778:	f7ff ff8e 	bl	8008698 <_malloc_r>
 800877c:	4605      	mov	r5, r0
 800877e:	2800      	cmp	r0, #0
 8008780:	d0f2      	beq.n	8008768 <_realloc_r+0x1c>
 8008782:	4631      	mov	r1, r6
 8008784:	4622      	mov	r2, r4
 8008786:	f7ff fbeb 	bl	8007f60 <memcpy>
 800878a:	4631      	mov	r1, r6
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff ff37 	bl	8008600 <_free_r>
 8008792:	e7e9      	b.n	8008768 <_realloc_r+0x1c>
 8008794:	4635      	mov	r5, r6
 8008796:	e7e7      	b.n	8008768 <_realloc_r+0x1c>

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	2300      	movs	r3, #0
 800879c:	4d05      	ldr	r5, [pc, #20]	; (80087b4 <_sbrk_r+0x1c>)
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 f8ae 	bl	8001904 <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20002bf4 	.word	0x20002bf4

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_lock+0x8>)
 80087ba:	f000 b811 	b.w	80087e0 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	20002bfc 	.word	0x20002bfc

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__malloc_unlock+0x8>)
 80087c6:	f000 b80c 	b.w	80087e2 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	20002bfc 	.word	0x20002bfc

080087d0 <_malloc_usable_size_r>:
 80087d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d4:	1f18      	subs	r0, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbc      	itt	lt
 80087da:	580b      	ldrlt	r3, [r1, r0]
 80087dc:	18c0      	addlt	r0, r0, r3
 80087de:	4770      	bx	lr

080087e0 <__retarget_lock_acquire_recursive>:
 80087e0:	4770      	bx	lr

080087e2 <__retarget_lock_release_recursive>:
 80087e2:	4770      	bx	lr

080087e4 <_init>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr

080087f0 <_fini>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr
