
MDP_Hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006d14  08006d14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d14  08006d14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029e0  20000074  08006d90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a54  08006d90  00022a54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016807  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304e  00000000  00000000  000368a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000398f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000307d  00000000  00000000  0003bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fda  00000000  00000000  0003ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff1a  00000000  00000000  00052be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  000f2b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08006104 	.word	0x08006104

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08006104 	.word	0x08006104

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fd2a 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f856 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f9e2 	bl	8000604 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000240:	f000 f936 	bl	80004b0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000244:	f000 f88c 	bl	8000360 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000248:	f000 f8de 	bl	8000408 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800024c:	f005 fa62 	bl	8005714 <OLED_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000250:	f002 fbe4 	bl	8002a1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <main+0x7c>)
 8000256:	2100      	movs	r1, #0
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <main+0x80>)
 800025a:	f002 fc45 	bl	8002ae8 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <main+0x84>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of OLED_Display */
  OLED_DisplayHandle = osThreadNew(OLED, NULL, &OLED_Display_attributes);
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <main+0x88>)
 8000266:	2100      	movs	r1, #0
 8000268:	4814      	ldr	r0, [pc, #80]	; (80002bc <main+0x8c>)
 800026a:	f002 fc3d 	bl	8002ae8 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <main+0x90>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <main+0x94>)
 8000276:	2100      	movs	r1, #0
 8000278:	4813      	ldr	r0, [pc, #76]	; (80002c8 <main+0x98>)
 800027a:	f002 fc35 	bl	8002ae8 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a12      	ldr	r2, [pc, #72]	; (80002cc <main+0x9c>)
 8000282:	6013      	str	r3, [r2, #0]

  /* creation of EncoderA */
  EncoderAHandle = osThreadNew(encoderA, NULL, &EncoderA_attributes);
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <main+0xa0>)
 8000286:	2100      	movs	r1, #0
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <main+0xa4>)
 800028a:	f002 fc2d 	bl	8002ae8 <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <main+0xa8>)
 8000292:	6013      	str	r3, [r2, #0]

  /* creation of EncoderC */
  EncoderCHandle = osThreadNew(encoderC, NULL, &EncoderC_attributes);
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <main+0xac>)
 8000296:	2100      	movs	r1, #0
 8000298:	4811      	ldr	r0, [pc, #68]	; (80002e0 <main+0xb0>)
 800029a:	f002 fc25 	bl	8002ae8 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <main+0xb4>)
 80002a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f002 fbec 	bl	8002a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x78>
 80002aa:	bf00      	nop
 80002ac:	080061b8 	.word	0x080061b8
 80002b0:	08000725 	.word	0x08000725
 80002b4:	20002518 	.word	0x20002518
 80002b8:	080061dc 	.word	0x080061dc
 80002bc:	08000735 	.word	0x08000735
 80002c0:	20002514 	.word	0x20002514
 80002c4:	08006200 	.word	0x08006200
 80002c8:	08000771 	.word	0x08000771
 80002cc:	200025ac 	.word	0x200025ac
 80002d0:	08006224 	.word	0x08006224
 80002d4:	080007e1 	.word	0x080007e1
 80002d8:	200025b0 	.word	0x200025b0
 80002dc:	08006248 	.word	0x08006248
 80002e0:	0800089d 	.word	0x0800089d
 80002e4:	200025b4 	.word	0x200025b4

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 fad0 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000316:	2300      	movs	r3, #0
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ffe2 	bl	80012e8 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032a:	f000 fb15 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fa4e 	bl	80017e8 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 fb01 	bl	8000958 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08c      	sub	sp, #48	; 0x30
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2224      	movs	r2, #36	; 0x24
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f005 fa94 	bl	800589c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_TIM2_Init+0xa4>)
 800037e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <MX_TIM2_Init+0xa4>)
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_TIM2_Init+0xa4>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_TIM2_Init+0xa4>)
 8000392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000398:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_TIM2_Init+0xa4>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM2_Init+0xa4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003a4:	2303      	movs	r3, #3
 80003a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80003b4:	230a      	movs	r3, #10
 80003b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003bc:	2301      	movs	r3, #1
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80003c4:	230a      	movs	r3, #10
 80003c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003c8:	f107 030c 	add.w	r3, r7, #12
 80003cc:	4619      	mov	r1, r3
 80003ce:	480d      	ldr	r0, [pc, #52]	; (8000404 <MX_TIM2_Init+0xa4>)
 80003d0:	f001 fcd4 	bl	8001d7c <HAL_TIM_Encoder_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003da:	f000 fabd 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <MX_TIM2_Init+0xa4>)
 80003ec:	f002 fa58 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003f6:	f000 faaf 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	3730      	adds	r7, #48	; 0x30
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200025b8 	.word	0x200025b8

08000408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08c      	sub	sp, #48	; 0x30
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	2224      	movs	r2, #36	; 0x24
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f005 fa40 	bl	800589c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <MX_TIM4_Init+0xa4>)
 8000428:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_TIM4_Init+0xa0>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800043c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800044a:	2303      	movs	r3, #3
 800044c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800045a:	230a      	movs	r3, #10
 800045c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000462:	2301      	movs	r3, #1
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800046a:	230a      	movs	r3, #10
 800046c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	4619      	mov	r1, r3
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000476:	f001 fc81 	bl	8001d7c <HAL_TIM_Encoder_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000480:	f000 fa6a 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_TIM4_Init+0xa0>)
 8000492:	f002 fa05 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800049c:	f000 fa5c 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3730      	adds	r7, #48	; 0x30
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20002564 	.word	0x20002564
 80004ac:	40000800 	.word	0x40000800

080004b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2220      	movs	r2, #32
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f005 f9d7 	bl	800589c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <MX_TIM8_Init+0x14c>)
 80004f0:	4a43      	ldr	r2, [pc, #268]	; (8000600 <MX_TIM8_Init+0x150>)
 80004f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80004f4:	4b41      	ldr	r3, [pc, #260]	; (80005fc <MX_TIM8_Init+0x14c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <MX_TIM8_Init+0x14c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000500:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000502:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000506:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <MX_TIM8_Init+0x14c>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800050e:	4b3b      	ldr	r3, [pc, #236]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000514:	4b39      	ldr	r3, [pc, #228]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800051a:	4838      	ldr	r0, [pc, #224]	; (80005fc <MX_TIM8_Init+0x14c>)
 800051c:	f001 facc 	bl	8001ab8 <HAL_TIM_Base_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000526:	f000 fa17 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000534:	4619      	mov	r1, r3
 8000536:	4831      	ldr	r0, [pc, #196]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000538:	f001 fe0e 	bl	8002158 <HAL_TIM_ConfigClockSource>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000542:	f000 fa09 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000546:	482d      	ldr	r0, [pc, #180]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000548:	f001 fb05 	bl	8001b56 <HAL_TIM_PWM_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000552:	f000 fa01 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800055e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000562:	4619      	mov	r1, r3
 8000564:	4825      	ldr	r0, [pc, #148]	; (80005fc <MX_TIM8_Init+0x14c>)
 8000566:	f002 f99b 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000570:	f000 f9f2 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <MX_TIM8_Init+0x14c>)
 800059a:	f001 fd1f 	bl	8001fdc <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80005a4:	f000 f9d8 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	2208      	movs	r2, #8
 80005ae:	4619      	mov	r1, r3
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <MX_TIM8_Init+0x14c>)
 80005b2:	f001 fd13 	bl	8001fdc <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80005bc:	f000 f9cc 	bl	8000958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <MX_TIM8_Init+0x14c>)
 80005e4:	f002 f9c8 	bl	8002978 <HAL_TIMEx_ConfigBreakDeadTime>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80005ee:	f000 f9b3 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	; 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000251c 	.word	0x2000251c
 8000600:	40013400 	.word	0x40013400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_GPIO_Init+0x110>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <MX_GPIO_Init+0x110>)
 800061e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <MX_GPIO_Init+0x110>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <MX_GPIO_Init+0x110>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a37      	ldr	r2, [pc, #220]	; (8000714 <MX_GPIO_Init+0x110>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b35      	ldr	r3, [pc, #212]	; (8000714 <MX_GPIO_Init+0x110>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <MX_GPIO_Init+0x110>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a31      	ldr	r2, [pc, #196]	; (8000714 <MX_GPIO_Init+0x110>)
 800064e:	f043 0310 	orr.w	r3, r3, #16
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <MX_GPIO_Init+0x110>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0310 	and.w	r3, r3, #16
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_GPIO_Init+0x110>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <MX_GPIO_Init+0x110>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_GPIO_Init+0x110>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 518f 	mov.w	r1, #4576	; 0x11e0
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <MX_GPIO_Init+0x114>)
 8000680:	f000 fe02 	bl	8001288 <HAL_GPIO_WritePin>
                          |CIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	210c      	movs	r1, #12
 8000688:	4824      	ldr	r0, [pc, #144]	; (800071c <MX_GPIO_Init+0x118>)
 800068a:	f000 fdfd 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	4823      	ldr	r0, [pc, #140]	; (8000720 <MX_GPIO_Init+0x11c>)
 8000694:	f000 fdf8 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 8000698:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <MX_GPIO_Init+0x114>)
 80006b2:	f000 fc55 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 80006b6:	230c      	movs	r3, #12
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_GPIO_Init+0x118>)
 80006ce:	f000 fc47 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN2_Pin */
  GPIO_InitStruct.Pin = CIN2_Pin;
 80006d2:	2320      	movs	r3, #32
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_GPIO_Init+0x11c>)
 80006ea:	f000 fc39 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN1_Pin */
  GPIO_InitStruct.Pin = CIN1_Pin;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CIN1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0x114>)
 8000708:	f000 fc2a 	bl	8000f60 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40011800 	.word	0x40011800
 800071c:	40010800 	.word	0x40010800
 8000720:	40011000 	.word	0x40011000

08000724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f002 fa85 	bl	8002c3c <osDelay>
 8000732:	e7fb      	b.n	800072c <StartDefaultTask+0x8>

08000734 <OLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLED */
void OLED(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLED */
	uint8_t initialMessage[20] = "Started!\0";
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <OLED+0x38>)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	ca07      	ldmia	r2, {r0, r1, r2}
 8000744:	c303      	stmia	r3!, {r0, r1}
 8000746:	801a      	strh	r2, [r3, #0]
 8000748:	f107 0316 	add.w	r3, r7, #22
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	811a      	strh	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  OLED_ShowString(10, 10, initialMessage);
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	461a      	mov	r2, r3
 800075a:	210a      	movs	r1, #10
 800075c:	200a      	movs	r0, #10
 800075e:	f004 ffa7 	bl	80056b0 <OLED_ShowString>

    osDelay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f002 fa6a 	bl	8002c3c <osDelay>
	  OLED_ShowString(10, 10, initialMessage);
 8000768:	e7f4      	b.n	8000754 <OLED+0x20>
 800076a:	bf00      	nop
 800076c:	0800615c 	.word	0x0800615c

08000770 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t speed = 1000;
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800077e:	2100      	movs	r1, #0
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <motor+0x60>)
 8000782:	f001 fa41 	bl	8001c08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000786:	2108      	movs	r1, #8
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <motor+0x60>)
 800078a:	f001 fa3d 	bl	8001c08 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <motor+0x64>)
 8000794:	f000 fd78 	bl	8001288 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <motor+0x68>)
 800079e:	f000 fd73 	bl	8001288 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <motor+0x64>)
 80007a8:	f000 fd6e 	bl	8001288 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <motor+0x6c>)
 80007b4:	f000 fd68 	bl	8001288 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speed);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <motor+0x60>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	89fa      	ldrh	r2, [r7, #14]
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, speed);
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <motor+0x60>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	89fa      	ldrh	r2, [r7, #14]
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f002 fa37 	bl	8002c3c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80007ce:	e7de      	b.n	800078e <motor+0x1e>
 80007d0:	2000251c 	.word	0x2000251c
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40011000 	.word	0x40011000
 80007dc:	40011800 	.word	0x40011800

080007e0 <encoderA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderA */
void encoderA(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderA */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007e8:	213c      	movs	r1, #60	; 0x3c
 80007ea:	482a      	ldr	r0, [pc, #168]	; (8000894 <encoderA+0xb4>)
 80007ec:	f001 fb68 	bl	8001ec0 <HAL_TIM_Encoder_Start>
	int cnt1, cnt2, diff;
	uint32_t tick;
	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <encoderA+0xb4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
	tick = HAL_GetTick();
 80007f8:	f000 faa0 	bl	8000d3c <HAL_GetTick>
 80007fc:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t messageA[30];

  /* Infinite loop */
  for(;;)
  {
		 if(HAL_GetTick() - tick > 1000L){
 80007fe:	f000 fa9d 	bl	8000d3c <HAL_GetTick>
 8000802:	4602      	mov	r2, r0
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800080c:	d9f7      	bls.n	80007fe <encoderA+0x1e>
			 cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <encoderA+0xb4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <encoderA+0xb4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	2b10      	cmp	r3, #16
 8000822:	d110      	bne.n	8000846 <encoderA+0x66>
				 if(cnt2 < cnt1)
 8000824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000828:	429a      	cmp	r2, r3
 800082a:	da04      	bge.n	8000836 <encoderA+0x56>
					 diff = cnt1 - cnt2;
 800082c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
 8000834:	e017      	b.n	8000866 <encoderA+0x86>
				 else
					 diff = (65535 - cnt2) + cnt1;
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800083c:	33ff      	adds	r3, #255	; 0xff
 800083e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000840:	4413      	add	r3, r2
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
 8000844:	e00f      	b.n	8000866 <encoderA+0x86>
			 }
			 else{
				 if(cnt1 < cnt2)
 8000846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	429a      	cmp	r2, r3
 800084c:	da04      	bge.n	8000858 <encoderA+0x78>
					 diff = cnt2 - cnt1;
 800084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
 8000856:	e006      	b.n	8000866 <encoderA+0x86>
				 else
					 diff = (65535 - cnt1) + cnt2;
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800085e:	33ff      	adds	r3, #255	; 0xff
 8000860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000862:	4413      	add	r3, r2
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
			 }
			 sprintf(messageA, "Speed (A):%5d\0", diff);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800086c:	490a      	ldr	r1, [pc, #40]	; (8000898 <encoderA+0xb8>)
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f81c 	bl	80058ac <siprintf>
			 OLED_ShowString(10, 20, messageA);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	461a      	mov	r2, r3
 800087a:	2114      	movs	r1, #20
 800087c:	200a      	movs	r0, #10
 800087e:	f004 ff17 	bl	80056b0 <OLED_ShowString>
			 cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <encoderA+0xb4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
			 tick = HAL_GetTick();
 800088a:	f000 fa57 	bl	8000d3c <HAL_GetTick>
 800088e:	62f8      	str	r0, [r7, #44]	; 0x2c
		 if(HAL_GetTick() - tick > 1000L){
 8000890:	e7b5      	b.n	80007fe <encoderA+0x1e>
 8000892:	bf00      	nop
 8000894:	200025b8 	.word	0x200025b8
 8000898:	08006170 	.word	0x08006170

0800089c <encoderC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderC */
void encoderC(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderC */
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80008a4:	213c      	movs	r1, #60	; 0x3c
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <encoderC+0xb4>)
 80008a8:	f001 fb0a 	bl	8001ec0 <HAL_TIM_Encoder_Start>
	int cnt1, cnt2, diff;
	uint32_t tick;
	cnt1 = __HAL_TIM_GET_COUNTER(&htim4);
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <encoderC+0xb4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
	tick = HAL_GetTick();
 80008b4:	f000 fa42 	bl	8000d3c <HAL_GetTick>
 80008b8:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t messageC[30];

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GetTick() - tick > 1000L){
 80008ba:	f000 fa3f 	bl	8000d3c <HAL_GetTick>
 80008be:	4602      	mov	r2, r0
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c8:	d9f7      	bls.n	80008ba <encoderC+0x1e>
	  		cnt2 = __HAL_TIM_GET_COUNTER(&htim4);
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <encoderC+0xb4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
	  			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)){
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <encoderC+0xb4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	2b10      	cmp	r3, #16
 80008de:	d110      	bne.n	8000902 <encoderC+0x66>
	  				 if(cnt2 < cnt1)
 80008e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	429a      	cmp	r2, r3
 80008e6:	da04      	bge.n	80008f2 <encoderC+0x56>
	  					 diff = cnt1 - cnt2;
 80008e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
 80008f0:	e017      	b.n	8000922 <encoderC+0x86>
	  				 else
	  					 diff = (65535 - cnt2) + cnt1;
 80008f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80008f8:	33ff      	adds	r3, #255	; 0xff
 80008fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008fc:	4413      	add	r3, r2
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000900:	e00f      	b.n	8000922 <encoderC+0x86>
	  			 }
	  			 else{
	  				 if(cnt1 < cnt2)
 8000902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	429a      	cmp	r2, r3
 8000908:	da04      	bge.n	8000914 <encoderC+0x78>
	  					 diff = cnt2 - cnt1;
 800090a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800090c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
 8000912:	e006      	b.n	8000922 <encoderC+0x86>
	  				 else
	  					 diff = (65535 - cnt1) + cnt2;
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800091a:	33ff      	adds	r3, #255	; 0xff
 800091c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800091e:	4413      	add	r3, r2
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
	  			 }
	  			 sprintf(messageC, "Speed (C):%5d\0", diff);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000928:	490a      	ldr	r1, [pc, #40]	; (8000954 <encoderC+0xb8>)
 800092a:	4618      	mov	r0, r3
 800092c:	f004 ffbe 	bl	80058ac <siprintf>
	  			 OLED_ShowString(10, 30, messageC);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	461a      	mov	r2, r3
 8000936:	211e      	movs	r1, #30
 8000938:	200a      	movs	r0, #10
 800093a:	f004 feb9 	bl	80056b0 <OLED_ShowString>
	  			 cnt1 = __HAL_TIM_GET_COUNTER(&htim4);
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <encoderC+0xb4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
	  			 tick = HAL_GetTick();
 8000946:	f000 f9f9 	bl	8000d3c <HAL_GetTick>
 800094a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  if(HAL_GetTick() - tick > 1000L){
 800094c:	e7b5      	b.n	80008ba <encoderC+0x1e>
 800094e:	bf00      	nop
 8000950:	20002564 	.word	0x20002564
 8000954:	08006180 	.word	0x08006180

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_MspInit+0x68>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_MspInit+0x68>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_MspInit+0x68>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_MspInit+0x68>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <HAL_MspInit+0x68>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x68>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fab4 	bl	8000f0e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_MspInit+0x6c>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_MspInit+0x6c>)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010000 	.word	0x40010000

080009d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f2:	d14f      	bne.n	8000a94 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	61d3      	str	r3, [r2, #28]
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <HAL_TIM_Encoder_MspInit+0x120>)
 8000a52:	f000 fa85 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a56:	2308      	movs	r3, #8
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000a6a:	f000 fa79 	bl	8000f60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_TIM_Encoder_MspInit+0x128>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_TIM_Encoder_MspInit+0x128>)
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a92:	e028      	b.n	8000ae6 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM4)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ace:	23c0      	movs	r3, #192	; 0xc0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ae2:	f000 fa3d 	bl	8000f60 <HAL_GPIO_Init>
}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40000800 	.word	0x40000800

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM8)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_TIM_Base_MspInit+0x74>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d124      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_TIM_Base_MspInit+0x78>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMC_Pin;
 8000b54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_TIM_Base_MspInit+0x7c>)
 8000b6a:	f000 f9f9 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013400 	.word	0x40013400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40011000 	.word	0x40011000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f8b1 	bl	8000d18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb6:	f003 fc4d 	bl	8004454 <xTaskGetSchedulerState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d001      	beq.n	8000bc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc0:	f004 f9aa 	bl	8004f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 fe18 	bl	800582c <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20010000 	.word	0x20010000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000090 	.word	0x20000090
 8000c30:	20002a58 	.word	0x20002a58

08000c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c66:	f7ff ffe5 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fde5 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6e:	f7ff fadf 	bl	8000230 <main>
  bx lr
 8000c72:	4770      	bx	lr
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c7c:	08006d1c 	.word	0x08006d1c
  ldr r2, =_sbss
 8000c80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c84:	20002a54 	.word	0x20002a54

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f92b 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe5c 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f935 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f90b 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x20>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20002600 	.word	0x20002600

08000d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <HAL_GetTick+0x10>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20002600 	.word	0x20002600

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff fff0 	bl	8000d3c <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffe0 	bl	8000d3c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff90 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff49 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e179      	b.n	8001268 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8168 	bne.w	8001262 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4aa0      	ldr	r2, [pc, #640]	; (8001218 <HAL_GPIO_Init+0x2b8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d05e      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a9e      	ldr	r2, [pc, #632]	; (8001218 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d875      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fa2:	4a9e      	ldr	r2, [pc, #632]	; (800121c <HAL_GPIO_Init+0x2bc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d058      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fa8:	4a9c      	ldr	r2, [pc, #624]	; (800121c <HAL_GPIO_Init+0x2bc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d86f      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fae:	4a9c      	ldr	r2, [pc, #624]	; (8001220 <HAL_GPIO_Init+0x2c0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d052      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fb4:	4a9a      	ldr	r2, [pc, #616]	; (8001220 <HAL_GPIO_Init+0x2c0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d869      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fba:	4a9a      	ldr	r2, [pc, #616]	; (8001224 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d04c      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fc0:	4a98      	ldr	r2, [pc, #608]	; (8001224 <HAL_GPIO_Init+0x2c4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d863      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fc6:	4a98      	ldr	r2, [pc, #608]	; (8001228 <HAL_GPIO_Init+0x2c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d046      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a96      	ldr	r2, [pc, #600]	; (8001228 <HAL_GPIO_Init+0x2c8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d85d      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d82a      	bhi.n	800102c <HAL_GPIO_Init+0xcc>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d859      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <HAL_GPIO_Init+0x80>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	0800108f 	.word	0x0800108f
 8000ff4:	0800108f 	.word	0x0800108f
 8000ff8:	0800108f 	.word	0x0800108f
 8000ffc:	0800108f 	.word	0x0800108f
 8001000:	0800108f 	.word	0x0800108f
 8001004:	0800108f 	.word	0x0800108f
 8001008:	0800108f 	.word	0x0800108f
 800100c:	0800108f 	.word	0x0800108f
 8001010:	0800108f 	.word	0x0800108f
 8001014:	0800108f 	.word	0x0800108f
 8001018:	0800108f 	.word	0x0800108f
 800101c:	0800108f 	.word	0x0800108f
 8001020:	0800108f 	.word	0x0800108f
 8001024:	0800103d 	.word	0x0800103d
 8001028:	08001051 	.word	0x08001051
 800102c:	4a7f      	ldr	r2, [pc, #508]	; (800122c <HAL_GPIO_Init+0x2cc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001032:	e02c      	b.n	800108e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e029      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	3304      	adds	r3, #4
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e024      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e01f      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	330c      	adds	r3, #12
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e01a      	b.n	8001090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e013      	b.n	8001090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]
          break;
 800107a:	e009      	b.n	8001090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	615a      	str	r2, [r3, #20]
          break;
 8001086:	e003      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x130>
          break;
 800108e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	; 0xff
 8001094:	d801      	bhi.n	800109a <HAL_GPIO_Init+0x13a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e001      	b.n	800109e <HAL_GPIO_Init+0x13e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2bff      	cmp	r3, #255	; 0xff
 80010a4:	d802      	bhi.n	80010ac <HAL_GPIO_Init+0x14c>
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x152>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3b08      	subs	r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	210f      	movs	r1, #15
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	6a39      	ldr	r1, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80c1 	beq.w	8001262 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b50      	ldr	r3, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x2d4>)
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a46      	ldr	r2, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x2d8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d01f      	beq.n	8001164 <HAL_GPIO_Init+0x204>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_GPIO_Init+0x2dc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d019      	beq.n	8001160 <HAL_GPIO_Init+0x200>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d013      	beq.n	800115c <HAL_GPIO_Init+0x1fc>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a43      	ldr	r2, [pc, #268]	; (8001244 <HAL_GPIO_Init+0x2e4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d00d      	beq.n	8001158 <HAL_GPIO_Init+0x1f8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_GPIO_Init+0x2e8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d007      	beq.n	8001154 <HAL_GPIO_Init+0x1f4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a41      	ldr	r2, [pc, #260]	; (800124c <HAL_GPIO_Init+0x2ec>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d101      	bne.n	8001150 <HAL_GPIO_Init+0x1f0>
 800114c:	2305      	movs	r3, #5
 800114e:	e00a      	b.n	8001166 <HAL_GPIO_Init+0x206>
 8001150:	2306      	movs	r3, #6
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x206>
 8001154:	2304      	movs	r3, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x206>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x206>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x206>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x206>
 8001164:	2300      	movs	r3, #0
 8001166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001176:	492f      	ldr	r1, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x2d4>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	492e      	ldr	r1, [pc, #184]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	492a      	ldr	r1, [pc, #168]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4920      	ldr	r1, [pc, #128]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	491a      	ldr	r1, [pc, #104]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d025      	beq.n	8001254 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	4910      	ldr	r1, [pc, #64]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
 8001214:	e025      	b.n	8001262 <HAL_GPIO_Init+0x302>
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400
 8001248:	40011800 	.word	0x40011800
 800124c:	40011c00 	.word	0x40011c00
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_GPIO_Init+0x324>)
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <HAL_GPIO_Init+0x324>)
 800125e:	4013      	ands	r3, r2
 8001260:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae7e 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	; 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	420e0020 	.word	0x420e0020

080012d0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_PWR_DisableBkUpAccess+0x14>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	420e0020 	.word	0x420e0020

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e26c      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001308:	4b92      	ldr	r3, [pc, #584]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00c      	beq.n	800132e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001314:	4b8f      	ldr	r3, [pc, #572]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d112      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
 8001320:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b89      	ldr	r3, [pc, #548]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d06c      	beq.n	8001414 <HAL_RCC_OscConfig+0x12c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d168      	bne.n	8001414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e246      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x76>
 8001350:	4b80      	ldr	r3, [pc, #512]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7f      	ldr	r2, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e02e      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a77      	ldr	r2, [pc, #476]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0xbc>
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a71      	ldr	r2, [pc, #452]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xd4>
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fcba 	bl	8000d3c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fcb6 	bl	8000d3c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1fa      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xe4>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fca6 	bl	8000d3c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fca2 	bl	8000d3c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1e6      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x10c>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d063      	beq.n	80014ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d11c      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1ba      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4939      	ldr	r1, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e03a      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fc5b 	bl	8000d3c <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fc57 	bl	8000d3c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e19b      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4927      	ldr	r1, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc3a 	bl	8000d3c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc36 	bl	8000d3c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e17a      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03a      	beq.n	800156c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d019      	beq.n	8001532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_OscConfig+0x274>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fc1a 	bl	8000d3c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fc16 	bl	8000d3c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e15a      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_RCC_OscConfig+0x26c>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f000 faa6 	bl	8001a7c <RCC_Delay>
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_RCC_OscConfig+0x274>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fc00 	bl	8000d3c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	e00f      	b.n	8001560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fbfc 	bl	8000d3c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d908      	bls.n	8001560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e140      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	42420000 	.word	0x42420000
 800155c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4b9e      	ldr	r3, [pc, #632]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e9      	bne.n	8001540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a6 	beq.w	80016c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b97      	ldr	r3, [pc, #604]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b94      	ldr	r3, [pc, #592]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a93      	ldr	r2, [pc, #588]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b91      	ldr	r3, [pc, #580]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b8e      	ldr	r3, [pc, #568]	; (80017e0 <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <HAL_RCC_OscConfig+0x4f8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a8a      	ldr	r2, [pc, #552]	; (80017e0 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbbd 	bl	8000d3c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fbb9 	bl	8000d3c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0fd      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_OscConfig+0x4f8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x312>
 80015ec:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e02d      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x334>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	4b73      	ldr	r3, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a72      	ldr	r2, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	e01c      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x356>
 8001624:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a69      	ldr	r2, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e00b      	b.n	8001656 <HAL_RCC_OscConfig+0x36e>
 800163e:	4b67      	ldr	r3, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a66      	ldr	r2, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d015      	beq.n	800168a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb6d 	bl	8000d3c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb69 	bl	8000d3c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0ab      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167c:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ee      	beq.n	8001666 <HAL_RCC_OscConfig+0x37e>
 8001688:	e014      	b.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fb57 	bl	8000d3c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fb53 	bl	8000d3c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e095      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ee      	bne.n	8001692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8081 	beq.w	80017d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d061      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d146      	bne.n	8001772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_OscConfig+0x4fc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fb27 	bl	8000d3c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fb23 	bl	8000d3c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e067      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	492d      	ldr	r1, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a19      	ldr	r1, [r3, #32]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	430b      	orrs	r3, r1
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_OscConfig+0x4fc>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff faf7 	bl	8000d3c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff faf3 	bl	8000d3c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e037      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x46a>
 8001770:	e02f      	b.n	80017d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_RCC_OscConfig+0x4fc>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fae0 	bl	8000d3c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fadc 	bl	8000d3c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e020      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x498>
 800179e:	e018      	b.n	80017d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	42420060 	.word	0x42420060

080017e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d0      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4965      	ldr	r1, [pc, #404]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e073      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4936      	ldr	r1, [pc, #216]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fa30 	bl	8000d3c <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fa2c 	bl	8000d3c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e053      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d210      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f98e 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	0800626c 	.word	0x0800626c
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b490      	push	{r4, r7}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019c4:	1d3c      	adds	r4, r7, #4
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019cc:	f240 2301 	movw	r3, #513	; 0x201
 80019d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x40>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x46>
 80019fa:	e02d      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fe:	623b      	str	r3, [r7, #32]
      break;
 8001a00:	e02d      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0e:	4413      	add	r3, r2
 8001a10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c5b      	lsrs	r3, r3, #17
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a2e:	4413      	add	r3, r2
 8001a30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3a:	fb02 f203 	mul.w	r2, r2, r3
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	e004      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	623b      	str	r3, [r7, #32]
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5a:	623b      	str	r3, [r7, #32]
      break;
 8001a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc90      	pop	{r4, r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	08006190 	.word	0x08006190
 8001a70:	40021000 	.word	0x40021000
 8001a74:	007a1200 	.word	0x007a1200
 8001a78:	003d0900 	.word	0x003d0900

08001a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <RCC_Delay+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <RCC_Delay+0x38>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a98:	bf00      	nop
  }
  while (Delay --);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	60fa      	str	r2, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f9      	bne.n	8001a98 <RCC_Delay+0x1c>
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e041      	b.n	8001b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff f810 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 fbf2 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e041      	b.n	8001bec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f839 	bl	8001bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f000 fba3 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_TIM_PWM_Start+0x24>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e022      	b.n	8001c72 <HAL_TIM_PWM_Start+0x6a>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d109      	bne.n	8001c46 <HAL_TIM_PWM_Start+0x3e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	e015      	b.n	8001c72 <HAL_TIM_PWM_Start+0x6a>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d109      	bne.n	8001c60 <HAL_TIM_PWM_Start+0x58>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	e008      	b.n	8001c72 <HAL_TIM_PWM_Start+0x6a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e072      	b.n	8001d60 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d104      	bne.n	8001c8a <HAL_TIM_PWM_Start+0x82>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c88:	e013      	b.n	8001cb2 <HAL_TIM_PWM_Start+0xaa>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d104      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x92>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	e00b      	b.n	8001cb2 <HAL_TIM_PWM_Start+0xaa>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_PWM_Start+0xa2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca8:	e003      	b.n	8001cb2 <HAL_TIM_PWM_Start+0xaa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fdcc 	bl	8002858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <HAL_TIM_PWM_Start+0x160>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_TIM_PWM_Start+0xcc>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <HAL_TIM_PWM_Start+0x164>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_TIM_PWM_Start+0xd0>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_TIM_PWM_Start+0xd2>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_TIM_PWM_Start+0x160>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d018      	beq.n	8001d2a <HAL_TIM_PWM_Start+0x122>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_TIM_PWM_Start+0x164>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_TIM_PWM_Start+0x122>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0a:	d00e      	beq.n	8001d2a <HAL_TIM_PWM_Start+0x122>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_TIM_PWM_Start+0x168>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_TIM_PWM_Start+0x122>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_TIM_PWM_Start+0x16c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_TIM_PWM_Start+0x122>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_TIM_PWM_Start+0x170>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d111      	bne.n	8001d4e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b06      	cmp	r3, #6
 8001d3a:	d010      	beq.n	8001d5e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	e007      	b.n	8001d5e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40013400 	.word	0x40013400
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800
 8001d78:	40000c00 	.word	0x40000c00

08001d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e093      	b.n	8001eb8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7fe fe15 	bl	80009d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc0:	f023 0307 	bic.w	r3, r3, #7
 8001dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 fa85 	bl	80022e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e1c:	f023 030c 	bic.w	r3, r3, #12
 8001e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	011a      	lsls	r2, r3, #4
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4313      	orrs	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ed8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ee8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d110      	bne.n	8001f12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ef6:	7b7b      	ldrb	r3, [r7, #13]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d001      	beq.n	8001f00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e069      	b.n	8001fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f10:	e031      	b.n	8001f76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d110      	bne.n	8001f3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f1e:	7b3b      	ldrb	r3, [r7, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e055      	b.n	8001fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f38:	e01d      	b.n	8001f76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f46:	7b7b      	ldrb	r3, [r7, #13]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e03e      	b.n	8001fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_TIM_Encoder_Start+0xc4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d008      	beq.n	8001f94 <HAL_TIM_Encoder_Start+0xd4>
 8001f82:	e00f      	b.n	8001fa4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fc63 	bl	8002858 <TIM_CCxChannelCmd>
      break;
 8001f92:	e016      	b.n	8001fc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fc5b 	bl	8002858 <TIM_CCxChannelCmd>
      break;
 8001fa2:	e00e      	b.n	8001fc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fc53 	bl	8002858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fc4c 	bl	8002858 <TIM_CCxChannelCmd>
      break;
 8001fc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0ac      	b.n	8002150 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	f200 809f 	bhi.w	8002144 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002041 	.word	0x08002041
 8002010:	08002145 	.word	0x08002145
 8002014:	08002145 	.word	0x08002145
 8002018:	08002145 	.word	0x08002145
 800201c:	08002081 	.word	0x08002081
 8002020:	08002145 	.word	0x08002145
 8002024:	08002145 	.word	0x08002145
 8002028:	08002145 	.word	0x08002145
 800202c:	080020c3 	.word	0x080020c3
 8002030:	08002145 	.word	0x08002145
 8002034:	08002145 	.word	0x08002145
 8002038:	08002145 	.word	0x08002145
 800203c:	08002103 	.word	0x08002103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f9c4 	bl	80023d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0208 	orr.w	r2, r2, #8
 800205a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6999      	ldr	r1, [r3, #24]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	619a      	str	r2, [r3, #24]
      break;
 800207e:	e062      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fa14 	bl	80024b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6999      	ldr	r1, [r3, #24]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	021a      	lsls	r2, r3, #8
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	619a      	str	r2, [r3, #24]
      break;
 80020c0:	e041      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa67 	bl	800259c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0208 	orr.w	r2, r2, #8
 80020dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0204 	bic.w	r2, r2, #4
 80020ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69d9      	ldr	r1, [r3, #28]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]
      break;
 8002100:	e021      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fabb 	bl	8002684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69d9      	ldr	r1, [r3, #28]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	021a      	lsls	r2, r3, #8
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	61da      	str	r2, [r3, #28]
      break;
 8002142:	e000      	b.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002144:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_TIM_ConfigClockSource+0x18>
 800216c:	2302      	movs	r3, #2
 800216e:	e0b3      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x180>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800218e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002196:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a8:	d03e      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0xd0>
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	f200 8087 	bhi.w	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b6:	f000 8085 	beq.w	80022c4 <HAL_TIM_ConfigClockSource+0x16c>
 80021ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021be:	d87f      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021c0:	2b70      	cmp	r3, #112	; 0x70
 80021c2:	d01a      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xa2>
 80021c4:	2b70      	cmp	r3, #112	; 0x70
 80021c6:	d87b      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021c8:	2b60      	cmp	r3, #96	; 0x60
 80021ca:	d050      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x116>
 80021cc:	2b60      	cmp	r3, #96	; 0x60
 80021ce:	d877      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021d0:	2b50      	cmp	r3, #80	; 0x50
 80021d2:	d03c      	beq.n	800224e <HAL_TIM_ConfigClockSource+0xf6>
 80021d4:	2b50      	cmp	r3, #80	; 0x50
 80021d6:	d873      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d058      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x136>
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d86f      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021e0:	2b30      	cmp	r3, #48	; 0x30
 80021e2:	d064      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x156>
 80021e4:	2b30      	cmp	r3, #48	; 0x30
 80021e6:	d86b      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d060      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x156>
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d867      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d05c      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x156>
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d05a      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021f8:	e062      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f000 fb06 	bl	800281a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800221c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	609a      	str	r2, [r3, #8]
      break;
 8002226:	e04e      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6899      	ldr	r1, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f000 faef 	bl	800281a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800224a:	609a      	str	r2, [r3, #8]
      break;
 800224c:	e03b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	461a      	mov	r2, r3
 800225c:	f000 fa66 	bl	800272c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2150      	movs	r1, #80	; 0x50
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fabd 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 800226c:	e02b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	461a      	mov	r2, r3
 800227c:	f000 fa84 	bl	8002788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2160      	movs	r1, #96	; 0x60
 8002286:	4618      	mov	r0, r3
 8002288:	f000 faad 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 800228c:	e01b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f000 fa46 	bl	800272c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fa9d 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80022ac:	e00b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f000 fa94 	bl	80027e6 <TIM_ITRx_SetConfig>
        break;
 80022be:	e002      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022c0:	bf00      	nop
 80022c2:	e000      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <TIM_Base_SetConfig+0xe0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00f      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d00b      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <TIM_Base_SetConfig+0xe8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <TIM_Base_SetConfig+0xec>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <TIM_Base_SetConfig+0xf0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <TIM_Base_SetConfig+0xe0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <TIM_Base_SetConfig+0x82>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00f      	beq.n	8002362 <TIM_Base_SetConfig+0x82>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d00b      	beq.n	8002362 <TIM_Base_SetConfig+0x82>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <TIM_Base_SetConfig+0xe8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0x82>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <TIM_Base_SetConfig+0xec>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0x82>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <TIM_Base_SetConfig+0xf0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <TIM_Base_SetConfig+0xe0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0xc8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <TIM_Base_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40013400 	.word	0x40013400
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00

080023d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f023 0201 	bic.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 0302 	bic.w	r3, r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <TIM_OC1_SetConfig+0xd8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_OC1_SetConfig+0x64>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <TIM_OC1_SetConfig+0xdc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10c      	bne.n	8002452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0308 	bic.w	r3, r3, #8
 800243e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <TIM_OC1_SetConfig+0xd8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_OC1_SetConfig+0x8e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <TIM_OC1_SetConfig+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d111      	bne.n	8002486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	621a      	str	r2, [r3, #32]
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40013400 	.word	0x40013400

080024b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f023 0210 	bic.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0320 	bic.w	r3, r3, #32
 80024fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <TIM_OC2_SetConfig+0xe0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_OC2_SetConfig+0x68>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <TIM_OC2_SetConfig+0xe4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d10d      	bne.n	8002538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <TIM_OC2_SetConfig+0xe0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_OC2_SetConfig+0x94>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <TIM_OC2_SetConfig+0xe4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d113      	bne.n	8002570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800254e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40013400 	.word	0x40013400

0800259c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <TIM_OC3_SetConfig+0xe0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_OC3_SetConfig+0x66>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a20      	ldr	r2, [pc, #128]	; (8002680 <TIM_OC3_SetConfig+0xe4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a16      	ldr	r2, [pc, #88]	; (800267c <TIM_OC3_SetConfig+0xe0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_OC3_SetConfig+0x92>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <TIM_OC3_SetConfig+0xe4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800263c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40013400 	.word	0x40013400

08002684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	031b      	lsls	r3, r3, #12
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <TIM_OC4_SetConfig+0xa0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_OC4_SetConfig+0x68>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <TIM_OC4_SetConfig+0xa4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d109      	bne.n	8002700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40013400 	.word	0x40013400

0800272c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 030a 	bic.w	r3, r3, #10
 8002768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 0210 	bic.w	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	f043 0307 	orr.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	609a      	str	r2, [r3, #8]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2201      	movs	r2, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e050      	b.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d00e      	beq.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10c      	bne.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4313      	orrs	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40013400 	.word	0x40013400
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00

08002978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002990:	2302      	movs	r3, #2
 8002992:	e03d      	b.n	8002a10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a22:	f3ef 8305 	mrs	r3, IPSR
 8002a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	607b      	str	r3, [r7, #4]
  return(result);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <osKernelInitialize+0x32>
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <osKernelInitialize+0x60>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d109      	bne.n	8002a56 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a42:	f3ef 8311 	mrs	r3, BASEPRI
 8002a46:	603b      	str	r3, [r7, #0]
  return(result);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002a4e:	f06f 0305 	mvn.w	r3, #5
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e00c      	b.n	8002a70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <osKernelInitialize+0x60>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <osKernelInitialize+0x60>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000094 	.word	0x20000094

08002a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a86:	f3ef 8305 	mrs	r3, IPSR
 8002a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a92:	f3ef 8310 	mrs	r3, PRIMASK
 8002a96:	607b      	str	r3, [r7, #4]
  return(result);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <osKernelStart+0x32>
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <osKernelStart+0x64>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d109      	bne.n	8002aba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8002aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ab2:	f06f 0305 	mvn.w	r3, #5
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e00e      	b.n	8002ad8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <osKernelStart+0x64>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <osKernelStart+0x64>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002ac8:	f001 f878 	bl	8003bbc <vTaskStartScheduler>
      stat = osOK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e002      	b.n	8002ad8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000094 	.word	0x20000094

08002ae8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b092      	sub	sp, #72	; 0x48
 8002aec:	af04      	add	r7, sp, #16
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af8:	f3ef 8305 	mrs	r3, IPSR
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 8094 	bne.w	8002c2e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b06:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0a:	623b      	str	r3, [r7, #32]
  return(result);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 808d 	bne.w	8002c2e <osThreadNew+0x146>
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <osThreadNew+0x150>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d106      	bne.n	8002b2a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b20:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f040 8082 	bne.w	8002c2e <osThreadNew+0x146>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d07e      	beq.n	8002c2e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002b34:	2318      	movs	r3, #24
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002b38:	2300      	movs	r3, #0
 8002b3a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002b3c:	f107 031b 	add.w	r3, r7, #27
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d045      	beq.n	8002bda <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <osThreadNew+0x74>
        name = attr->name;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <osThreadNew+0x9a>
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b38      	cmp	r3, #56	; 0x38
 8002b74:	d805      	bhi.n	8002b82 <osThreadNew+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <osThreadNew+0x9e>
        return (NULL);
 8002b82:	2300      	movs	r3, #0
 8002b84:	e054      	b.n	8002c30 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <osThreadNew+0xd4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ba4:	d90a      	bls.n	8002bbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <osThreadNew+0xd4>
        mem = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	e010      	b.n	8002bde <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10c      	bne.n	8002bde <osThreadNew+0xf6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d108      	bne.n	8002bde <osThreadNew+0xf6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <osThreadNew+0xf6>
          mem = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	e001      	b.n	8002bde <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d110      	bne.n	8002c06 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bec:	9202      	str	r2, [sp, #8]
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fe12 	bl	8003824 <xTaskCreateStatic>
 8002c00:	4603      	mov	r3, r0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e013      	b.n	8002c2e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fe5c 	bl	80038dc <xTaskCreate>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <osThreadNew+0x146>
          hTask = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c2e:	697b      	ldr	r3, [r7, #20]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3738      	adds	r7, #56	; 0x38
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000094 	.word	0x20000094

08002c3c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c44:	f3ef 8305 	mrs	r3, IPSR
 8002c48:	613b      	str	r3, [r7, #16]
  return(result);
 8002c4a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <osDelay+0x34>
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <osDelay+0x58>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d109      	bne.n	8002c78 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c64:	f3ef 8311 	mrs	r3, BASEPRI
 8002c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <osDelay+0x3c>
    stat = osErrorISR;
 8002c70:	f06f 0305 	mvn.w	r3, #5
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e007      	b.n	8002c88 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 ff66 	bl	8003b54 <vTaskDelay>
    }
  }

  return (stat);
 8002c88:	697b      	ldr	r3, [r7, #20]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000094 	.word	0x20000094

08002c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <vApplicationGetIdleTaskMemory+0x28>)
 8002ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	20000098 	.word	0x20000098
 8002cc4:	200000f4 	.word	0x200000f4

08002cc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8002cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	200002f4 	.word	0x200002f4
 8002cf8:	20000350 	.word	0x20000350

08002cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0208 	add.w	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f103 0208 	add.w	r2, r3, #8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 0208 	add.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d103      	bne.n	8002db8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e00c      	b.n	8002dd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e002      	b.n	8002dc6 <vListInsert+0x2e>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d2f6      	bcs.n	8002dc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6852      	ldr	r2, [r2, #4]
 8002e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d103      	bne.n	8002e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
	...

08002e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e86:	f001 ffc9 	bl	8004e1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d114      	bne.n	8002f06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01a      	beq.n	8002f1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 f8f1 	bl	80040d0 <xTaskRemoveFromEventList>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <xQueueGenericReset+0xcc>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	e009      	b.n	8002f1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3310      	adds	r3, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fef6 	bl	8002cfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fef1 	bl	8002cfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f1a:	f001 ffaf 	bl	8004e7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <xQueueGenericCreateStatic+0x52>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <xQueueGenericCreateStatic+0x56>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <xQueueGenericCreateStatic+0x58>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	623b      	str	r3, [r7, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <xQueueGenericCreateStatic+0x7e>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <xQueueGenericCreateStatic+0x82>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <xQueueGenericCreateStatic+0x84>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61fb      	str	r3, [r7, #28]
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fca:	2350      	movs	r3, #80	; 0x50
 8002fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b50      	cmp	r3, #80	; 0x50
 8002fd2:	d00a      	beq.n	8002fea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61bb      	str	r3, [r7, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ffc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f805 	bl	800301a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003012:	4618      	mov	r0, r3
 8003014:	3730      	adds	r7, #48	; 0x30
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e002      	b.n	800303c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003048:	2101      	movs	r1, #1
 800304a:	69b8      	ldr	r0, [r7, #24]
 800304c:	f7ff ff06 	bl	8002e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800306e:	2300      	movs	r3, #0
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <xQueueGenericSend+0x32>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <xQueueGenericSend+0x40>
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <xQueueGenericSend+0x44>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <xQueueGenericSend+0x46>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xQueueGenericSend+0x60>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d103      	bne.n	80030ce <xQueueGenericSend+0x6e>
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <xQueueGenericSend+0x72>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericSend+0x74>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueGenericSend+0x8e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 f9b1 	bl	8004454 <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueGenericSend+0x9e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueGenericSend+0xa2>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueGenericSend+0xa4>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueGenericSend+0xbe>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61fb      	str	r3, [r7, #28]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800311e:	f001 fe7d 	bl	8004e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <xQueueGenericSend+0xd4>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d129      	bne.n	8003188 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313a:	f000 fa07 	bl	800354c <prvCopyDataToQueue>
 800313e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3324      	adds	r3, #36	; 0x24
 800314c:	4618      	mov	r0, r3
 800314e:	f000 ffbf 	bl	80040d0 <xTaskRemoveFromEventList>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <xQueueGenericSend+0x1f8>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	e00a      	b.n	8003180 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <xQueueGenericSend+0x1f8>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003180:	f001 fe7c 	bl	8004e7c <vPortExitCritical>
				return pdPASS;
 8003184:	2301      	movs	r3, #1
 8003186:	e063      	b.n	8003250 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800318e:	f001 fe75 	bl	8004e7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003192:	2300      	movs	r3, #0
 8003194:	e05c      	b.n	8003250 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d106      	bne.n	80031aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fff9 	bl	8004198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031aa:	f001 fe67 	bl	8004e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031ae:	f000 fd6b 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031b2:	f001 fe33 	bl	8004e1c <vPortEnterCritical>
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031bc:	b25b      	sxtb	r3, r3
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d103      	bne.n	80031cc <xQueueGenericSend+0x16c>
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericSend+0x182>
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e2:	f001 fe4b 	bl	8004e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031e6:	1d3a      	adds	r2, r7, #4
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 ffe8 	bl	80041c4 <xTaskCheckForTimeOut>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d124      	bne.n	8003244 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031fc:	f000 fa9e 	bl	800373c <prvIsQueueFull>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	3310      	adds	r3, #16
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff0e 	bl	8004030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003216:	f000 fa29 	bl	800366c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800321a:	f000 fd43 	bl	8003ca4 <xTaskResumeAll>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f af7c 	bne.w	800311e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <xQueueGenericSend+0x1f8>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	e772      	b.n	800311e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323a:	f000 fa17 	bl	800366c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800323e:	f000 fd31 	bl	8003ca4 <xTaskResumeAll>
 8003242:	e76c      	b.n	800311e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003246:	f000 fa11 	bl	800366c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800324a:	f000 fd2b 	bl	8003ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800324e:	2300      	movs	r3, #0
		}
	}
}
 8003250:	4618      	mov	r0, r3
 8003252:	3738      	adds	r7, #56	; 0x38
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <xQueueGenericSendFromISR+0x3c>
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xQueueGenericSendFromISR+0x40>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xQueueGenericSendFromISR+0x42>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	623b      	str	r3, [r7, #32]
}
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d103      	bne.n	80032c6 <xQueueGenericSendFromISR+0x6a>
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <xQueueGenericSendFromISR+0x6e>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <xQueueGenericSendFromISR+0x70>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61fb      	str	r3, [r7, #28]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032e6:	f001 fe5b 	bl	8004fa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032ea:	f3ef 8211 	mrs	r2, BASEPRI
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	61ba      	str	r2, [r7, #24]
 8003300:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003302:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <xQueueGenericSendFromISR+0xbc>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d12c      	bne.n	8003372 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003328:	f000 f910 	bl	800354c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800332c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d112      	bne.n	800335c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fec4 	bl	80040d0 <xTaskRemoveFromEventList>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e007      	b.n	800336c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800335c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	b25a      	sxtb	r2, r3
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003370:	e001      	b.n	8003376 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003372:	2300      	movs	r3, #0
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003380:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003384:	4618      	mov	r0, r3
 8003386:	3738      	adds	r7, #56	; 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xQueueReceive+0x30>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	623b      	str	r3, [r7, #32]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueReceive+0x3e>
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueReceive+0x42>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueReceive+0x44>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueReceive+0x5e>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ea:	f001 f833 	bl	8004454 <xTaskGetSchedulerState>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <xQueueReceive+0x6e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueReceive+0x72>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueReceive+0x74>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueReceive+0x8e>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	61bb      	str	r3, [r7, #24]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800341a:	f001 fcff 	bl	8004e1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01f      	beq.n	800346a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342e:	f000 f8f7 	bl	8003620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3310      	adds	r3, #16
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fe42 	bl	80040d0 <xTaskRemoveFromEventList>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <xQueueReceive+0x1bc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003462:	f001 fd0b 	bl	8004e7c <vPortExitCritical>
				return pdPASS;
 8003466:	2301      	movs	r3, #1
 8003468:	e069      	b.n	800353e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d103      	bne.n	8003478 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003470:	f001 fd04 	bl	8004e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003474:	2300      	movs	r3, #0
 8003476:	e062      	b.n	800353e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fe88 	bl	8004198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800348c:	f001 fcf6 	bl	8004e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003490:	f000 fbfa 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003494:	f001 fcc2 	bl	8004e1c <vPortEnterCritical>
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d103      	bne.n	80034ae <xQueueReceive+0x122>
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d103      	bne.n	80034c4 <xQueueReceive+0x138>
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c4:	f001 fcda 	bl	8004e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034c8:	1d3a      	adds	r2, r7, #4
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fe77 	bl	80041c4 <xTaskCheckForTimeOut>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d123      	bne.n	8003524 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034de:	f000 f917 	bl	8003710 <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fd9d 	bl	8004030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034f8:	f000 f8b8 	bl	800366c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034fc:	f000 fbd2 	bl	8003ca4 <xTaskResumeAll>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d189      	bne.n	800341a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <xQueueReceive+0x1bc>)
 8003508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	e780      	b.n	800341a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351a:	f000 f8a7 	bl	800366c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800351e:	f000 fbc1 	bl	8003ca4 <xTaskResumeAll>
 8003522:	e77a      	b.n	800341a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003526:	f000 f8a1 	bl	800366c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800352a:	f000 fbbb 	bl	8003ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	f000 f8ee 	bl	8003710 <prvIsQueueEmpty>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f43f af6f 	beq.w	800341a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800353c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800353e:	4618      	mov	r0, r3
 8003540:	3730      	adds	r7, #48	; 0x30
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14d      	bne.n	800360e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 ff8a 	bl	8004490 <xTaskPriorityDisinherit>
 800357c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	e043      	b.n	800360e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d119      	bne.n	80035c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	461a      	mov	r2, r3
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	f002 f972 	bl	8005880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	441a      	add	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d32b      	bcc.n	800360e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	e026      	b.n	800360e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68d8      	ldr	r0, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	f002 f958 	bl	8005880 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	425b      	negs	r3, r3
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d207      	bcs.n	80035fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	425b      	negs	r3, r3
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d105      	bne.n	800360e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	3b01      	subs	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003616:	697b      	ldr	r3, [r7, #20]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d303      	bcc.n	8003654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	461a      	mov	r2, r3
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f002 f90e 	bl	8005880 <memcpy>
	}
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003674:	f001 fbd2 	bl	8004e1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003680:	e011      	b.n	80036a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fd1e 	bl	80040d0 <xTaskRemoveFromEventList>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800369a:	f000 fdf5 	bl	8004288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dce9      	bgt.n	8003682 <prvUnlockQueue+0x16>
 80036ae:	e000      	b.n	80036b2 <prvUnlockQueue+0x46>
					break;
 80036b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036ba:	f001 fbdf 	bl	8004e7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036be:	f001 fbad 	bl	8004e1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ca:	e011      	b.n	80036f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3310      	adds	r3, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fcf9 	bl	80040d0 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036e4:	f000 fdd0 	bl	8004288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036e8:	7bbb      	ldrb	r3, [r7, #14]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dce9      	bgt.n	80036cc <prvUnlockQueue+0x60>
 80036f8:	e000      	b.n	80036fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003704:	f001 fbba 	bl	8004e7c <vPortExitCritical>
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003718:	f001 fb80 	bl	8004e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e001      	b.n	800372e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800372e:	f001 fba5 	bl	8004e7c <vPortExitCritical>

	return xReturn;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003744:	f001 fb6a 	bl	8004e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	429a      	cmp	r2, r3
 8003752:	d102      	bne.n	800375a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e001      	b.n	800375e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800375e:	f001 fb8d 	bl	8004e7c <vPortExitCritical>

	return xReturn;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e014      	b.n	80037a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <vQueueAddToRegistry+0x4c>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800379e:	e006      	b.n	80037ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d9e7      	bls.n	800377c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20002604 	.word	0x20002604

080037bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037cc:	f001 fb26 	bl	8004e1c <vPortEnterCritical>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d103      	bne.n	80037e6 <vQueueWaitForMessageRestricted+0x2a>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d103      	bne.n	80037fc <vQueueWaitForMessageRestricted+0x40>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037fc:	f001 fb3e 	bl	8004e7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3324      	adds	r3, #36	; 0x24
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fc31 	bl	8004078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff28 	bl	800366c <prvUnlockQueue>
	}
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	; 0x38
 8003828:	af04      	add	r7, sp, #16
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	623b      	str	r3, [r7, #32]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xTaskCreateStatic+0x46>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61fb      	str	r3, [r7, #28]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800386a:	235c      	movs	r3, #92	; 0x5c
 800386c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b5c      	cmp	r3, #92	; 0x5c
 8003872:	d00a      	beq.n	800388a <xTaskCreateStatic+0x66>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	61bb      	str	r3, [r7, #24]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01e      	beq.n	80038ce <xTaskCreateStatic+0xaa>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01b      	beq.n	80038ce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a8:	2300      	movs	r3, #0
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f850 	bl	8003966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c8:	f000 f8d4 	bl	8003a74 <prvAddNewTaskToReadyList>
 80038cc:	e001      	b.n	80038d2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038d2:	697b      	ldr	r3, [r7, #20]
	}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af04      	add	r7, sp, #16
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fb93 	bl	800501c <pvPortMalloc>
 80038f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038fe:	205c      	movs	r0, #92	; 0x5c
 8003900:	f001 fb8c 	bl	800501c <pvPortMalloc>
 8003904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
 8003912:	e005      	b.n	8003920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f001 fc45 	bl	80051a4 <vPortFree>
 800391a:	e001      	b.n	8003920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d017      	beq.n	8003956 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	2300      	movs	r3, #0
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f80e 	bl	8003966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394a:	69f8      	ldr	r0, [r7, #28]
 800394c:	f000 f892 	bl	8003a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e002      	b.n	800395c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800395c:	69bb      	ldr	r3, [r7, #24]
	}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	461a      	mov	r2, r3
 800397e:	21a5      	movs	r1, #165	; 0xa5
 8003980:	f001 ff8c 	bl	800589c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800398e:	3b01      	subs	r3, #1
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f023 0307 	bic.w	r3, r3, #7
 800399c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <prvInitialiseNewTask+0x58>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	617b      	str	r3, [r7, #20]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e012      	b.n	80039ea <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	7819      	ldrb	r1, [r3, #0]
 80039cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	3334      	adds	r3, #52	; 0x34
 80039d4:	460a      	mov	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d9e9      	bls.n	80039c4 <prvInitialiseNewTask+0x5e>
 80039f0:	e000      	b.n	80039f4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80039f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b37      	cmp	r3, #55	; 0x37
 8003a00:	d901      	bls.n	8003a06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a02:	2337      	movs	r3, #55	; 0x37
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2200      	movs	r2, #0
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f98c 	bl	8002d3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	3318      	adds	r3, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f987 	bl	8002d3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	f001 f8ef 	bl	8004c38 <pxPortInitialiseStack>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a7c:	f001 f9ce 	bl	8004e1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <prvAddNewTaskToReadyList+0xc4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <prvAddNewTaskToReadyList+0xc4>)
 8003a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <prvAddNewTaskToReadyList+0xc4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d110      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aa0:	f000 fc16 	bl	80042d0 <prvInitialiseTaskLists>
 8003aa4:	e00d      	b.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <prvAddNewTaskToReadyList+0xcc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d802      	bhi.n	8003ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <prvAddNewTaskToReadyList+0xd0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <prvAddNewTaskToReadyList+0xd0>)
 8003aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <prvAddNewTaskToReadyList+0xd0>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <prvAddNewTaskToReadyList+0xd4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d903      	bls.n	8003ae8 <prvAddNewTaskToReadyList+0x74>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <prvAddNewTaskToReadyList+0xd4>)
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <prvAddNewTaskToReadyList+0xd8>)
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7ff f927 	bl	8002d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b04:	f001 f9ba 	bl	8004e7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <prvAddNewTaskToReadyList+0xcc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <prvAddNewTaskToReadyList+0xc8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d207      	bcs.n	8003b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <prvAddNewTaskToReadyList+0xdc>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000c24 	.word	0x20000c24
 8003b3c:	20000750 	.word	0x20000750
 8003b40:	20000c30 	.word	0x20000c30
 8003b44:	20000c40 	.word	0x20000c40
 8003b48:	20000c2c 	.word	0x20000c2c
 8003b4c:	20000754 	.word	0x20000754
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d017      	beq.n	8003b96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <vTaskDelay+0x60>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <vTaskDelay+0x30>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b84:	f000 f880 	bl	8003c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fcee 	bl	800456c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b90:	f000 f888 	bl	8003ca4 <xTaskResumeAll>
 8003b94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <vTaskDelay+0x64>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000c4c 	.word	0x20000c4c
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bca:	463a      	mov	r2, r7
 8003bcc:	1d39      	adds	r1, r7, #4
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff f860 	bl	8002c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	9202      	str	r2, [sp, #8]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	460a      	mov	r2, r1
 8003bea:	4921      	ldr	r1, [pc, #132]	; (8003c70 <vTaskStartScheduler+0xb4>)
 8003bec:	4821      	ldr	r0, [pc, #132]	; (8003c74 <vTaskStartScheduler+0xb8>)
 8003bee:	f7ff fe19 	bl	8003824 <xTaskCreateStatic>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <vTaskStartScheduler+0xbc>)
 8003bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <vTaskStartScheduler+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e001      	b.n	8003c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d102      	bne.n	8003c16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c10:	f000 fd00 	bl	8004614 <xTimerCreateTimerTask>
 8003c14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d116      	bne.n	8003c4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	613b      	str	r3, [r7, #16]
}
 8003c2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <vTaskStartScheduler+0xc0>)
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <vTaskStartScheduler+0xc4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vTaskStartScheduler+0xc8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c44:	f001 f878 	bl	8004d38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c48:	e00e      	b.n	8003c68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d10a      	bne.n	8003c68 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <vTaskStartScheduler+0xaa>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	080061a0 	.word	0x080061a0
 8003c74:	080042a1 	.word	0x080042a1
 8003c78:	20000c48 	.word	0x20000c48
 8003c7c:	20000c44 	.word	0x20000c44
 8003c80:	20000c30 	.word	0x20000c30
 8003c84:	20000c28 	.word	0x20000c28

08003c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <vTaskSuspendAll+0x18>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <vTaskSuspendAll+0x18>)
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000c4c 	.word	0x20000c4c

08003ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cd0:	f001 f8a4 	bl	8004e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	4a38      	ldr	r2, [pc, #224]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <xTaskResumeAll+0x118>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d162      	bne.n	8003dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <xTaskResumeAll+0x11c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d05e      	beq.n	8003dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cee:	e02f      	b.n	8003d50 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <xTaskResumeAll+0x120>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f883 	bl	8002e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff f87e 	bl	8002e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <xTaskResumeAll+0x124>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <xTaskResumeAll+0x7c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <xTaskResumeAll+0x124>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <xTaskResumeAll+0x128>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7ff f80b 	bl	8002d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <xTaskResumeAll+0x12c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <xTaskResumeAll+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1cb      	bne.n	8003cf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d5e:	f000 fb55 	bl	800440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <xTaskResumeAll+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d6e:	f000 f845 	bl	8003dfc <xTaskIncrementTick>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f1      	bne.n	8003d6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <xTaskResumeAll+0x134>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskResumeAll+0x138>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dac:	f001 f866 	bl	8004e7c <vPortExitCritical>

	return xAlreadyYielded;
 8003db0:	68bb      	ldr	r3, [r7, #8]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000c4c 	.word	0x20000c4c
 8003dc0:	20000c24 	.word	0x20000c24
 8003dc4:	20000be4 	.word	0x20000be4
 8003dc8:	20000c2c 	.word	0x20000c2c
 8003dcc:	20000754 	.word	0x20000754
 8003dd0:	20000750 	.word	0x20000750
 8003dd4:	20000c38 	.word	0x20000c38
 8003dd8:	20000c34 	.word	0x20000c34
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <xTaskGetTickCount+0x18>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dec:	687b      	ldr	r3, [r7, #4]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000c28 	.word	0x20000c28

08003dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <xTaskIncrementTick+0x150>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 808e 	bne.w	8003f2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e10:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <xTaskIncrementTick+0x154>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e18:	4a4d      	ldr	r2, [pc, #308]	; (8003f50 <xTaskIncrementTick+0x154>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d120      	bne.n	8003e66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e24:	4b4b      	ldr	r3, [pc, #300]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	603b      	str	r3, [r7, #0]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xTaskIncrementTick+0x46>
 8003e44:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <xTaskIncrementTick+0x15c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <xTaskIncrementTick+0x15c>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <xTaskIncrementTick+0x160>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a3f      	ldr	r2, [pc, #252]	; (8003f5c <xTaskIncrementTick+0x160>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	f000 fad3 	bl	800440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e66:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <xTaskIncrementTick+0x164>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d34e      	bcc.n	8003f0e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e70:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <xTaskIncrementTick+0x82>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <xTaskIncrementTick+0x84>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <xTaskIncrementTick+0x164>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	601a      	str	r2, [r3, #0]
					break;
 8003e8c:	e03f      	b.n	8003f0e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <xTaskIncrementTick+0x158>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d203      	bcs.n	8003eae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ea6:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <xTaskIncrementTick+0x164>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6013      	str	r3, [r2, #0]
						break;
 8003eac:	e02f      	b.n	8003f0e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe ffa8 	bl	8002e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe ff9f 	bl	8002e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <xTaskIncrementTick+0x168>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d903      	bls.n	8003ede <xTaskIncrementTick+0xe2>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <xTaskIncrementTick+0x168>)
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <xTaskIncrementTick+0x16c>)
 8003eec:	441a      	add	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f7fe ff2c 	bl	8002d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <xTaskIncrementTick+0x170>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3b3      	bcc.n	8003e70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f0c:	e7b0      	b.n	8003e70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f0e:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <xTaskIncrementTick+0x170>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4914      	ldr	r1, [pc, #80]	; (8003f68 <xTaskIncrementTick+0x16c>)
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d907      	bls.n	8003f36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e004      	b.n	8003f36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <xTaskIncrementTick+0x174>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <xTaskIncrementTick+0x174>)
 8003f34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <xTaskIncrementTick+0x178>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000c4c 	.word	0x20000c4c
 8003f50:	20000c28 	.word	0x20000c28
 8003f54:	20000bdc 	.word	0x20000bdc
 8003f58:	20000be0 	.word	0x20000be0
 8003f5c:	20000c3c 	.word	0x20000c3c
 8003f60:	20000c44 	.word	0x20000c44
 8003f64:	20000c2c 	.word	0x20000c2c
 8003f68:	20000754 	.word	0x20000754
 8003f6c:	20000750 	.word	0x20000750
 8003f70:	20000c34 	.word	0x20000c34
 8003f74:	20000c38 	.word	0x20000c38

08003f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <vTaskSwitchContext+0xa4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <vTaskSwitchContext+0xa8>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f8c:	e041      	b.n	8004012 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <vTaskSwitchContext+0xa8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f94:	4b23      	ldr	r3, [pc, #140]	; (8004024 <vTaskSwitchContext+0xac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e010      	b.n	8003fbe <vTaskSwitchContext+0x46>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	607b      	str	r3, [r7, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskSwitchContext+0x3e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	491a      	ldr	r1, [pc, #104]	; (8004028 <vTaskSwitchContext+0xb0>)
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0e4      	beq.n	8003f9c <vTaskSwitchContext+0x24>
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4a12      	ldr	r2, [pc, #72]	; (8004028 <vTaskSwitchContext+0xb0>)
 8003fde:	4413      	add	r3, r2
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d104      	bne.n	8004002 <vTaskSwitchContext+0x8a>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <vTaskSwitchContext+0xb4>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <vTaskSwitchContext+0xac>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6013      	str	r3, [r2, #0]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	20000c4c 	.word	0x20000c4c
 8004020:	20000c38 	.word	0x20000c38
 8004024:	20000c2c 	.word	0x20000c2c
 8004028:	20000754 	.word	0x20000754
 800402c:	20000750 	.word	0x20000750

08004030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <vTaskPlaceOnEventList+0x44>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3318      	adds	r3, #24
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fe fe9a 	bl	8002d98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004064:	2101      	movs	r1, #1
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f000 fa80 	bl	800456c <prvAddCurrentTaskToDelayedList>
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000750 	.word	0x20000750

08004078 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	617b      	str	r3, [r7, #20]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <vTaskPlaceOnEventListRestricted+0x54>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3318      	adds	r3, #24
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7fe fe52 	bl	8002d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f000 fa55 	bl	800456c <prvAddCurrentTaskToDelayedList>
	}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000750 	.word	0x20000750

080040d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	60fb      	str	r3, [r7, #12]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3318      	adds	r3, #24
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fe81 	bl	8002e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <xTaskRemoveFromEventList+0xb0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3304      	adds	r3, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fe78 	bl	8002e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <xTaskRemoveFromEventList+0xb4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <xTaskRemoveFromEventList+0x5c>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4a16      	ldr	r2, [pc, #88]	; (8004184 <xTaskRemoveFromEventList+0xb4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <xTaskRemoveFromEventList+0xb8>)
 800413a:	441a      	add	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe fe05 	bl	8002d52 <vListInsertEnd>
 8004148:	e005      	b.n	8004156 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3318      	adds	r3, #24
 800414e:	4619      	mov	r1, r3
 8004150:	480e      	ldr	r0, [pc, #56]	; (800418c <xTaskRemoveFromEventList+0xbc>)
 8004152:	f7fe fdfe 	bl	8002d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <xTaskRemoveFromEventList+0xc0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	429a      	cmp	r2, r3
 8004162:	d905      	bls.n	8004170 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <xTaskRemoveFromEventList+0xc4>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e001      	b.n	8004174 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000c4c 	.word	0x20000c4c
 8004184:	20000c2c 	.word	0x20000c2c
 8004188:	20000754 	.word	0x20000754
 800418c:	20000be4 	.word	0x20000be4
 8004190:	20000750 	.word	0x20000750
 8004194:	20000c38 	.word	0x20000c38

08004198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <vTaskInternalSetTimeOutState+0x24>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <vTaskInternalSetTimeOutState+0x28>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000c3c 	.word	0x20000c3c
 80041c0:	20000c28 	.word	0x20000c28

080041c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60fb      	str	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004206:	f000 fe09 	bl	8004e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <xTaskCheckForTimeOut+0xbc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d102      	bne.n	800422a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e023      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <xTaskCheckForTimeOut+0xc0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d007      	beq.n	8004246 <xTaskCheckForTimeOut+0x82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e015      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d20b      	bcs.n	8004268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff9b 	bl	8004198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e004      	b.n	8004272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004272:	f000 fe03 	bl	8004e7c <vPortExitCritical>

	return xReturn;
 8004276:	69fb      	ldr	r3, [r7, #28]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000c28 	.word	0x20000c28
 8004284:	20000c3c 	.word	0x20000c3c

08004288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <vTaskMissedYield+0x14>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000c38 	.word	0x20000c38

080042a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042a8:	f000 f852 	bl	8004350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <prvIdleTask+0x28>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d9f9      	bls.n	80042a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <prvIdleTask+0x2c>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042c4:	e7f0      	b.n	80042a8 <prvIdleTask+0x8>
 80042c6:	bf00      	nop
 80042c8:	20000754 	.word	0x20000754
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	e00c      	b.n	80042f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <prvInitialiseTaskLists+0x60>)
 80042e8:	4413      	add	r3, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fd06 	bl	8002cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3301      	adds	r3, #1
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b37      	cmp	r3, #55	; 0x37
 80042fa:	d9ef      	bls.n	80042dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042fc:	480d      	ldr	r0, [pc, #52]	; (8004334 <prvInitialiseTaskLists+0x64>)
 80042fe:	f7fe fcfd 	bl	8002cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004302:	480d      	ldr	r0, [pc, #52]	; (8004338 <prvInitialiseTaskLists+0x68>)
 8004304:	f7fe fcfa 	bl	8002cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004308:	480c      	ldr	r0, [pc, #48]	; (800433c <prvInitialiseTaskLists+0x6c>)
 800430a:	f7fe fcf7 	bl	8002cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800430e:	480c      	ldr	r0, [pc, #48]	; (8004340 <prvInitialiseTaskLists+0x70>)
 8004310:	f7fe fcf4 	bl	8002cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004314:	480b      	ldr	r0, [pc, #44]	; (8004344 <prvInitialiseTaskLists+0x74>)
 8004316:	f7fe fcf1 	bl	8002cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <prvInitialiseTaskLists+0x78>)
 800431c:	4a05      	ldr	r2, [pc, #20]	; (8004334 <prvInitialiseTaskLists+0x64>)
 800431e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvInitialiseTaskLists+0x7c>)
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <prvInitialiseTaskLists+0x68>)
 8004324:	601a      	str	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000754 	.word	0x20000754
 8004334:	20000bb4 	.word	0x20000bb4
 8004338:	20000bc8 	.word	0x20000bc8
 800433c:	20000be4 	.word	0x20000be4
 8004340:	20000bf8 	.word	0x20000bf8
 8004344:	20000c10 	.word	0x20000c10
 8004348:	20000bdc 	.word	0x20000bdc
 800434c:	20000be0 	.word	0x20000be0

08004350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004356:	e019      	b.n	800438c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004358:	f000 fd60 	bl	8004e1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <prvCheckTasksWaitingTermination+0x50>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe fd4d 	bl	8002e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <prvCheckTasksWaitingTermination+0x54>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <prvCheckTasksWaitingTermination+0x54>)
 8004376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3b01      	subs	r3, #1
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 8004380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004382:	f000 fd7b 	bl	8004e7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f810 	bl	80043ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <prvCheckTasksWaitingTermination+0x58>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e1      	bne.n	8004358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000bf8 	.word	0x20000bf8
 80043a4:	20000c24 	.word	0x20000c24
 80043a8:	20000c0c 	.word	0x20000c0c

080043ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 feee 	bl	80051a4 <vPortFree>
				vPortFree( pxTCB );
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 feeb 	bl	80051a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ce:	e018      	b.n	8004402 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d103      	bne.n	80043e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fee2 	bl	80051a4 <vPortFree>
	}
 80043e0:	e00f      	b.n	8004402 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d00a      	beq.n	8004402 <prvDeleteTCB+0x56>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <prvDeleteTCB+0x54>
	}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <prvResetNextTaskUnblockTime+0x40>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <prvResetNextTaskUnblockTime+0x14>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <prvResetNextTaskUnblockTime+0x16>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <prvResetNextTaskUnblockTime+0x44>)
 8004428:	f04f 32ff 	mov.w	r2, #4294967295
 800442c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800442e:	e008      	b.n	8004442 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <prvResetNextTaskUnblockTime+0x40>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4a04      	ldr	r2, [pc, #16]	; (8004450 <prvResetNextTaskUnblockTime+0x44>)
 8004440:	6013      	str	r3, [r2, #0]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	20000bdc 	.word	0x20000bdc
 8004450:	20000c44 	.word	0x20000c44

08004454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <xTaskGetSchedulerState+0x34>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004462:	2301      	movs	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	e008      	b.n	800447a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <xTaskGetSchedulerState+0x38>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004470:	2302      	movs	r3, #2
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	e001      	b.n	800447a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800447a:	687b      	ldr	r3, [r7, #4]
	}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000c30 	.word	0x20000c30
 800448c:	20000c4c 	.word	0x20000c4c

08004490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d056      	beq.n	8004554 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044a6:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <xTaskPriorityDisinherit+0xd0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d00a      	beq.n	80044c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d02c      	beq.n	8004554 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d128      	bne.n	8004554 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fc7e 	bl	8002e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <xTaskPriorityDisinherit+0xd4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d903      	bls.n	8004534 <xTaskPriorityDisinherit+0xa4>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <xTaskPriorityDisinherit+0xd4>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4a09      	ldr	r2, [pc, #36]	; (8004568 <xTaskPriorityDisinherit+0xd8>)
 8004542:	441a      	add	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe fc01 	bl	8002d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004554:	697b      	ldr	r3, [r7, #20]
	}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000750 	.word	0x20000750
 8004564:	20000c2c 	.word	0x20000c2c
 8004568:	20000754 	.word	0x20000754

0800456c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <prvAddCurrentTaskToDelayedList+0x90>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <prvAddCurrentTaskToDelayedList+0x94>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fc40 	bl	8002e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d10a      	bne.n	80045a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <prvAddCurrentTaskToDelayedList+0x94>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4819      	ldr	r0, [pc, #100]	; (8004604 <prvAddCurrentTaskToDelayedList+0x98>)
 80045a0:	f7fe fbd7 	bl	8002d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045a4:	e026      	b.n	80045f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d209      	bcs.n	80045d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <prvAddCurrentTaskToDelayedList+0x94>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fbe4 	bl	8002d98 <vListInsert>
}
 80045d0:	e010      	b.n	80045f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d2:	4b0e      	ldr	r3, [pc, #56]	; (800460c <prvAddCurrentTaskToDelayedList+0xa0>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe fbda 	bl	8002d98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d202      	bcs.n	80045f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000c28 	.word	0x20000c28
 8004600:	20000750 	.word	0x20000750
 8004604:	20000c10 	.word	0x20000c10
 8004608:	20000be0 	.word	0x20000be0
 800460c:	20000bdc 	.word	0x20000bdc
 8004610:	20000c44 	.word	0x20000c44

08004614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800461e:	f000 facb 	bl	8004bb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <xTimerCreateTimerTask+0x80>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d021      	beq.n	800466e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004632:	1d3a      	adds	r2, r7, #4
 8004634:	f107 0108 	add.w	r1, r7, #8
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fb43 	bl	8002cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	9202      	str	r2, [sp, #8]
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2302      	movs	r3, #2
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	460a      	mov	r2, r1
 8004654:	4910      	ldr	r1, [pc, #64]	; (8004698 <xTimerCreateTimerTask+0x84>)
 8004656:	4811      	ldr	r0, [pc, #68]	; (800469c <xTimerCreateTimerTask+0x88>)
 8004658:	f7ff f8e4 	bl	8003824 <xTaskCreateStatic>
 800465c:	4603      	mov	r3, r0
 800465e:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <xTimerCreateTimerTask+0x8c>)
 8004660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTimerCreateTimerTask+0x8c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	613b      	str	r3, [r7, #16]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000c80 	.word	0x20000c80
 8004698:	080061a8 	.word	0x080061a8
 800469c:	080047c1 	.word	0x080047c1
 80046a0:	20000c84 	.word	0x20000c84

080046a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	623b      	str	r3, [r7, #32]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <xTimerGenericCommand+0x98>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02a      	beq.n	8004730 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	dc18      	bgt.n	800471e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046ec:	f7ff feb2 	bl	8004454 <xTaskGetSchedulerState>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d109      	bne.n	800470a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <xTimerGenericCommand+0x98>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	f107 0110 	add.w	r1, r7, #16
 80046fe:	2300      	movs	r3, #0
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	f7fe fcad 	bl	8003060 <xQueueGenericSend>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24
 8004708:	e012      	b.n	8004730 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <xTimerGenericCommand+0x98>)
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f107 0110 	add.w	r1, r7, #16
 8004712:	2300      	movs	r3, #0
 8004714:	2200      	movs	r2, #0
 8004716:	f7fe fca3 	bl	8003060 <xQueueGenericSend>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24
 800471c:	e008      	b.n	8004730 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <xTimerGenericCommand+0x98>)
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f107 0110 	add.w	r1, r7, #16
 8004726:	2300      	movs	r3, #0
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	f7fe fd97 	bl	800325c <xQueueGenericSendFromISR>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004732:	4618      	mov	r0, r3
 8004734:	3728      	adds	r7, #40	; 0x28
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000c80 	.word	0x20000c80

08004740 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af02      	add	r7, sp, #8
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <prvProcessExpiredTimer+0x7c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fb55 	bl	8002e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d122      	bne.n	80047ac <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	18d1      	adds	r1, r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f000 f8c8 	bl	8004908 <prvInsertTimerInActiveList>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800477e:	2300      	movs	r3, #0
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	2100      	movs	r1, #0
 8004788:	6978      	ldr	r0, [r7, #20]
 800478a:	f7ff ff8b 	bl	80046a4 <xTimerGenericCommand>
 800478e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	4798      	blx	r3
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000c78 	.word	0x20000c78

080047c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f857 	bl	8004880 <prvGetNextExpireTime>
 80047d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4619      	mov	r1, r3
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f803 	bl	80047e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047de:	f000 f8d5 	bl	800498c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047e2:	e7f1      	b.n	80047c8 <prvTimerTask+0x8>

080047e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047ee:	f7ff fa4b 	bl	8003c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f866 	bl	80048c8 <prvSampleTimeNow>
 80047fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d130      	bne.n	8004866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <prvProcessTimerOrBlockTask+0x3c>
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	429a      	cmp	r2, r3
 8004810:	d806      	bhi.n	8004820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004812:	f7ff fa47 	bl	8003ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff91 	bl	8004740 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800481e:	e024      	b.n	800486a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <prvProcessTimerOrBlockTask+0x90>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <prvProcessTimerOrBlockTask+0x94>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	f7fe ffb9 	bl	80037bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800484a:	f7ff fa2b 	bl	8003ca4 <xTaskResumeAll>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <prvProcessTimerOrBlockTask+0x98>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
}
 8004864:	e001      	b.n	800486a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004866:	f7ff fa1d 	bl	8003ca4 <xTaskResumeAll>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000c7c 	.word	0x20000c7c
 8004878:	20000c80 	.word	0x20000c80
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <prvGetNextExpireTime+0x44>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <prvGetNextExpireTime+0x44>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e001      	b.n	80048b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000c78 	.word	0x20000c78

080048c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048d0:	f7ff fa86 	bl	8003de0 <xTaskGetTickCount>
 80048d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <prvSampleTimeNow+0x3c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d205      	bcs.n	80048ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048e0:	f000 f908 	bl	8004af4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e002      	b.n	80048f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <prvSampleTimeNow+0x3c>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000c88 	.word	0x20000c88

08004908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d812      	bhi.n	8004954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	429a      	cmp	r2, r3
 800493a:	d302      	bcc.n	8004942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e01b      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <prvInsertTimerInActiveList+0x7c>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7fe fa23 	bl	8002d98 <vListInsert>
 8004952:	e012      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d206      	bcs.n	800496a <prvInsertTimerInActiveList+0x62>
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e007      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <prvInsertTimerInActiveList+0x80>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fe fa0f 	bl	8002d98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800497a:	697b      	ldr	r3, [r7, #20]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000c7c 	.word	0x20000c7c
 8004988:	20000c78 	.word	0x20000c78

0800498c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	; 0x38
 8004990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004992:	e09d      	b.n	8004ad0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da18      	bge.n	80049cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	3304      	adds	r3, #4
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61fb      	str	r3, [r7, #28]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c2:	6850      	ldr	r0, [r2, #4]
 80049c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c6:	6892      	ldr	r2, [r2, #8]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	db7d      	blt.n	8004ace <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	3304      	adds	r3, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fa10 	bl	8002e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049e8:	463b      	mov	r3, r7
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff6c 	bl	80048c8 <prvSampleTimeNow>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d86b      	bhi.n	8004ad0 <prvProcessReceivedCommands+0x144>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <prvProcessReceivedCommands+0x74>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a29 	.word	0x08004a29
 8004a0c:	08004ad1 	.word	0x08004ad1
 8004a10:	08004a85 	.word	0x08004a85
 8004a14:	08004abd 	.word	0x08004abd
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a29 	.word	0x08004a29
 8004a20:	08004ad1 	.word	0x08004ad1
 8004a24:	08004a85 	.word	0x08004a85
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	18d1      	adds	r1, r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a36:	f7ff ff67 	bl	8004908 <prvInsertTimerInActiveList>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d047      	beq.n	8004ad0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13f      	bne.n	8004ad0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	441a      	add	r2, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f7ff fe1f 	bl	80046a4 <xTimerGenericCommand>
 8004a66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d130      	bne.n	8004ad0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	61bb      	str	r3, [r7, #24]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	18d1      	adds	r1, r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab6:	f7ff ff27 	bl	8004908 <prvInsertTimerInActiveList>
					break;
 8004aba:	e009      	b.n	8004ad0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac8:	f000 fb6c 	bl	80051a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004acc:	e000      	b.n	8004ad0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ace:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <prvProcessReceivedCommands+0x164>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	1d39      	adds	r1, r7, #4
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe fc57 	bl	800338c <xQueueReceive>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f47f af57 	bne.w	8004994 <prvProcessReceivedCommands+0x8>
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3730      	adds	r7, #48	; 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000c80 	.word	0x20000c80

08004af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004afa:	e045      	b.n	8004b88 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe f977 	bl	8002e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d12e      	bne.n	8004b88 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4413      	add	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d90e      	bls.n	8004b5a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fe f920 	bl	8002d98 <vListInsert>
 8004b58:	e016      	b.n	8004b88 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	2100      	movs	r1, #0
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fd9d 	bl	80046a4 <xTimerGenericCommand>
 8004b6a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	603b      	str	r3, [r7, #0]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1b4      	bne.n	8004afc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <prvSwitchTimerLists+0xbc>)
 8004b9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000c78 	.word	0x20000c78
 8004bb4:	20000c7c 	.word	0x20000c7c

08004bb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bbe:	f000 f92d 	bl	8004e1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <prvCheckForValidListAndQueue+0x60>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d120      	bne.n	8004c0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bca:	4814      	ldr	r0, [pc, #80]	; (8004c1c <prvCheckForValidListAndQueue+0x64>)
 8004bcc:	f7fe f896 	bl	8002cfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bd0:	4813      	ldr	r0, [pc, #76]	; (8004c20 <prvCheckForValidListAndQueue+0x68>)
 8004bd2:	f7fe f893 	bl	8002cfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <prvCheckForValidListAndQueue+0x6c>)
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <prvCheckForValidListAndQueue+0x64>)
 8004bda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <prvCheckForValidListAndQueue+0x70>)
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <prvCheckForValidListAndQueue+0x68>)
 8004be0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <prvCheckForValidListAndQueue+0x74>)
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <prvCheckForValidListAndQueue+0x78>)
 8004bea:	2110      	movs	r1, #16
 8004bec:	200a      	movs	r0, #10
 8004bee:	f7fe f99d 	bl	8002f2c <xQueueGenericCreateStatic>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <prvCheckForValidListAndQueue+0x60>)
 8004bf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <prvCheckForValidListAndQueue+0x60>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <prvCheckForValidListAndQueue+0x60>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	490b      	ldr	r1, [pc, #44]	; (8004c34 <prvCheckForValidListAndQueue+0x7c>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fdb0 	bl	800376c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c0c:	f000 f936 	bl	8004e7c <vPortExitCritical>
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000c80 	.word	0x20000c80
 8004c1c:	20000c50 	.word	0x20000c50
 8004c20:	20000c64 	.word	0x20000c64
 8004c24:	20000c78 	.word	0x20000c78
 8004c28:	20000c7c 	.word	0x20000c7c
 8004c2c:	20000d2c 	.word	0x20000d2c
 8004c30:	20000c8c 	.word	0x20000c8c
 8004c34:	080061b0 	.word	0x080061b0

08004c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b04      	subs	r3, #4
 8004c48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3b04      	subs	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b04      	subs	r3, #4
 8004c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <pxPortInitialiseStack+0x54>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b14      	subs	r3, #20
 8004c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b20      	subs	r3, #32
 8004c7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	08004c91 	.word	0x08004c91

08004c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <prvTaskExitError+0x54>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d00a      	beq.n	8004cba <prvTaskExitError+0x2a>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <prvTaskExitError+0x28>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60bb      	str	r3, [r7, #8]
}
 8004ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cce:	bf00      	nop
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0fc      	beq.n	8004cd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2000000c 	.word	0x2000000c
	...

08004cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <pxCurrentTCBConst2>)
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cfa:	f380 8809 	msr	PSP, r0
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8811 	msr	BASEPRI, r0
 8004d0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d0e:	4770      	bx	lr

08004d10 <pxCurrentTCBConst2>:
 8004d10:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d18:	4806      	ldr	r0, [pc, #24]	; (8004d34 <prvPortStartFirstTask+0x1c>)
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	f380 8808 	msr	MSP, r0
 8004d22:	b662      	cpsie	i
 8004d24:	b661      	cpsie	f
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	df00      	svc	0
 8004d30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d32:	bf00      	nop
 8004d34:	e000ed08 	.word	0xe000ed08

08004d38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <xPortStartScheduler+0xd0>)
 8004d40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	22ff      	movs	r2, #255	; 0xff
 8004d4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <xPortStartScheduler+0xd4>)
 8004d64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d66:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004d68:	2207      	movs	r2, #7
 8004d6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d6c:	e009      	b.n	8004d82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004d76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d0ef      	beq.n	8004d6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f1c3 0307 	rsb	r3, r3, #7
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d00a      	beq.n	8004db0 <xPortStartScheduler+0x78>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004db8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dc2:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <xPortStartScheduler+0xd8>)
 8004dc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <xPortStartScheduler+0xdc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <xPortStartScheduler+0xdc>)
 8004dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <xPortStartScheduler+0xdc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <xPortStartScheduler+0xdc>)
 8004de0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004de4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004de6:	f000 f8b9 	bl	8004f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <xPortStartScheduler+0xe0>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004df0:	f7ff ff92 	bl	8004d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004df4:	f7ff f8c0 	bl	8003f78 <vTaskSwitchContext>
	prvTaskExitError();
 8004df8:	f7ff ff4a 	bl	8004c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	e000e400 	.word	0xe000e400
 8004e0c:	20000d7c 	.word	0x20000d7c
 8004e10:	20000d80 	.word	0x20000d80
 8004e14:	e000ed20 	.word	0xe000ed20
 8004e18:	2000000c 	.word	0x2000000c

08004e1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
}
 8004e34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <vPortEnterCritical+0x58>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <vPortEnterCritical+0x58>)
 8004e3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <vPortEnterCritical+0x58>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10f      	bne.n	8004e68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <vPortEnterCritical+0x5c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	603b      	str	r3, [r7, #0]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortEnterCritical+0x4a>
	}
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <vPortExitCritical+0x4c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <vPortExitCritical+0x24>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	607b      	str	r3, [r7, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <vPortExitCritical+0x4c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <vPortExitCritical+0x4c>)
 8004ea8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <vPortExitCritical+0x4c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d105      	bne.n	8004ebe <vPortExitCritical+0x42>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
}
 8004ebc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	2000000c 	.word	0x2000000c
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ed0:	f3ef 8009 	mrs	r0, PSP
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <pxCurrentTCBConst>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ee6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004eea:	f380 8811 	msr	BASEPRI, r0
 8004eee:	f7ff f843 	bl	8003f78 <vTaskSwitchContext>
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8811 	msr	BASEPRI, r0
 8004efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	6808      	ldr	r0, [r1, #0]
 8004f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f06:	f380 8809 	msr	PSP, r0
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	4770      	bx	lr

08004f10 <pxCurrentTCBConst>:
 8004f10:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f32:	f7fe ff63 	bl	8003dfc <xTaskIncrementTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <xPortSysTickHandler+0x40>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <vPortSetupTimerInterrupt+0x30>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <vPortSetupTimerInterrupt+0x38>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <vPortSetupTimerInterrupt+0x3c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <vPortSetupTimerInterrupt+0x40>)
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7e:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <vPortSetupTimerInterrupt+0x30>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	e000e010 	.word	0xe000e010
 8004f90:	e000e018 	.word	0xe000e018
 8004f94:	20000000 	.word	0x20000000
 8004f98:	10624dd3 	.word	0x10624dd3
 8004f9c:	e000e014 	.word	0xe000e014

08004fa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fa6:	f3ef 8305 	mrs	r3, IPSR
 8004faa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d914      	bls.n	8004fdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <vPortValidateInterruptPriority+0x6c>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <vPortValidateInterruptPriority+0x70>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	7afa      	ldrb	r2, [r7, #11]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20a      	bcs.n	8004fdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	607b      	str	r3, [r7, #4]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <vPortValidateInterruptPriority+0x74>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d90a      	bls.n	8005002 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	603b      	str	r3, [r7, #0]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <vPortValidateInterruptPriority+0x60>
	}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	e000e3f0 	.word	0xe000e3f0
 8005010:	20000d7c 	.word	0x20000d7c
 8005014:	e000ed0c 	.word	0xe000ed0c
 8005018:	20000d80 	.word	0x20000d80

0800501c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005028:	f7fe fe2e 	bl	8003c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800502c:	4b58      	ldr	r3, [pc, #352]	; (8005190 <pvPortMalloc+0x174>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005034:	f000 f910 	bl	8005258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005038:	4b56      	ldr	r3, [pc, #344]	; (8005194 <pvPortMalloc+0x178>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	f040 808e 	bne.w	8005162 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01d      	beq.n	8005088 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800504c:	2208      	movs	r2, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	3308      	adds	r3, #8
 8005066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <pvPortMalloc+0x6c>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	617b      	str	r3, [r7, #20]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d069      	beq.n	8005162 <pvPortMalloc+0x146>
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <pvPortMalloc+0x17c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d864      	bhi.n	8005162 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005098:	4b40      	ldr	r3, [pc, #256]	; (800519c <pvPortMalloc+0x180>)
 800509a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800509c:	4b3f      	ldr	r3, [pc, #252]	; (800519c <pvPortMalloc+0x180>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a2:	e004      	b.n	80050ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d903      	bls.n	80050c0 <pvPortMalloc+0xa4>
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f1      	bne.n	80050a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050c0:	4b33      	ldr	r3, [pc, #204]	; (8005190 <pvPortMalloc+0x174>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d04b      	beq.n	8005162 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2208      	movs	r2, #8
 80050d0:	4413      	add	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	2308      	movs	r3, #8
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d91f      	bls.n	800512c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <pvPortMalloc+0xf8>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	613b      	str	r3, [r7, #16]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	1ad2      	subs	r2, r2, r3
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005126:	69b8      	ldr	r0, [r7, #24]
 8005128:	f000 f8f8 	bl	800531c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800512c:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <pvPortMalloc+0x17c>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <pvPortMalloc+0x17c>)
 8005138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800513a:	4b17      	ldr	r3, [pc, #92]	; (8005198 <pvPortMalloc+0x17c>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <pvPortMalloc+0x184>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d203      	bcs.n	800514e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <pvPortMalloc+0x17c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <pvPortMalloc+0x184>)
 800514c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <pvPortMalloc+0x178>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	431a      	orrs	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005162:	f7fe fd9f 	bl	8003ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <pvPortMalloc+0x16a>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <pvPortMalloc+0x168>
	return pvReturn;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200024fc 	.word	0x200024fc
 8005194:	20002508 	.word	0x20002508
 8005198:	20002500 	.word	0x20002500
 800519c:	200024f4 	.word	0x200024f4
 80051a0:	20002504 	.word	0x20002504

080051a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d048      	beq.n	8005248 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051b6:	2308      	movs	r3, #8
 80051b8:	425b      	negs	r3, r3
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <vPortFree+0xac>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <vPortFree+0x44>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60fb      	str	r3, [r7, #12]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <vPortFree+0x62>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60bb      	str	r3, [r7, #8]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <vPortFree+0xac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4013      	ands	r3, r2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d019      	beq.n	8005248 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d115      	bne.n	8005248 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <vPortFree+0xac>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	43db      	mvns	r3, r3
 8005226:	401a      	ands	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800522c:	f7fe fd2c 	bl	8003c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <vPortFree+0xb0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4413      	add	r3, r2
 800523a:	4a06      	ldr	r2, [pc, #24]	; (8005254 <vPortFree+0xb0>)
 800523c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	f000 f86c 	bl	800531c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005244:	f7fe fd2e 	bl	8003ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005248:	bf00      	nop
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20002508 	.word	0x20002508
 8005254:	20002500 	.word	0x20002500

08005258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525e:	f241 7370 	movw	r3, #6000	; 0x1770
 8005262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005264:	4b27      	ldr	r3, [pc, #156]	; (8005304 <prvHeapInit+0xac>)
 8005266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3307      	adds	r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <prvHeapInit+0xac>)
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <prvHeapInit+0xb0>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005296:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <prvHeapInit+0xb0>)
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4413      	add	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052a4:	2208      	movs	r2, #8
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a15      	ldr	r2, [pc, #84]	; (800530c <prvHeapInit+0xb4>)
 80052b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052ba:	4b14      	ldr	r3, [pc, #80]	; (800530c <prvHeapInit+0xb4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <prvHeapInit+0xb4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	1ad2      	subs	r2, r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <prvHeapInit+0xb4>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <prvHeapInit+0xb8>)
 80052e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4a09      	ldr	r2, [pc, #36]	; (8005314 <prvHeapInit+0xbc>)
 80052ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <prvHeapInit+0xc0>)
 80052f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000d84 	.word	0x20000d84
 8005308:	200024f4 	.word	0x200024f4
 800530c:	200024fc 	.word	0x200024fc
 8005310:	20002504 	.word	0x20002504
 8005314:	20002500 	.word	0x20002500
 8005318:	20002508 	.word	0x20002508

0800531c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005324:	4b27      	ldr	r3, [pc, #156]	; (80053c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e002      	b.n	8005330 <prvInsertBlockIntoFreeList+0x14>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d8f7      	bhi.n	800532a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	429a      	cmp	r2, r3
 800534a:	d108      	bne.n	800535e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	441a      	add	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d118      	bne.n	80053a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <prvInsertBlockIntoFreeList+0xac>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d00d      	beq.n	800539a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e008      	b.n	80053ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800539a:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <prvInsertBlockIntoFreeList+0xac>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e003      	b.n	80053ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d002      	beq.n	80053ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	200024f4 	.word	0x200024f4
 80053c8:	200024fc 	.word	0x200024fc

080053cc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80053d2:	2300      	movs	r3, #0
 80053d4:	71fb      	strb	r3, [r7, #7]
 80053d6:	e026      	b.n	8005426 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	3b50      	subs	r3, #80	; 0x50
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f82b 	bl	800543c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80053e6:	2100      	movs	r1, #0
 80053e8:	2000      	movs	r0, #0
 80053ea:	f000 f827 	bl	800543c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80053ee:	2100      	movs	r1, #0
 80053f0:	2010      	movs	r0, #16
 80053f2:	f000 f823 	bl	800543c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80053f6:	2300      	movs	r3, #0
 80053f8:	71bb      	strb	r3, [r7, #6]
 80053fa:	e00d      	b.n	8005418 <OLED_Refresh_Gram+0x4c>
 80053fc:	79ba      	ldrb	r2, [r7, #6]
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	490d      	ldr	r1, [pc, #52]	; (8005438 <OLED_Refresh_Gram+0x6c>)
 8005402:	00d2      	lsls	r2, r2, #3
 8005404:	440a      	add	r2, r1
 8005406:	4413      	add	r3, r2
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	4618      	mov	r0, r3
 800540e:	f000 f815 	bl	800543c <OLED_WR_Byte>
 8005412:	79bb      	ldrb	r3, [r7, #6]
 8005414:	3301      	adds	r3, #1
 8005416:	71bb      	strb	r3, [r7, #6]
 8005418:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800541c:	2b00      	cmp	r3, #0
 800541e:	daed      	bge.n	80053fc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	3301      	adds	r3, #1
 8005424:	71fb      	strb	r3, [r7, #7]
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b07      	cmp	r3, #7
 800542a:	d9d5      	bls.n	80053d8 <OLED_Refresh_Gram+0xc>
	}   
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20002644 	.word	0x20002644

0800543c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	460a      	mov	r2, r1
 8005446:	71fb      	strb	r3, [r7, #7]
 8005448:	4613      	mov	r3, r2
 800544a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800544c:	79bb      	ldrb	r3, [r7, #6]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8005452:	2201      	movs	r2, #1
 8005454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005458:	481c      	ldr	r0, [pc, #112]	; (80054cc <OLED_WR_Byte+0x90>)
 800545a:	f7fb ff15 	bl	8001288 <HAL_GPIO_WritePin>
 800545e:	e005      	b.n	800546c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005466:	4819      	ldr	r0, [pc, #100]	; (80054cc <OLED_WR_Byte+0x90>)
 8005468:	f7fb ff0e 	bl	8001288 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e01e      	b.n	80054b0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8005472:	2200      	movs	r2, #0
 8005474:	2120      	movs	r1, #32
 8005476:	4815      	ldr	r0, [pc, #84]	; (80054cc <OLED_WR_Byte+0x90>)
 8005478:	f7fb ff06 	bl	8001288 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800547c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da05      	bge.n	8005490 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8005484:	2201      	movs	r2, #1
 8005486:	2140      	movs	r1, #64	; 0x40
 8005488:	4810      	ldr	r0, [pc, #64]	; (80054cc <OLED_WR_Byte+0x90>)
 800548a:	f7fb fefd 	bl	8001288 <HAL_GPIO_WritePin>
 800548e:	e004      	b.n	800549a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8005490:	2200      	movs	r2, #0
 8005492:	2140      	movs	r1, #64	; 0x40
 8005494:	480d      	ldr	r0, [pc, #52]	; (80054cc <OLED_WR_Byte+0x90>)
 8005496:	f7fb fef7 	bl	8001288 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800549a:	2201      	movs	r2, #1
 800549c:	2120      	movs	r1, #32
 800549e:	480b      	ldr	r0, [pc, #44]	; (80054cc <OLED_WR_Byte+0x90>)
 80054a0:	f7fb fef2 	bl	8001288 <HAL_GPIO_WritePin>
		dat<<=1;   
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	3301      	adds	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b07      	cmp	r3, #7
 80054b4:	d9dd      	bls.n	8005472 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80054b6:	2201      	movs	r2, #1
 80054b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054bc:	4803      	ldr	r0, [pc, #12]	; (80054cc <OLED_WR_Byte+0x90>)
 80054be:	f7fb fee3 	bl	8001288 <HAL_GPIO_WritePin>
} 
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40011800 	.word	0x40011800

080054d0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80054d6:	2300      	movs	r3, #0
 80054d8:	71fb      	strb	r3, [r7, #7]
 80054da:	e014      	b.n	8005506 <OLED_Clear+0x36>
 80054dc:	2300      	movs	r3, #0
 80054de:	71bb      	strb	r3, [r7, #6]
 80054e0:	e00a      	b.n	80054f8 <OLED_Clear+0x28>
 80054e2:	79ba      	ldrb	r2, [r7, #6]
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	490c      	ldr	r1, [pc, #48]	; (8005518 <OLED_Clear+0x48>)
 80054e8:	00d2      	lsls	r2, r2, #3
 80054ea:	440a      	add	r2, r1
 80054ec:	4413      	add	r3, r2
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	79bb      	ldrb	r3, [r7, #6]
 80054f4:	3301      	adds	r3, #1
 80054f6:	71bb      	strb	r3, [r7, #6]
 80054f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	daf0      	bge.n	80054e2 <OLED_Clear+0x12>
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	3301      	adds	r3, #1
 8005504:	71fb      	strb	r3, [r7, #7]
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	2b07      	cmp	r3, #7
 800550a:	d9e7      	bls.n	80054dc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800550c:	f7ff ff5e 	bl	80053cc <OLED_Refresh_Gram>
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20002644 	.word	0x20002644

0800551c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	71fb      	strb	r3, [r7, #7]
 8005526:	460b      	mov	r3, r1
 8005528:	71bb      	strb	r3, [r7, #6]
 800552a:	4613      	mov	r3, r2
 800552c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8005532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	db41      	blt.n	80055be <OLED_DrawPoint+0xa2>
 800553a:	79bb      	ldrb	r3, [r7, #6]
 800553c:	2b3f      	cmp	r3, #63	; 0x3f
 800553e:	d83e      	bhi.n	80055be <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8005540:	79bb      	ldrb	r3, [r7, #6]
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f1c3 0307 	rsb	r3, r3, #7
 800554a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800554c:	79bb      	ldrb	r3, [r7, #6]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8005554:	7b7b      	ldrb	r3, [r7, #13]
 8005556:	f1c3 0307 	rsb	r3, r3, #7
 800555a:	2201      	movs	r2, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8005562:	797b      	ldrb	r3, [r7, #5]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <OLED_DrawPoint+0x72>
 8005568:	79fa      	ldrb	r2, [r7, #7]
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	4916      	ldr	r1, [pc, #88]	; (80055c8 <OLED_DrawPoint+0xac>)
 800556e:	00d2      	lsls	r2, r2, #3
 8005570:	440a      	add	r2, r1
 8005572:	4413      	add	r3, r2
 8005574:	7818      	ldrb	r0, [r3, #0]
 8005576:	79fa      	ldrb	r2, [r7, #7]
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	7bf9      	ldrb	r1, [r7, #15]
 800557c:	4301      	orrs	r1, r0
 800557e:	b2c8      	uxtb	r0, r1
 8005580:	4911      	ldr	r1, [pc, #68]	; (80055c8 <OLED_DrawPoint+0xac>)
 8005582:	00d2      	lsls	r2, r2, #3
 8005584:	440a      	add	r2, r1
 8005586:	4413      	add	r3, r2
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e018      	b.n	80055c0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800558e:	79fa      	ldrb	r2, [r7, #7]
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	490d      	ldr	r1, [pc, #52]	; (80055c8 <OLED_DrawPoint+0xac>)
 8005594:	00d2      	lsls	r2, r2, #3
 8005596:	440a      	add	r2, r1
 8005598:	4413      	add	r3, r2
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b25a      	sxtb	r2, r3
 800559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	4013      	ands	r3, r2
 80055a8:	b259      	sxtb	r1, r3
 80055aa:	79fa      	ldrb	r2, [r7, #7]
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	b2c8      	uxtb	r0, r1
 80055b0:	4905      	ldr	r1, [pc, #20]	; (80055c8 <OLED_DrawPoint+0xac>)
 80055b2:	00d2      	lsls	r2, r2, #3
 80055b4:	440a      	add	r2, r1
 80055b6:	4413      	add	r3, r2
 80055b8:	4602      	mov	r2, r0
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e000      	b.n	80055c0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80055be:	bf00      	nop
}
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	20002644 	.word	0x20002644

080055cc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4623      	mov	r3, r4
 80055dc:	71fb      	strb	r3, [r7, #7]
 80055de:	4603      	mov	r3, r0
 80055e0:	71bb      	strb	r3, [r7, #6]
 80055e2:	460b      	mov	r3, r1
 80055e4:	717b      	strb	r3, [r7, #5]
 80055e6:	4613      	mov	r3, r2
 80055e8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80055ea:	79bb      	ldrb	r3, [r7, #6]
 80055ec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80055ee:	797b      	ldrb	r3, [r7, #5]
 80055f0:	3b20      	subs	r3, #32
 80055f2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	73bb      	strb	r3, [r7, #14]
 80055f8:	e04d      	b.n	8005696 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80055fa:	793b      	ldrb	r3, [r7, #4]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d10b      	bne.n	8005618 <OLED_ShowChar+0x4c>
 8005600:	797a      	ldrb	r2, [r7, #5]
 8005602:	7bb9      	ldrb	r1, [r7, #14]
 8005604:	4828      	ldr	r0, [pc, #160]	; (80056a8 <OLED_ShowChar+0xdc>)
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4403      	add	r3, r0
 8005610:	440b      	add	r3, r1
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e007      	b.n	8005628 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8005618:	797a      	ldrb	r2, [r7, #5]
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	4923      	ldr	r1, [pc, #140]	; (80056ac <OLED_ShowChar+0xe0>)
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	440a      	add	r2, r1
 8005622:	4413      	add	r3, r2
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8005628:	2300      	movs	r3, #0
 800562a:	737b      	strb	r3, [r7, #13]
 800562c:	e02d      	b.n	800568a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800562e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	da07      	bge.n	8005646 <OLED_ShowChar+0x7a>
 8005636:	f897 2020 	ldrb.w	r2, [r7, #32]
 800563a:	79b9      	ldrb	r1, [r7, #6]
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff6c 	bl	800551c <OLED_DrawPoint>
 8005644:	e00c      	b.n	8005660 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8005646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79b9      	ldrb	r1, [r7, #6]
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff5e 	bl	800551c <OLED_DrawPoint>
			temp<<=1;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
			y++;
 8005666:	79bb      	ldrb	r3, [r7, #6]
 8005668:	3301      	adds	r3, #1
 800566a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800566c:	79ba      	ldrb	r2, [r7, #6]
 800566e:	7b3b      	ldrb	r3, [r7, #12]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	793b      	ldrb	r3, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d105      	bne.n	8005684 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8005678:	7b3b      	ldrb	r3, [r7, #12]
 800567a:	71bb      	strb	r3, [r7, #6]
				x++;
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	3301      	adds	r3, #1
 8005680:	71fb      	strb	r3, [r7, #7]
				break;
 8005682:	e005      	b.n	8005690 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8005684:	7b7b      	ldrb	r3, [r7, #13]
 8005686:	3301      	adds	r3, #1
 8005688:	737b      	strb	r3, [r7, #13]
 800568a:	7b7b      	ldrb	r3, [r7, #13]
 800568c:	2b07      	cmp	r3, #7
 800568e:	d9ce      	bls.n	800562e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	3301      	adds	r3, #1
 8005694:	73bb      	strb	r3, [r7, #14]
 8005696:	7bba      	ldrb	r2, [r7, #14]
 8005698:	793b      	ldrb	r3, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d3ad      	bcc.n	80055fa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd90      	pop	{r4, r7, pc}
 80056a8:	0800627c 	.word	0x0800627c
 80056ac:	080066f0 	.word	0x080066f0

080056b0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	4603      	mov	r3, r0
 80056b8:	603a      	str	r2, [r7, #0]
 80056ba:	71fb      	strb	r3, [r7, #7]
 80056bc:	460b      	mov	r3, r1
 80056be:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80056c0:	e01f      	b.n	8005702 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2b7a      	cmp	r3, #122	; 0x7a
 80056c6:	d904      	bls.n	80056d2 <OLED_ShowString+0x22>
 80056c8:	2300      	movs	r3, #0
 80056ca:	71fb      	strb	r3, [r7, #7]
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	3310      	adds	r3, #16
 80056d0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80056d2:	79bb      	ldrb	r3, [r7, #6]
 80056d4:	2b3a      	cmp	r3, #58	; 0x3a
 80056d6:	d905      	bls.n	80056e4 <OLED_ShowString+0x34>
 80056d8:	2300      	movs	r3, #0
 80056da:	71fb      	strb	r3, [r7, #7]
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	71bb      	strb	r3, [r7, #6]
 80056e0:	f7ff fef6 	bl	80054d0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	79b9      	ldrb	r1, [r7, #6]
 80056ea:	79f8      	ldrb	r0, [r7, #7]
 80056ec:	2301      	movs	r3, #1
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	230c      	movs	r3, #12
 80056f2:	f7ff ff6b 	bl	80055cc <OLED_ShowChar>
        x+=8;
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	3308      	adds	r3, #8
 80056fa:	71fb      	strb	r3, [r7, #7]
        p++;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1db      	bne.n	80056c2 <OLED_ShowString+0x12>
    }  
}	 
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <OLED_Init>:

void OLED_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005718:	f7fb fdce 	bl	80012b8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800571c:	4b41      	ldr	r3, [pc, #260]	; (8005824 <OLED_Init+0x110>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	4a40      	ldr	r2, [pc, #256]	; (8005824 <OLED_Init+0x110>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6213      	str	r3, [r2, #32]
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <OLED_Init+0x110>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4a3d      	ldr	r2, [pc, #244]	; (8005824 <OLED_Init+0x110>)
 800572e:	f023 0304 	bic.w	r3, r3, #4
 8005732:	6213      	str	r3, [r2, #32]
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005734:	f7fb fdcc 	bl	80012d0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	483a      	ldr	r0, [pc, #232]	; (8005828 <OLED_Init+0x114>)
 800573e:	f7fb fda3 	bl	8001288 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005742:	2064      	movs	r0, #100	; 0x64
 8005744:	f7fb fb04 	bl	8000d50 <HAL_Delay>
	OLED_RST_Set();
 8005748:	2201      	movs	r2, #1
 800574a:	2180      	movs	r1, #128	; 0x80
 800574c:	4836      	ldr	r0, [pc, #216]	; (8005828 <OLED_Init+0x114>)
 800574e:	f7fb fd9b 	bl	8001288 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005752:	2100      	movs	r1, #0
 8005754:	20ae      	movs	r0, #174	; 0xae
 8005756:	f7ff fe71 	bl	800543c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800575a:	2100      	movs	r1, #0
 800575c:	20d5      	movs	r0, #213	; 0xd5
 800575e:	f7ff fe6d 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005762:	2100      	movs	r1, #0
 8005764:	2050      	movs	r0, #80	; 0x50
 8005766:	f7ff fe69 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800576a:	2100      	movs	r1, #0
 800576c:	20a8      	movs	r0, #168	; 0xa8
 800576e:	f7ff fe65 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005772:	2100      	movs	r1, #0
 8005774:	203f      	movs	r0, #63	; 0x3f
 8005776:	f7ff fe61 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800577a:	2100      	movs	r1, #0
 800577c:	20d3      	movs	r0, #211	; 0xd3
 800577e:	f7ff fe5d 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005782:	2100      	movs	r1, #0
 8005784:	2000      	movs	r0, #0
 8005786:	f7ff fe59 	bl	800543c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800578a:	2100      	movs	r1, #0
 800578c:	2040      	movs	r0, #64	; 0x40
 800578e:	f7ff fe55 	bl	800543c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005792:	2100      	movs	r1, #0
 8005794:	208d      	movs	r0, #141	; 0x8d
 8005796:	f7ff fe51 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800579a:	2100      	movs	r1, #0
 800579c:	2014      	movs	r0, #20
 800579e:	f7ff fe4d 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80057a2:	2100      	movs	r1, #0
 80057a4:	2020      	movs	r0, #32
 80057a6:	f7ff fe49 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80057aa:	2100      	movs	r1, #0
 80057ac:	2002      	movs	r0, #2
 80057ae:	f7ff fe45 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80057b2:	2100      	movs	r1, #0
 80057b4:	20a1      	movs	r0, #161	; 0xa1
 80057b6:	f7ff fe41 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80057ba:	2100      	movs	r1, #0
 80057bc:	20c0      	movs	r0, #192	; 0xc0
 80057be:	f7ff fe3d 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80057c2:	2100      	movs	r1, #0
 80057c4:	20da      	movs	r0, #218	; 0xda
 80057c6:	f7ff fe39 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80057ca:	2100      	movs	r1, #0
 80057cc:	2012      	movs	r0, #18
 80057ce:	f7ff fe35 	bl	800543c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80057d2:	2100      	movs	r1, #0
 80057d4:	2081      	movs	r0, #129	; 0x81
 80057d6:	f7ff fe31 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80057da:	2100      	movs	r1, #0
 80057dc:	20ef      	movs	r0, #239	; 0xef
 80057de:	f7ff fe2d 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80057e2:	2100      	movs	r1, #0
 80057e4:	20d9      	movs	r0, #217	; 0xd9
 80057e6:	f7ff fe29 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80057ea:	2100      	movs	r1, #0
 80057ec:	20f1      	movs	r0, #241	; 0xf1
 80057ee:	f7ff fe25 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80057f2:	2100      	movs	r1, #0
 80057f4:	20db      	movs	r0, #219	; 0xdb
 80057f6:	f7ff fe21 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80057fa:	2100      	movs	r1, #0
 80057fc:	2030      	movs	r0, #48	; 0x30
 80057fe:	f7ff fe1d 	bl	800543c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005802:	2100      	movs	r1, #0
 8005804:	20a4      	movs	r0, #164	; 0xa4
 8005806:	f7ff fe19 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800580a:	2100      	movs	r1, #0
 800580c:	20a6      	movs	r0, #166	; 0xa6
 800580e:	f7ff fe15 	bl	800543c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005812:	2100      	movs	r1, #0
 8005814:	20af      	movs	r0, #175	; 0xaf
 8005816:	f7ff fe11 	bl	800543c <OLED_WR_Byte>
	OLED_Clear(); 
 800581a:	f7ff fe59 	bl	80054d0 <OLED_Clear>
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000
 8005828:	40011800 	.word	0x40011800

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000010 	.word	0x20000010

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	2600      	movs	r6, #0
 800583c:	4d0c      	ldr	r5, [pc, #48]	; (8005870 <__libc_init_array+0x38>)
 800583e:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	10a4      	asrs	r4, r4, #2
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	f000 fc5c 	bl	8006104 <_init>
 800584c:	2600      	movs	r6, #0
 800584e:	4d0a      	ldr	r5, [pc, #40]	; (8005878 <__libc_init_array+0x40>)
 8005850:	4c0a      	ldr	r4, [pc, #40]	; (800587c <__libc_init_array+0x44>)
 8005852:	1b64      	subs	r4, r4, r5
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08006d14 	.word	0x08006d14
 8005874:	08006d14 	.word	0x08006d14
 8005878:	08006d14 	.word	0x08006d14
 800587c:	08006d18 	.word	0x08006d18

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	4291      	cmp	r1, r2
 8005894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <memset>:
 800589c:	4603      	mov	r3, r0
 800589e:	4402      	add	r2, r0
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	f803 1b01 	strb.w	r1, [r3], #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <siprintf>:
 80058ac:	b40e      	push	{r1, r2, r3}
 80058ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b2:	b500      	push	{lr}
 80058b4:	b09c      	sub	sp, #112	; 0x70
 80058b6:	ab1d      	add	r3, sp, #116	; 0x74
 80058b8:	9002      	str	r0, [sp, #8]
 80058ba:	9006      	str	r0, [sp, #24]
 80058bc:	9107      	str	r1, [sp, #28]
 80058be:	9104      	str	r1, [sp, #16]
 80058c0:	4808      	ldr	r0, [pc, #32]	; (80058e4 <siprintf+0x38>)
 80058c2:	4909      	ldr	r1, [pc, #36]	; (80058e8 <siprintf+0x3c>)
 80058c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c8:	9105      	str	r1, [sp, #20]
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	a902      	add	r1, sp, #8
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f000 f868 	bl	80059a4 <_svfiprintf_r>
 80058d4:	2200      	movs	r2, #0
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	b01c      	add	sp, #112	; 0x70
 80058dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058e0:	b003      	add	sp, #12
 80058e2:	4770      	bx	lr
 80058e4:	20000010 	.word	0x20000010
 80058e8:	ffff0208 	.word	0xffff0208

080058ec <__ssputs_r>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	688e      	ldr	r6, [r1, #8]
 80058f2:	4682      	mov	sl, r0
 80058f4:	429e      	cmp	r6, r3
 80058f6:	460c      	mov	r4, r1
 80058f8:	4690      	mov	r8, r2
 80058fa:	461f      	mov	r7, r3
 80058fc:	d838      	bhi.n	8005970 <__ssputs_r+0x84>
 80058fe:	898a      	ldrh	r2, [r1, #12]
 8005900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005904:	d032      	beq.n	800596c <__ssputs_r+0x80>
 8005906:	6825      	ldr	r5, [r4, #0]
 8005908:	6909      	ldr	r1, [r1, #16]
 800590a:	3301      	adds	r3, #1
 800590c:	eba5 0901 	sub.w	r9, r5, r1
 8005910:	6965      	ldr	r5, [r4, #20]
 8005912:	444b      	add	r3, r9
 8005914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800591c:	106d      	asrs	r5, r5, #1
 800591e:	429d      	cmp	r5, r3
 8005920:	bf38      	it	cc
 8005922:	461d      	movcc	r5, r3
 8005924:	0553      	lsls	r3, r2, #21
 8005926:	d531      	bpl.n	800598c <__ssputs_r+0xa0>
 8005928:	4629      	mov	r1, r5
 800592a:	f000 fb45 	bl	8005fb8 <_malloc_r>
 800592e:	4606      	mov	r6, r0
 8005930:	b950      	cbnz	r0, 8005948 <__ssputs_r+0x5c>
 8005932:	230c      	movs	r3, #12
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	f8ca 3000 	str.w	r3, [sl]
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005948:	464a      	mov	r2, r9
 800594a:	6921      	ldr	r1, [r4, #16]
 800594c:	f7ff ff98 	bl	8005880 <memcpy>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	6126      	str	r6, [r4, #16]
 800595e:	444e      	add	r6, r9
 8005960:	6026      	str	r6, [r4, #0]
 8005962:	463e      	mov	r6, r7
 8005964:	6165      	str	r5, [r4, #20]
 8005966:	eba5 0509 	sub.w	r5, r5, r9
 800596a:	60a5      	str	r5, [r4, #8]
 800596c:	42be      	cmp	r6, r7
 800596e:	d900      	bls.n	8005972 <__ssputs_r+0x86>
 8005970:	463e      	mov	r6, r7
 8005972:	4632      	mov	r2, r6
 8005974:	4641      	mov	r1, r8
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	f000 fab8 	bl	8005eec <memmove>
 800597c:	68a3      	ldr	r3, [r4, #8]
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	1b9b      	subs	r3, r3, r6
 8005982:	4432      	add	r2, r6
 8005984:	2000      	movs	r0, #0
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	6022      	str	r2, [r4, #0]
 800598a:	e7db      	b.n	8005944 <__ssputs_r+0x58>
 800598c:	462a      	mov	r2, r5
 800598e:	f000 fb6d 	bl	800606c <_realloc_r>
 8005992:	4606      	mov	r6, r0
 8005994:	2800      	cmp	r0, #0
 8005996:	d1e1      	bne.n	800595c <__ssputs_r+0x70>
 8005998:	4650      	mov	r0, sl
 800599a:	6921      	ldr	r1, [r4, #16]
 800599c:	f000 fac0 	bl	8005f20 <_free_r>
 80059a0:	e7c7      	b.n	8005932 <__ssputs_r+0x46>
	...

080059a4 <_svfiprintf_r>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	4698      	mov	r8, r3
 80059aa:	898b      	ldrh	r3, [r1, #12]
 80059ac:	4607      	mov	r7, r0
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	460d      	mov	r5, r1
 80059b2:	4614      	mov	r4, r2
 80059b4:	b09d      	sub	sp, #116	; 0x74
 80059b6:	d50e      	bpl.n	80059d6 <_svfiprintf_r+0x32>
 80059b8:	690b      	ldr	r3, [r1, #16]
 80059ba:	b963      	cbnz	r3, 80059d6 <_svfiprintf_r+0x32>
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	f000 fafb 	bl	8005fb8 <_malloc_r>
 80059c2:	6028      	str	r0, [r5, #0]
 80059c4:	6128      	str	r0, [r5, #16]
 80059c6:	b920      	cbnz	r0, 80059d2 <_svfiprintf_r+0x2e>
 80059c8:	230c      	movs	r3, #12
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e0d1      	b.n	8005b76 <_svfiprintf_r+0x1d2>
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	616b      	str	r3, [r5, #20]
 80059d6:	2300      	movs	r3, #0
 80059d8:	9309      	str	r3, [sp, #36]	; 0x24
 80059da:	2320      	movs	r3, #32
 80059dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059e0:	2330      	movs	r3, #48	; 0x30
 80059e2:	f04f 0901 	mov.w	r9, #1
 80059e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b90 <_svfiprintf_r+0x1ec>
 80059ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f2:	4623      	mov	r3, r4
 80059f4:	469a      	mov	sl, r3
 80059f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059fa:	b10a      	cbz	r2, 8005a00 <_svfiprintf_r+0x5c>
 80059fc:	2a25      	cmp	r2, #37	; 0x25
 80059fe:	d1f9      	bne.n	80059f4 <_svfiprintf_r+0x50>
 8005a00:	ebba 0b04 	subs.w	fp, sl, r4
 8005a04:	d00b      	beq.n	8005a1e <_svfiprintf_r+0x7a>
 8005a06:	465b      	mov	r3, fp
 8005a08:	4622      	mov	r2, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f7ff ff6d 	bl	80058ec <__ssputs_r>
 8005a12:	3001      	adds	r0, #1
 8005a14:	f000 80aa 	beq.w	8005b6c <_svfiprintf_r+0x1c8>
 8005a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1a:	445a      	add	r2, fp
 8005a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a2 	beq.w	8005b6c <_svfiprintf_r+0x1c8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a32:	f10a 0a01 	add.w	sl, sl, #1
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a40:	4654      	mov	r4, sl
 8005a42:	2205      	movs	r2, #5
 8005a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a48:	4851      	ldr	r0, [pc, #324]	; (8005b90 <_svfiprintf_r+0x1ec>)
 8005a4a:	f000 fa41 	bl	8005ed0 <memchr>
 8005a4e:	9a04      	ldr	r2, [sp, #16]
 8005a50:	b9d8      	cbnz	r0, 8005a8a <_svfiprintf_r+0xe6>
 8005a52:	06d0      	lsls	r0, r2, #27
 8005a54:	bf44      	itt	mi
 8005a56:	2320      	movmi	r3, #32
 8005a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5c:	0711      	lsls	r1, r2, #28
 8005a5e:	bf44      	itt	mi
 8005a60:	232b      	movmi	r3, #43	; 0x2b
 8005a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a66:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6c:	d015      	beq.n	8005a9a <_svfiprintf_r+0xf6>
 8005a6e:	4654      	mov	r4, sl
 8005a70:	2000      	movs	r0, #0
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	9a07      	ldr	r2, [sp, #28]
 8005a78:	4621      	mov	r1, r4
 8005a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7e:	3b30      	subs	r3, #48	; 0x30
 8005a80:	2b09      	cmp	r3, #9
 8005a82:	d94e      	bls.n	8005b22 <_svfiprintf_r+0x17e>
 8005a84:	b1b0      	cbz	r0, 8005ab4 <_svfiprintf_r+0x110>
 8005a86:	9207      	str	r2, [sp, #28]
 8005a88:	e014      	b.n	8005ab4 <_svfiprintf_r+0x110>
 8005a8a:	eba0 0308 	sub.w	r3, r0, r8
 8005a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	46a2      	mov	sl, r4
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	e7d2      	b.n	8005a40 <_svfiprintf_r+0x9c>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	1d19      	adds	r1, r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	9103      	str	r1, [sp, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfbb      	ittet	lt
 8005aa6:	425b      	neglt	r3, r3
 8005aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8005aac:	9307      	strge	r3, [sp, #28]
 8005aae:	9307      	strlt	r3, [sp, #28]
 8005ab0:	bfb8      	it	lt
 8005ab2:	9204      	strlt	r2, [sp, #16]
 8005ab4:	7823      	ldrb	r3, [r4, #0]
 8005ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab8:	d10c      	bne.n	8005ad4 <_svfiprintf_r+0x130>
 8005aba:	7863      	ldrb	r3, [r4, #1]
 8005abc:	2b2a      	cmp	r3, #42	; 0x2a
 8005abe:	d135      	bne.n	8005b2c <_svfiprintf_r+0x188>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	3402      	adds	r4, #2
 8005ac4:	1d1a      	adds	r2, r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	9203      	str	r2, [sp, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bfb8      	it	lt
 8005ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ba0 <_svfiprintf_r+0x1fc>
 8005ad8:	2203      	movs	r2, #3
 8005ada:	4650      	mov	r0, sl
 8005adc:	7821      	ldrb	r1, [r4, #0]
 8005ade:	f000 f9f7 	bl	8005ed0 <memchr>
 8005ae2:	b140      	cbz	r0, 8005af6 <_svfiprintf_r+0x152>
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	eba0 000a 	sub.w	r0, r0, sl
 8005aea:	fa03 f000 	lsl.w	r0, r3, r0
 8005aee:	9b04      	ldr	r3, [sp, #16]
 8005af0:	3401      	adds	r4, #1
 8005af2:	4303      	orrs	r3, r0
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afa:	2206      	movs	r2, #6
 8005afc:	4825      	ldr	r0, [pc, #148]	; (8005b94 <_svfiprintf_r+0x1f0>)
 8005afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b02:	f000 f9e5 	bl	8005ed0 <memchr>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d038      	beq.n	8005b7c <_svfiprintf_r+0x1d8>
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <_svfiprintf_r+0x1f4>)
 8005b0c:	bb1b      	cbnz	r3, 8005b56 <_svfiprintf_r+0x1b2>
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	3307      	adds	r3, #7
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	3308      	adds	r3, #8
 8005b18:	9303      	str	r3, [sp, #12]
 8005b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1c:	4433      	add	r3, r6
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	e767      	b.n	80059f2 <_svfiprintf_r+0x4e>
 8005b22:	460c      	mov	r4, r1
 8005b24:	2001      	movs	r0, #1
 8005b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b2a:	e7a5      	b.n	8005a78 <_svfiprintf_r+0xd4>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f04f 0c0a 	mov.w	ip, #10
 8005b32:	4619      	mov	r1, r3
 8005b34:	3401      	adds	r4, #1
 8005b36:	9305      	str	r3, [sp, #20]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3e:	3a30      	subs	r2, #48	; 0x30
 8005b40:	2a09      	cmp	r2, #9
 8005b42:	d903      	bls.n	8005b4c <_svfiprintf_r+0x1a8>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0c5      	beq.n	8005ad4 <_svfiprintf_r+0x130>
 8005b48:	9105      	str	r1, [sp, #20]
 8005b4a:	e7c3      	b.n	8005ad4 <_svfiprintf_r+0x130>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	2301      	movs	r3, #1
 8005b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b54:	e7f0      	b.n	8005b38 <_svfiprintf_r+0x194>
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <_svfiprintf_r+0x1f8>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	f3af 8000 	nop.w
 8005b66:	1c42      	adds	r2, r0, #1
 8005b68:	4606      	mov	r6, r0
 8005b6a:	d1d6      	bne.n	8005b1a <_svfiprintf_r+0x176>
 8005b6c:	89ab      	ldrh	r3, [r5, #12]
 8005b6e:	065b      	lsls	r3, r3, #25
 8005b70:	f53f af2c 	bmi.w	80059cc <_svfiprintf_r+0x28>
 8005b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b76:	b01d      	add	sp, #116	; 0x74
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	ab03      	add	r3, sp, #12
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	462a      	mov	r2, r5
 8005b82:	4638      	mov	r0, r7
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <_svfiprintf_r+0x1f8>)
 8005b86:	a904      	add	r1, sp, #16
 8005b88:	f000 f87c 	bl	8005c84 <_printf_i>
 8005b8c:	e7eb      	b.n	8005b66 <_svfiprintf_r+0x1c2>
 8005b8e:	bf00      	nop
 8005b90:	08006ce0 	.word	0x08006ce0
 8005b94:	08006cea 	.word	0x08006cea
 8005b98:	00000000 	.word	0x00000000
 8005b9c:	080058ed 	.word	0x080058ed
 8005ba0:	08006ce6 	.word	0x08006ce6

08005ba4 <_printf_common>:
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	4616      	mov	r6, r2
 8005baa:	4699      	mov	r9, r3
 8005bac:	688a      	ldr	r2, [r1, #8]
 8005bae:	690b      	ldr	r3, [r1, #16]
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfb8      	it	lt
 8005bb6:	4613      	movlt	r3, r2
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc4:	b10a      	cbz	r2, 8005bca <_printf_common+0x26>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	6033      	str	r3, [r6, #0]
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	0699      	lsls	r1, r3, #26
 8005bce:	bf42      	ittt	mi
 8005bd0:	6833      	ldrmi	r3, [r6, #0]
 8005bd2:	3302      	addmi	r3, #2
 8005bd4:	6033      	strmi	r3, [r6, #0]
 8005bd6:	6825      	ldr	r5, [r4, #0]
 8005bd8:	f015 0506 	ands.w	r5, r5, #6
 8005bdc:	d106      	bne.n	8005bec <_printf_common+0x48>
 8005bde:	f104 0a19 	add.w	sl, r4, #25
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	6832      	ldr	r2, [r6, #0]
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	42ab      	cmp	r3, r5
 8005bea:	dc28      	bgt.n	8005c3e <_printf_common+0x9a>
 8005bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf0:	1e13      	subs	r3, r2, #0
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	0692      	lsls	r2, r2, #26
 8005bfa:	d42d      	bmi.n	8005c58 <_printf_common+0xb4>
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d020      	beq.n	8005c4c <_printf_common+0xa8>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	68e5      	ldr	r5, [r4, #12]
 8005c0e:	f003 0306 	and.w	r3, r3, #6
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	bf18      	it	ne
 8005c16:	2500      	movne	r5, #0
 8005c18:	6832      	ldr	r2, [r6, #0]
 8005c1a:	f04f 0600 	mov.w	r6, #0
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	bf08      	it	eq
 8005c22:	1aad      	subeq	r5, r5, r2
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	bf08      	it	eq
 8005c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bfc4      	itt	gt
 8005c30:	1a9b      	subgt	r3, r3, r2
 8005c32:	18ed      	addgt	r5, r5, r3
 8005c34:	341a      	adds	r4, #26
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d11a      	bne.n	8005c70 <_printf_common+0xcc>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e008      	b.n	8005c50 <_printf_common+0xac>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4649      	mov	r1, r9
 8005c44:	4638      	mov	r0, r7
 8005c46:	47c0      	blx	r8
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_printf_common+0xb0>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7c4      	b.n	8005be2 <_printf_common+0x3e>
 8005c58:	2030      	movs	r0, #48	; 0x30
 8005c5a:	18e1      	adds	r1, r4, r3
 8005c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c66:	4422      	add	r2, r4
 8005c68:	3302      	adds	r3, #2
 8005c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c6e:	e7c5      	b.n	8005bfc <_printf_common+0x58>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4622      	mov	r2, r4
 8005c74:	4649      	mov	r1, r9
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0e6      	beq.n	8005c4c <_printf_common+0xa8>
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7d9      	b.n	8005c36 <_printf_common+0x92>
	...

08005c84 <_printf_i>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	460c      	mov	r4, r1
 8005c8a:	7e27      	ldrb	r7, [r4, #24]
 8005c8c:	4691      	mov	r9, r2
 8005c8e:	2f78      	cmp	r7, #120	; 0x78
 8005c90:	4680      	mov	r8, r0
 8005c92:	469a      	mov	sl, r3
 8005c94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9a:	d807      	bhi.n	8005cac <_printf_i+0x28>
 8005c9c:	2f62      	cmp	r7, #98	; 0x62
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x32>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f000 80d9 	beq.w	8005e58 <_printf_i+0x1d4>
 8005ca6:	2f58      	cmp	r7, #88	; 0x58
 8005ca8:	f000 80a4 	beq.w	8005df4 <_printf_i+0x170>
 8005cac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb4:	e03a      	b.n	8005d2c <_printf_i+0xa8>
 8005cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cba:	2b15      	cmp	r3, #21
 8005cbc:	d8f6      	bhi.n	8005cac <_printf_i+0x28>
 8005cbe:	a001      	add	r0, pc, #4	; (adr r0, 8005cc4 <_printf_i+0x40>)
 8005cc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005cad 	.word	0x08005cad
 8005cd0:	08005cad 	.word	0x08005cad
 8005cd4:	08005cad 	.word	0x08005cad
 8005cd8:	08005cad 	.word	0x08005cad
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005cad 	.word	0x08005cad
 8005ce8:	08005cad 	.word	0x08005cad
 8005cec:	08005cad 	.word	0x08005cad
 8005cf0:	08005e3f 	.word	0x08005e3f
 8005cf4:	08005d61 	.word	0x08005d61
 8005cf8:	08005e21 	.word	0x08005e21
 8005cfc:	08005cad 	.word	0x08005cad
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005e61 	.word	0x08005e61
 8005d08:	08005cad 	.word	0x08005cad
 8005d0c:	08005d61 	.word	0x08005d61
 8005d10:	08005cad 	.word	0x08005cad
 8005d14:	08005cad 	.word	0x08005cad
 8005d18:	08005e29 	.word	0x08005e29
 8005d1c:	680b      	ldr	r3, [r1, #0]
 8005d1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	600a      	str	r2, [r1, #0]
 8005d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0a4      	b.n	8005e7a <_printf_i+0x1f6>
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	6808      	ldr	r0, [r1, #0]
 8005d34:	062e      	lsls	r6, r5, #24
 8005d36:	f100 0304 	add.w	r3, r0, #4
 8005d3a:	d50a      	bpl.n	8005d52 <_printf_i+0xce>
 8005d3c:	6805      	ldr	r5, [r0, #0]
 8005d3e:	600b      	str	r3, [r1, #0]
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	da03      	bge.n	8005d4c <_printf_i+0xc8>
 8005d44:	232d      	movs	r3, #45	; 0x2d
 8005d46:	426d      	negs	r5, r5
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	485e      	ldr	r0, [pc, #376]	; (8005ec8 <_printf_i+0x244>)
 8005d50:	e019      	b.n	8005d86 <_printf_i+0x102>
 8005d52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d56:	6805      	ldr	r5, [r0, #0]
 8005d58:	600b      	str	r3, [r1, #0]
 8005d5a:	bf18      	it	ne
 8005d5c:	b22d      	sxthne	r5, r5
 8005d5e:	e7ef      	b.n	8005d40 <_printf_i+0xbc>
 8005d60:	680b      	ldr	r3, [r1, #0]
 8005d62:	6825      	ldr	r5, [r4, #0]
 8005d64:	1d18      	adds	r0, r3, #4
 8005d66:	6008      	str	r0, [r1, #0]
 8005d68:	0628      	lsls	r0, r5, #24
 8005d6a:	d501      	bpl.n	8005d70 <_printf_i+0xec>
 8005d6c:	681d      	ldr	r5, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <_printf_i+0xf2>
 8005d70:	0669      	lsls	r1, r5, #25
 8005d72:	d5fb      	bpl.n	8005d6c <_printf_i+0xe8>
 8005d74:	881d      	ldrh	r5, [r3, #0]
 8005d76:	2f6f      	cmp	r7, #111	; 0x6f
 8005d78:	bf0c      	ite	eq
 8005d7a:	2308      	moveq	r3, #8
 8005d7c:	230a      	movne	r3, #10
 8005d7e:	4852      	ldr	r0, [pc, #328]	; (8005ec8 <_printf_i+0x244>)
 8005d80:	2100      	movs	r1, #0
 8005d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d86:	6866      	ldr	r6, [r4, #4]
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	bfa8      	it	ge
 8005d8c:	6821      	ldrge	r1, [r4, #0]
 8005d8e:	60a6      	str	r6, [r4, #8]
 8005d90:	bfa4      	itt	ge
 8005d92:	f021 0104 	bicge.w	r1, r1, #4
 8005d96:	6021      	strge	r1, [r4, #0]
 8005d98:	b90d      	cbnz	r5, 8005d9e <_printf_i+0x11a>
 8005d9a:	2e00      	cmp	r6, #0
 8005d9c:	d04d      	beq.n	8005e3a <_printf_i+0x1b6>
 8005d9e:	4616      	mov	r6, r2
 8005da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005da4:	fb03 5711 	mls	r7, r3, r1, r5
 8005da8:	5dc7      	ldrb	r7, [r0, r7]
 8005daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dae:	462f      	mov	r7, r5
 8005db0:	42bb      	cmp	r3, r7
 8005db2:	460d      	mov	r5, r1
 8005db4:	d9f4      	bls.n	8005da0 <_printf_i+0x11c>
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d10b      	bne.n	8005dd2 <_printf_i+0x14e>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07df      	lsls	r7, r3, #31
 8005dbe:	d508      	bpl.n	8005dd2 <_printf_i+0x14e>
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	6861      	ldr	r1, [r4, #4]
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	bfde      	ittt	le
 8005dc8:	2330      	movle	r3, #48	; 0x30
 8005dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dd2:	1b92      	subs	r2, r2, r6
 8005dd4:	6122      	str	r2, [r4, #16]
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f8cd a000 	str.w	sl, [sp]
 8005de0:	aa03      	add	r2, sp, #12
 8005de2:	f7ff fedf 	bl	8005ba4 <_printf_common>
 8005de6:	3001      	adds	r0, #1
 8005de8:	d14c      	bne.n	8005e84 <_printf_i+0x200>
 8005dea:	f04f 30ff 	mov.w	r0, #4294967295
 8005dee:	b004      	add	sp, #16
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	4834      	ldr	r0, [pc, #208]	; (8005ec8 <_printf_i+0x244>)
 8005df6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dfa:	680e      	ldr	r6, [r1, #0]
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e02:	061f      	lsls	r7, r3, #24
 8005e04:	600e      	str	r6, [r1, #0]
 8005e06:	d514      	bpl.n	8005e32 <_printf_i+0x1ae>
 8005e08:	07d9      	lsls	r1, r3, #31
 8005e0a:	bf44      	itt	mi
 8005e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e10:	6023      	strmi	r3, [r4, #0]
 8005e12:	b91d      	cbnz	r5, 8005e1c <_printf_i+0x198>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	e7af      	b.n	8005d80 <_printf_i+0xfc>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	f043 0320 	orr.w	r3, r3, #32
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	2378      	movs	r3, #120	; 0x78
 8005e2a:	4828      	ldr	r0, [pc, #160]	; (8005ecc <_printf_i+0x248>)
 8005e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e30:	e7e3      	b.n	8005dfa <_printf_i+0x176>
 8005e32:	065e      	lsls	r6, r3, #25
 8005e34:	bf48      	it	mi
 8005e36:	b2ad      	uxthmi	r5, r5
 8005e38:	e7e6      	b.n	8005e08 <_printf_i+0x184>
 8005e3a:	4616      	mov	r6, r2
 8005e3c:	e7bb      	b.n	8005db6 <_printf_i+0x132>
 8005e3e:	680b      	ldr	r3, [r1, #0]
 8005e40:	6826      	ldr	r6, [r4, #0]
 8005e42:	1d1d      	adds	r5, r3, #4
 8005e44:	6960      	ldr	r0, [r4, #20]
 8005e46:	600d      	str	r5, [r1, #0]
 8005e48:	0635      	lsls	r5, r6, #24
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	d501      	bpl.n	8005e52 <_printf_i+0x1ce>
 8005e4e:	6018      	str	r0, [r3, #0]
 8005e50:	e002      	b.n	8005e58 <_printf_i+0x1d4>
 8005e52:	0671      	lsls	r1, r6, #25
 8005e54:	d5fb      	bpl.n	8005e4e <_printf_i+0x1ca>
 8005e56:	8018      	strh	r0, [r3, #0]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4616      	mov	r6, r2
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	e7ba      	b.n	8005dd6 <_printf_i+0x152>
 8005e60:	680b      	ldr	r3, [r1, #0]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	600a      	str	r2, [r1, #0]
 8005e66:	681e      	ldr	r6, [r3, #0]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	f000 f82f 	bl	8005ed0 <memchr>
 8005e72:	b108      	cbz	r0, 8005e78 <_printf_i+0x1f4>
 8005e74:	1b80      	subs	r0, r0, r6
 8005e76:	6060      	str	r0, [r4, #4]
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e82:	e7a8      	b.n	8005dd6 <_printf_i+0x152>
 8005e84:	4632      	mov	r2, r6
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	47d0      	blx	sl
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0ab      	beq.n	8005dea <_printf_i+0x166>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	079b      	lsls	r3, r3, #30
 8005e96:	d413      	bmi.n	8005ec0 <_printf_i+0x23c>
 8005e98:	68e0      	ldr	r0, [r4, #12]
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	bfb8      	it	lt
 8005ea0:	4618      	movlt	r0, r3
 8005ea2:	e7a4      	b.n	8005dee <_printf_i+0x16a>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4640      	mov	r0, r8
 8005eac:	47d0      	blx	sl
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d09b      	beq.n	8005dea <_printf_i+0x166>
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	9903      	ldr	r1, [sp, #12]
 8005eb8:	1a5b      	subs	r3, r3, r1
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	dcf2      	bgt.n	8005ea4 <_printf_i+0x220>
 8005ebe:	e7eb      	b.n	8005e98 <_printf_i+0x214>
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	f104 0619 	add.w	r6, r4, #25
 8005ec6:	e7f5      	b.n	8005eb4 <_printf_i+0x230>
 8005ec8:	08006cf1 	.word	0x08006cf1
 8005ecc:	08006d02 	.word	0x08006d02

08005ed0 <memchr>:
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	b2c9      	uxtb	r1, r1
 8005ed6:	4402      	add	r2, r0
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	d101      	bne.n	8005ee2 <memchr+0x12>
 8005ede:	2000      	movs	r0, #0
 8005ee0:	e003      	b.n	8005eea <memchr+0x1a>
 8005ee2:	7804      	ldrb	r4, [r0, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	428c      	cmp	r4, r1
 8005ee8:	d1f6      	bne.n	8005ed8 <memchr+0x8>
 8005eea:	bd10      	pop	{r4, pc}

08005eec <memmove>:
 8005eec:	4288      	cmp	r0, r1
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	eb01 0402 	add.w	r4, r1, r2
 8005ef4:	d902      	bls.n	8005efc <memmove+0x10>
 8005ef6:	4284      	cmp	r4, r0
 8005ef8:	4623      	mov	r3, r4
 8005efa:	d807      	bhi.n	8005f0c <memmove+0x20>
 8005efc:	1e43      	subs	r3, r0, #1
 8005efe:	42a1      	cmp	r1, r4
 8005f00:	d008      	beq.n	8005f14 <memmove+0x28>
 8005f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f0a:	e7f8      	b.n	8005efe <memmove+0x12>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4402      	add	r2, r0
 8005f10:	428a      	cmp	r2, r1
 8005f12:	d100      	bne.n	8005f16 <memmove+0x2a>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f1e:	e7f7      	b.n	8005f10 <memmove+0x24>

08005f20 <_free_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d043      	beq.n	8005fb0 <_free_r+0x90>
 8005f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f2c:	1f0c      	subs	r4, r1, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfb8      	it	lt
 8005f32:	18e4      	addlt	r4, r4, r3
 8005f34:	f000 f8d0 	bl	80060d8 <__malloc_lock>
 8005f38:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <_free_r+0x94>)
 8005f3a:	6813      	ldr	r3, [r2, #0]
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	b933      	cbnz	r3, 8005f4e <_free_r+0x2e>
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	6014      	str	r4, [r2, #0]
 8005f44:	4628      	mov	r0, r5
 8005f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f4a:	f000 b8cb 	b.w	80060e4 <__malloc_unlock>
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	d90a      	bls.n	8005f68 <_free_r+0x48>
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	1862      	adds	r2, r4, r1
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bf01      	itttt	eq
 8005f5a:	681a      	ldreq	r2, [r3, #0]
 8005f5c:	685b      	ldreq	r3, [r3, #4]
 8005f5e:	1852      	addeq	r2, r2, r1
 8005f60:	6022      	streq	r2, [r4, #0]
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6004      	str	r4, [r0, #0]
 8005f66:	e7ed      	b.n	8005f44 <_free_r+0x24>
 8005f68:	461a      	mov	r2, r3
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	b10b      	cbz	r3, 8005f72 <_free_r+0x52>
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	d9fa      	bls.n	8005f68 <_free_r+0x48>
 8005f72:	6811      	ldr	r1, [r2, #0]
 8005f74:	1850      	adds	r0, r2, r1
 8005f76:	42a0      	cmp	r0, r4
 8005f78:	d10b      	bne.n	8005f92 <_free_r+0x72>
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	4401      	add	r1, r0
 8005f7e:	1850      	adds	r0, r2, r1
 8005f80:	4283      	cmp	r3, r0
 8005f82:	6011      	str	r1, [r2, #0]
 8005f84:	d1de      	bne.n	8005f44 <_free_r+0x24>
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4401      	add	r1, r0
 8005f8c:	6011      	str	r1, [r2, #0]
 8005f8e:	6053      	str	r3, [r2, #4]
 8005f90:	e7d8      	b.n	8005f44 <_free_r+0x24>
 8005f92:	d902      	bls.n	8005f9a <_free_r+0x7a>
 8005f94:	230c      	movs	r3, #12
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	e7d4      	b.n	8005f44 <_free_r+0x24>
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1821      	adds	r1, r4, r0
 8005f9e:	428b      	cmp	r3, r1
 8005fa0:	bf01      	itttt	eq
 8005fa2:	6819      	ldreq	r1, [r3, #0]
 8005fa4:	685b      	ldreq	r3, [r3, #4]
 8005fa6:	1809      	addeq	r1, r1, r0
 8005fa8:	6021      	streq	r1, [r4, #0]
 8005faa:	6063      	str	r3, [r4, #4]
 8005fac:	6054      	str	r4, [r2, #4]
 8005fae:	e7c9      	b.n	8005f44 <_free_r+0x24>
 8005fb0:	bd38      	pop	{r3, r4, r5, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000250c 	.word	0x2000250c

08005fb8 <_malloc_r>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	1ccd      	adds	r5, r1, #3
 8005fbc:	f025 0503 	bic.w	r5, r5, #3
 8005fc0:	3508      	adds	r5, #8
 8005fc2:	2d0c      	cmp	r5, #12
 8005fc4:	bf38      	it	cc
 8005fc6:	250c      	movcc	r5, #12
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	db01      	blt.n	8005fd2 <_malloc_r+0x1a>
 8005fce:	42a9      	cmp	r1, r5
 8005fd0:	d903      	bls.n	8005fda <_malloc_r+0x22>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fda:	f000 f87d 	bl	80060d8 <__malloc_lock>
 8005fde:	4921      	ldr	r1, [pc, #132]	; (8006064 <_malloc_r+0xac>)
 8005fe0:	680a      	ldr	r2, [r1, #0]
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	b99c      	cbnz	r4, 800600e <_malloc_r+0x56>
 8005fe6:	4f20      	ldr	r7, [pc, #128]	; (8006068 <_malloc_r+0xb0>)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	b923      	cbnz	r3, 8005ff6 <_malloc_r+0x3e>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 f862 	bl	80060b8 <_sbrk_r>
 8005ff4:	6038      	str	r0, [r7, #0]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f85d 	bl	80060b8 <_sbrk_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d123      	bne.n	800604a <_malloc_r+0x92>
 8006002:	230c      	movs	r3, #12
 8006004:	4630      	mov	r0, r6
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	f000 f86c 	bl	80060e4 <__malloc_unlock>
 800600c:	e7e3      	b.n	8005fd6 <_malloc_r+0x1e>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1b5b      	subs	r3, r3, r5
 8006012:	d417      	bmi.n	8006044 <_malloc_r+0x8c>
 8006014:	2b0b      	cmp	r3, #11
 8006016:	d903      	bls.n	8006020 <_malloc_r+0x68>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	441c      	add	r4, r3
 800601c:	6025      	str	r5, [r4, #0]
 800601e:	e004      	b.n	800602a <_malloc_r+0x72>
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	42a2      	cmp	r2, r4
 8006024:	bf0c      	ite	eq
 8006026:	600b      	streq	r3, [r1, #0]
 8006028:	6053      	strne	r3, [r2, #4]
 800602a:	4630      	mov	r0, r6
 800602c:	f000 f85a 	bl	80060e4 <__malloc_unlock>
 8006030:	f104 000b 	add.w	r0, r4, #11
 8006034:	1d23      	adds	r3, r4, #4
 8006036:	f020 0007 	bic.w	r0, r0, #7
 800603a:	1ac2      	subs	r2, r0, r3
 800603c:	d0cc      	beq.n	8005fd8 <_malloc_r+0x20>
 800603e:	1a1b      	subs	r3, r3, r0
 8006040:	50a3      	str	r3, [r4, r2]
 8006042:	e7c9      	b.n	8005fd8 <_malloc_r+0x20>
 8006044:	4622      	mov	r2, r4
 8006046:	6864      	ldr	r4, [r4, #4]
 8006048:	e7cc      	b.n	8005fe4 <_malloc_r+0x2c>
 800604a:	1cc4      	adds	r4, r0, #3
 800604c:	f024 0403 	bic.w	r4, r4, #3
 8006050:	42a0      	cmp	r0, r4
 8006052:	d0e3      	beq.n	800601c <_malloc_r+0x64>
 8006054:	1a21      	subs	r1, r4, r0
 8006056:	4630      	mov	r0, r6
 8006058:	f000 f82e 	bl	80060b8 <_sbrk_r>
 800605c:	3001      	adds	r0, #1
 800605e:	d1dd      	bne.n	800601c <_malloc_r+0x64>
 8006060:	e7cf      	b.n	8006002 <_malloc_r+0x4a>
 8006062:	bf00      	nop
 8006064:	2000250c 	.word	0x2000250c
 8006068:	20002510 	.word	0x20002510

0800606c <_realloc_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4607      	mov	r7, r0
 8006070:	4614      	mov	r4, r2
 8006072:	460e      	mov	r6, r1
 8006074:	b921      	cbnz	r1, 8006080 <_realloc_r+0x14>
 8006076:	4611      	mov	r1, r2
 8006078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800607c:	f7ff bf9c 	b.w	8005fb8 <_malloc_r>
 8006080:	b922      	cbnz	r2, 800608c <_realloc_r+0x20>
 8006082:	f7ff ff4d 	bl	8005f20 <_free_r>
 8006086:	4625      	mov	r5, r4
 8006088:	4628      	mov	r0, r5
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608c:	f000 f830 	bl	80060f0 <_malloc_usable_size_r>
 8006090:	42a0      	cmp	r0, r4
 8006092:	d20f      	bcs.n	80060b4 <_realloc_r+0x48>
 8006094:	4621      	mov	r1, r4
 8006096:	4638      	mov	r0, r7
 8006098:	f7ff ff8e 	bl	8005fb8 <_malloc_r>
 800609c:	4605      	mov	r5, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0f2      	beq.n	8006088 <_realloc_r+0x1c>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4622      	mov	r2, r4
 80060a6:	f7ff fbeb 	bl	8005880 <memcpy>
 80060aa:	4631      	mov	r1, r6
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff37 	bl	8005f20 <_free_r>
 80060b2:	e7e9      	b.n	8006088 <_realloc_r+0x1c>
 80060b4:	4635      	mov	r5, r6
 80060b6:	e7e7      	b.n	8006088 <_realloc_r+0x1c>

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_sbrk_r+0x1c>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa fd80 	bl	8000bc8 <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20002a44 	.word	0x20002a44

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_lock+0x8>)
 80060da:	f000 b811 	b.w	8006100 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	20002a4c 	.word	0x20002a4c

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__malloc_unlock+0x8>)
 80060e6:	f000 b80c 	b.w	8006102 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	20002a4c 	.word	0x20002a4c

080060f0 <_malloc_usable_size_r>:
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f18      	subs	r0, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbc      	itt	lt
 80060fa:	580b      	ldrlt	r3, [r1, r0]
 80060fc:	18c0      	addlt	r0, r0, r3
 80060fe:	4770      	bx	lr

08006100 <__retarget_lock_acquire_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_release_recursive>:
 8006102:	4770      	bx	lr

08006104 <_init>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr

08006110 <_fini>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr
